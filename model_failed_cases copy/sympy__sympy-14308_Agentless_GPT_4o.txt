# Instance ID: sympy__sympy-14308
# Model: Agentless GPT-4o

### Original Case Description and Gold Patch
# INSTANCE_ID: sympy__sympy-14308

### ISSUE TYPE
bug fix

### DESCRIPTION
vectors break pretty printing
```py
In [1]: from sympy.vector import *

In [2]: e = CoordSysCartesian('e')

In [3]: (x/y)**t*e.j
Out[3]:
⎛   t⎞ e_j
⎜⎛x⎞ e_j ⎟
⎜⎜─⎟ ⎟
⎝⎝y⎠ ⎠
```

Also, when it does print correctly, the baseline is wrong (it should be centered). 


### GOLD_PATCH
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):
         #Fixing the newlines
         lengths = []
         strs = ['']
+        flag = []
         for i, partstr in enumerate(o1):
+            flag.append(0)
             # XXX: What is this hack?
             if '\n' in partstr:
                 tempstr = partstr
                 tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                          u'\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                          + ' ' + vectstrs[i])
+                if u'\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
+                    for paren in range(len(tempstr)):
+                        flag[i] = 1
+                        if tempstr[paren] == u'\N{right parenthesis extension}':
+                            tempstr = tempstr[:paren] + u'\N{right parenthesis extension}'\
+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
+                            break
+                elif u'\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
+                    flag[i] = 1
+                    tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS LOWER HOOK}',
+                                        u'\N{RIGHT PARENTHESIS LOWER HOOK}'
+                                        + ' ' + vectstrs[i])
+                else:
+                    tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
+                                        u'\N{RIGHT PARENTHESIS UPPER HOOK}'
+                                        + ' ' + vectstrs[i])
                 o1[i] = tempstr
+
         o1 = [x.split('\n') for x in o1]
-        n_newlines = max([len(x) for x in o1])
-        for parts in o1:
-            lengths.append(len(parts[0]))
+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
+
+        if 1 in flag:                           # If there was a fractional scalar
+            for i, parts in enumerate(o1):
+                if len(parts) == 1:             # If part has no newline
+                    parts.insert(0, ' ' * (len(parts[0])))
+                    flag[i] = 1
+
+        for i, parts in enumerate(o1):
+            lengths.append(len(parts[flag[i]]))
             for j in range(n_newlines):
                 if j+1 <= len(parts):
                     if j >= len(strs):
                         strs.append(' ' * (sum(lengths[:-1]) +
                                            3*(len(lengths)-1)))
-                    if j == 0:
-                        strs[0] += parts[0] + ' + '
+                    if j == flag[i]:
+                        strs[flag[i]] += parts[flag[i]] + ' + '
                     else:
                         strs[j] += parts[j] + ' '*(lengths[-1] -
                                                    len(parts[j])+


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 81d644a..0ad82d0 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -917,8 +917,9 @@ class PrettyPrinter(Printer):
                 else:
                     #We always wrap the measure numbers in
                     #parentheses
-                    arg_str = self._print(
-                        v).parens()[0]
+                    arg_str = self._print(v)
+                    if not arg_str.startswith('('):
+                        arg_str = arg_str.parens()[0]
 
                     o1.append(arg_str + ' ' + k._pretty_form)
                 vectstrs.append(k._pretty_form)


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/printing/pretty/pretty.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit fb536869fb7aa28b2695ad7a3b70949926b291c4
Merge: bdae8a86f8 61251e932b
Author: Leonid Kovalev <leonidvkovalev@gmail.com>
Date:   Thu Feb 22 18:00:59 2018 -0500

    Merge pull request #14278 from sidhantnagpal/base-complex-power
    
    Abs of base raised to exponent for complex non-symbol bases

+ git diff fb536869fb7aa28b2695ad7a3b70949926b291c4
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 09e2b00735..efb0445fe5 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -917,8 +917,9 @@ def _print_BasisDependent(self, expr):
                 else:
                     #We always wrap the measure numbers in
                     #parentheses
-                    arg_str = self._print(
-                        v).parens()[0]
+                    arg_str = self._print(v)
+                    if not arg_str.startswith('('):
+                        arg_str = arg_str.parens()[0]
 
                     o1.append(arg_str + ' ' + k._pretty_form)
                 vectstrs.append(k._pretty_form)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.1.2.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout fb536869fb7aa28b2695ad7a3b70949926b291c4 sympy/printing/pretty/tests/test_pretty.py sympy/vector/tests/test_printing.py
Updated 0 paths from 2cd097319f
+ git apply -v -
Checking patch sympy/printing/pretty/tests/test_pretty.py...
Checking patch sympy/vector/tests/test_printing.py...
Applied patch sympy/printing/pretty/tests/test_pretty.py cleanly.
Applied patch sympy/vector/tests/test_printing.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/printing/pretty/tests/test_pretty.py sympy/vector/tests/test_printing.py
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/expr.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import defaultdict, Iterable
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/expr.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import defaultdict, Iterable
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        19829665
hash randomization: on (PYTHONHASHSEED=564148730)

sympy/printing/pretty/tests/test_pretty.py[117] 
test_pretty_ascii_str ok
test_pretty_unicode_str ok
test_upretty_greek ok
test_upretty_multiindex ok
test_upretty_sub_super ok
test_upretty_subs_missing_in_24 ok
test_missing_in_2X_issue_9047 X
test_upretty_modifiers ok
test_pretty_Cycle ok
test_pretty_basic ok
test_negative_fractions ok
test_issue_5524 ok
test_pretty_ordering ok
test_EulerGamma ok
test_GoldenRatio ok
test_pretty_relational ok
test_Assignment ok
test_AugmentedAssignment ok
test_issue_7117 ok
test_pretty_rational ok
test_pretty_functions ok
test_pretty_sqrt ok
test_pretty_sqrt_char_knob ok
test_pretty_sqrt_longsymbol_no_sqrt_char ok
test_pretty_KroneckerDelta ok
test_pretty_product ok
test_pretty_lambda ok
test_pretty_order ok
test_pretty_derivatives ok
test_pretty_integrals ok
test_pretty_matrix ok
test_pretty_ndim_arrays ok
test_tensor_TensorProduct ok
test_diffgeom_print_WedgeProduct ok
test_Adjoint ok
test_pretty_Trace_issue_9044 ok
test_MatrixExpressions ok
test_pretty_dotproduct ok
test_pretty_piecewise ok
test_pretty_ITE ok
test_pretty_seq ok
test_any_object_in_sequence ok
test_print_builtin_set ok
test_pretty_sets ok
test_pretty_SetExpr ok
test_pretty_ImageSet ok
test_pretty_ConditionSet ok
test_pretty_ComplexRegion ok
test_pretty_Union_issue_10414 ok
test_pretty_Intersection_issue_10414 ok
test_ProductSet_paranthesis ok
test_ProductSet_prod_char_issue_10413 ok
test_pretty_sequences ok
test_pretty_FourierSeries ok
test_pretty_FormalPowerSeries ok
test_pretty_limits ok
test_pretty_ComplexRootOf ok
test_pretty_RootSum ok
test_GroebnerBasis ok
test_pretty_Boolean ok
test_pretty_Domain ok
test_pretty_prec ok
test_pprint ok
test_pretty_class ok
test_pretty_no_wrap_line ok
test_settings ok
test_pretty_sum ok
test_units ok
test_pretty_Subs ok
test_gammas ok
test_beta ok
test_function_subclass_different_name ok
test_SingularityFunction ok
test_deltas ok
test_hyper ok
test_meijerg ok
test_noncommutative ok
test_pretty_special_functions ok
test_pretty_geometry E
test_expint ok
test_elliptic_functions ok
test_RandomDomain ok
test_PrettyPoly ok
test_issue_6285 ok
test_issue_6359 ok
test_issue_6739 ok
test_complicated_symbol_unchanged ok
test_categories ok
test_PrettyModules ok
test_QuotientRing ok
test_Homomorphism ok
test_Tr ok
test_pretty_Add ok
test_issue_7179 ok
test_issue_7180 ok
test_pretty_Complement ok
test_pretty_SymmetricDifference ok
test_pretty_Contains ok
test_issue_8292 E
test_issue_4335 ok
test_issue_8344 E
test_issue_6324 ok
test_issue_7927 ok
test_issue_6134 ok
test_issue_9877 ok
test_issue_13651 ok
test_pretty_primenu ok
test_pretty_primeomega ok
test_pretty_Mod ok
test_issue_11801 ok
test_pretty_UnevaluatedExpr ok
test_issue_10472 ok
test_MatrixElement_printing ok
test_issue_12675 E
test_MatrixSymbol_printing ok
test_degree_printing ok
test_vector_expr_pretty_printing E                                        [FAIL]

sympy/vector/tests/test_printing.py[5] 
test_str_printing ok
test_pretty_printing_ascii f
test_pretty_print_unicode E
test_latex_printing ok
test_custom_names ok                                                      [FAIL]


________________________________ xpassed tests _________________________________
sympy/printing/pretty/tests/test_pretty.py: test_missing_in_2X_issue_9047

________________________________________________________________________________
_______ sympy/printing/pretty/tests/test_pretty.py:test_pretty_geometry ________
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 5285, in test_pretty_geometry
    e = Ray((1, 1), angle=4.02*pi)
  File "/testbed/sympy/geometry/line.py", line 1275, in __new__
    return Ray2D(p1, p2, **kwargs)
  File "/testbed/sympy/geometry/line.py", line 2108, in __new__
    p2 = p1 + Point(x, y)
  File "/testbed/sympy/geometry/point.py", line 224, in __add__
    coords = [simplify(a + b) for a, b in zip(s, o)]
  File "/testbed/sympy/geometry/point.py", line 224, in <listcomp>
    coords = [simplify(a + b) for a, b in zip(s, o)]
  File "/testbed/sympy/simplify/simplify.py", line 600, in simplify
    short = exptrigsimp(short)
  File "/testbed/sympy/simplify/trigsimp.py", line 542, in exptrigsimp
    newexpr = bottom_up(expr, exp_trig)
  File "/testbed/sympy/simplify/simplify.py", line 1044, in bottom_up
    args = tuple([bottom_up(a, F, atoms, nonbasic)
  File "/testbed/sympy/simplify/simplify.py", line 1044, in <listcomp>
    args = tuple([bottom_up(a, F, atoms, nonbasic)
  File "/testbed/sympy/simplify/simplify.py", line 1048, in bottom_up
    rv = F(rv)
  File "/testbed/sympy/simplify/trigsimp.py", line 539, in exp_trig
    choices.append(e.rewrite(exp))
  File "/testbed/sympy/core/basic.py", line 1670, in rewrite
    return self._eval_rewrite(None, rule, **hints)
  File "/testbed/sympy/core/basic.py", line 1578, in _eval_rewrite
    rewritten = getattr(self, rule)(*args)
  File "/testbed/sympy/functions/elementary/trigonometric.py", line 1138, in _eval_rewrite_as_exp
    neg_exp, pos_exp = exp(-arg*I), exp(arg*I)
  File "/testbed/sympy/core/function.py", line 441, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/testbed/sympy/core/function.py", line 250, in __new__
    evaluated = cls.eval(*args)
  File "/testbed/sympy/functions/elementary/exponential.py", line 254, in eval
    if ask(Q.integer(2*coeff)):
  File "/testbed/sympy/assumptions/ask.py", line 1247, in ask
    from sympy.assumptions.satask import satask
  File "/testbed/sympy/assumptions/satask.py", line 9, in <module>
    from sympy.assumptions.sathandlers import fact_registry
  File "/testbed/sympy/assumptions/sathandlers.py", line 3, in <module>
    from collections import MutableMapping, defaultdict
  File "<frozen importlib._bootstrap>", line 1055, in _handle_fromlist
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
__________ sympy/printing/pretty/tests/test_pretty.py:test_issue_8292 __________
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 5835, in test_issue_8292
    e = sympify('((x+x**4)/(x-1))-(2*(x-1)**4/(x-1)**4)', evaluate=False)
  File "/testbed/sympy/core/sympify.py", line 368, in sympify
    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)
  File "/testbed/sympy/parsing/sympy_parser.py", line 948, in parse_expr
    code = compile(evaluateFalse(code), '<string>', 'eval')
ValueError: Name node can't be used with 'False' constant
________________________________________________________________________________
__________ sympy/printing/pretty/tests/test_pretty.py:test_issue_8344 __________
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 5876, in test_issue_8344
    e = sympify('2*x*y**2/1**2 + 1', evaluate=False)
  File "/testbed/sympy/core/sympify.py", line 368, in sympify
    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)
  File "/testbed/sympy/parsing/sympy_parser.py", line 948, in parse_expr
    code = compile(evaluateFalse(code), '<string>', 'eval')
ValueError: Name node can't be used with 'False' constant
________________________________________________________________________________
_________ sympy/printing/pretty/tests/test_pretty.py:test_issue_12675 __________
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 6104, in test_issue_12675
    assert upretty((x/y)**t*e.j) == ucode_str
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 231, in upretty
    return xpretty(expr, order=order, use_unicode=True, wrap_line=False)
  File "/testbed/sympy/printing/pretty/pretty.py", line 2306, in pretty
    return pp.doprint(expr)
  File "/testbed/sympy/printing/pretty/pretty.py", line 62, in doprint
    return self._print(expr).render(**self._settings)
  File "/testbed/sympy/printing/printer.py", line 274, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/pretty/pretty.py", line 921, in _print_BasisDependent
    if not arg_str.startswith('('):
AttributeError: 'prettyForm' object has no attribute 'startswith'
________________________________________________________________________________
_ sympy/printing/pretty/tests/test_pretty.py:test_vector_expr_pretty_printing __
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 6137, in test_vector_expr_pretty_printing
    assert upretty(Cross(A.i, A.x*A.i+3*A.y*A.j)) == u("(A_i)×((A_x) A_i + (3⋅A_y) A_j)")
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 231, in upretty
    return xpretty(expr, order=order, use_unicode=True, wrap_line=False)
  File "/testbed/sympy/printing/pretty/pretty.py", line 2306, in pretty
    return pp.doprint(expr)
  File "/testbed/sympy/printing/pretty/pretty.py", line 62, in doprint
    return self._print(expr).render(**self._settings)
  File "/testbed/sympy/printing/printer.py", line 274, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/pretty/pretty.py", line 92, in _print_Cross
    pform = self._print(vec2)
  File "/testbed/sympy/printing/printer.py", line 274, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/pretty/pretty.py", line 921, in _print_BasisDependent
    if not arg_str.startswith('('):
AttributeError: 'prettyForm' object has no attribute 'startswith'
________________________________________________________________________________
________ sympy/vector/tests/test_printing.py:test_pretty_print_unicode _________
  File "/testbed/sympy/vector/tests/test_printing.py", line 132, in test_pretty_print_unicode
    assert upretty(v[5]) == u'(a) N_i + (-b) N_j'
  File "/testbed/sympy/vector/tests/test_printing.py", line 17, in upretty
    return xpretty(expr, use_unicode=True, wrap_line=False)
  File "/testbed/sympy/printing/pretty/pretty.py", line 2306, in pretty
    return pp.doprint(expr)
  File "/testbed/sympy/printing/pretty/pretty.py", line 62, in doprint
    return self._print(expr).render(**self._settings)
  File "/testbed/sympy/printing/printer.py", line 274, in _print
    return getattr(self, printmethod)(expr, *args, **kwargs)
  File "/testbed/sympy/printing/pretty/pretty.py", line 921, in _print_BasisDependent
    if not arg_str.startswith('('):
AttributeError: 'prettyForm' object has no attribute 'startswith'

 tests finished: 114 passed, 1 expected to fail, 1 expected to fail but passed, 
6 exceptions, in 5.91 seconds 
DO *NOT* COMMIT!
+ git checkout fb536869fb7aa28b2695ad7a3b70949926b291c4 sympy/printing/pretty/tests/test_pretty.py sympy/vector/tests/test_printing.py
Updated 2 paths from 2cd097319f

