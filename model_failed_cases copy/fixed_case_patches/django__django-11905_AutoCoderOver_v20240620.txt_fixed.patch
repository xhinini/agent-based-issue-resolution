=== Original Patch ===
diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index 14ae00a7de..11d3d02c8b 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -56,9 +56,10 @@ def prepare_lookup_value(key, value):
     # if key ends with __in, split parameter into separate values
     if key.endswith('__in'):
         value = value.split(',')
-    # if key ends with __isnull, special case '' and the string literals 'false' and '0'
+    # if key ends with __isnull, ensure the value is a boolean
     elif key.endswith('__isnull'):
-        value = value.lower() not in ('', 'false', '0')
+        if not isinstance(value, bool):
+            raise ValueError(f"Invalid value for {key}: {value}. Must be a boolean.")
     return value

=== Fixed Patch ===
diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index 14ae00a7de..11d3d02c8b 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -56,9 +56,10 @@ def prepare_lookup_value(key, value):
     # if key ends with __in, split parameter into separate values
     if key.endswith('__in'):
         value = value.split(',')
-    # if key ends with __isnull, special case '' and the string literals 'false' and '0'
+    # if key ends with __isnull, ensure the value is a boolean
     elif key.endswith('__isnull'):
-        value = value.lower() not in ('', 'false', '0')
+        if not isinstance(value, bool):
+raise ValueError(f'Invalid value for {key}: {value}. Must be a boolean.')
     return value

=== Applied Patterns ===

=== Original Error Messages ===
AssertionError: RemovedInDjango40Warning not triggered ====================================================================== FAIL: test_isnull_non_boolean_value (lookup.tests.LookupTests) (qs=<QuerySet []>) ----------------------------------------------------------------------
AssertionError: RemovedInDjango40Warning not triggered ====================================================================== FAIL: test_isnull_non_boolean_value (lookup.tests.LookupTests) (qs=<QuerySet []>) ----------------------------------------------------------------------
AssertionError: RemovedInDjango40Warning not triggered ====================================================================== FAIL: test_isnull_non_boolean_value (lookup.tests.LookupTests) (qs=<QuerySet []>) ----------------------------------------------------------------------
AssertionError: RemovedInDjango40Warning not triggered ---------------------------------------------------------------------- Ran 40 tests in 0.228s FAILED (failures=4) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... Testing against Django installed in '/testbed/django' Importing application lookup Skipping setup of unused database(s): other. Operations to perform: Synchronize unmigrated apps: auth, contenttypes, lookup, messages, sessions, staticfiles Apply all migrations: admin, sites Synchronizing apps without migrations: Creating tables... Creating table django_content_type Creating table auth_permission Creating table auth_group Creating table auth_user Creating table django_session Creating table lookup_alarm Creating table lookup_author Creating table lookup_article Creating table lookup_tag Creating table lookup_season Creating table lookup_game Creating table lookup_player Creating table lookup_product Creating table lookup_stock Creating table lookup_freebie Running deferred SQL... Running migrations: Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying sites.0001_initial... OK Applying sites.0002_alter_domain_unique... OK System check identified no issues (0 silenced). + git checkout 2f72480fbd27896c986c45193e1603e35c0b19a7 tests/lookup/models.py tests/lookup/tests.py Updated 2 paths from 5facf0d517
Prevent using __isnull lookup with non-boolean value.
__isnull should not allow for non-boolean values. Using truthy/falsey doesn't promote INNER JOIN to an OUTER JOIN but works fine for a simple queries. Using non-boolean values is â€‹undocumented and untested. IMO we should raise an error for non-boolean values to avoid confusion and for consistency.

=== Test Verification Results ===
Tests Passed: False
