=== Original Patch ===
diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py
index 23af4d0bb..92fb77af2 100644
--- a/src/_pytest/_io/saferepr.py
+++ b/src/_pytest/_io/saferepr.py
@@ -52,6 +52,13 @@ class SafeRepr(reprlib.Repr):
         return _ellipsize(s, self.maxsize)
 
     def repr_instance(self, x: Any, level: int) -> str:
+        try:
+            s = super().repr_instance(x, level)
+        except (KeyboardInterrupt, SystemExit):
+            raise
+        except BaseException as exc:
+            s = _format_repr_exception(exc, x)
+        return _ellipsize(s, self.maxsize)
         try:
             s = repr(x)
         except (KeyboardInterrupt, SystemExit):
@@ -79,7 +86,10 @@ def saferepr(obj: Any, maxsize: int = 240) -> str:
     care to never raise exceptions itself.  This function is a wrapper
     around the Repr/reprlib functionality of the standard 2.6 lib.
     """
-    return SafeRepr(maxsize).repr(obj)
+    try:
+        return SafeRepr(maxsize).repr(obj)
+    except BaseException as exc:
+        return _format_repr_exception(exc, obj)
 
 
 class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):

=== Fixed Patch ===
diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py
index 23af4d0bb..92fb77af2 100644
--- a/src/_pytest/_io/saferepr.py
+++ b/src/_pytest/_io/saferepr.py
@@ -52,6 +52,13 @@ class SafeRepr(reprlib.Repr):
         return _ellipsize(s, self.maxsize)
 
     def repr_instance(self, x: Any, level: int) -> str:
+        try:
+s = super().repr_instance(x, level)
+        except (KeyboardInterrupt, SystemExit):
+raise
+        except BaseException as exc:
+s = _format_repr_exception(exc, x)
+return _ellipsize(s, self.maxsize)
         try:
             s = repr(x)
         except (KeyboardInterrupt, SystemExit):
@@ -79,7 +86,10 @@ def saferepr(obj: Any, maxsize: int = 240) -> str:
     care to never raise exceptions itself.  This function is a wrapper
     around the Repr/reprlib functionality of the standard 2.6 lib.
     """
-    return SafeRepr(maxsize).repr(obj)
+    try:
+return SafeRepr(maxsize).repr(obj)
+    except BaseException as exc:
+return _format_repr_exception(exc, obj)
 
 
 class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):

=== Applied Patterns ===

=== Original Error Messages ===
INTERNALERROR> RuntimeError: No active exception to reraise ============================ no tests ran in 0.09s ============================ ``` ### GOLD_PATCH diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py --- a/src/_pytest/_io/saferepr.py +++ b/src/_pytest/_io/saferepr.py @@ -20,7 +20,7 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str: except BaseException as exc: exc_info = "unpresentable exception ({})".format(_try_repr_or_str(exc)) return "<[{} raised in repr()] {} object at 0x{:x}>".format( -        exc_info, obj.__class__.__name__, id(obj) +        exc_info, type(obj).__name__, id(obj) ) ### MODEL_OUTPUTS ### Model Generated Patch diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py index 23af4d0bb..92fb77af2 100644 --- a/src/_pytest/_io/saferepr.py +++ b/src/_pytest/_io/saferepr.py @@ -52,6 +52,13 @@ class SafeRepr(reprlib.Repr): return _ellipsize(s, self.maxsize) def repr_instance(self, x: Any, level: int) -> str: +        try: +            s = super().repr_instance(x, level) +        except (KeyboardInterrupt, SystemExit): +            raise +        except BaseException as exc: +            s = _format_repr_exception(exc, x) +        return _ellipsize(s, self.maxsize) try: s = repr(x) except (KeyboardInterrupt, SystemExit): @@ -79,7 +86,10 @@ def saferepr(obj: Any, maxsize: int = 240) -> str: care to never raise exceptions itself.  This function is a wrapper around the Repr/reprlib functionality of the standard 2.6 lib. """ -    return SafeRepr(maxsize).repr(obj) +    try: +        return SafeRepr(maxsize).repr(obj) +    except BaseException as exc: +        return _format_repr_exception(exc, obj) class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter): ### Test Output + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z '' ']' +++ export CONDA_SHLVL=0 +++ CONDA_SHLVL=0 +++ '[' -n '' ']' +++++ dirname /opt/miniconda3/bin/conda ++++ dirname /opt/miniconda3/bin +++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export PATH +++ '[' -z '' ']' +++ PS1= ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1= +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''1'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''1'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=1 +++ CONDA_SHLVL=1 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''2'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_1='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''2'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_1='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=2 ++ CONDA_SHLVL=2 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_1=/opt/miniconda3 ++ CONDA_PREFIX_1=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + cd /testbed + git config --global --add safe.directory /testbed + cd /testbed + git status On branch main Changes not staged for commit: (use "git add <file>..." to update what will be committed) (use "git restore <file>..." to discard changes in working directory) modified:   src/_pytest/_io/saferepr.py no changes added to commit (use "git add" and/or "git commit -a") + git show commit 4787fd64a4ca0dba5528b5651bddd254102fe9f3 Merge: 4b9161700 94400a68b Author: Ran Benita <ran@unusedvar.com> Date:   Tue May 5 23:34:05 2020 +0300 Merge pull request #7167 from bluetech/lint-merge-fix testing: fix lint after merge of old branch diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py index 23af4d0bb..92fb77af2 100644 --- a/src/_pytest/_io/saferepr.py +++ b/src/_pytest/_io/saferepr.py @@ -52,6 +52,13 @@ class SafeRepr(reprlib.Repr): return _ellipsize(s, self.maxsize) def repr_instance(self, x: Any, level: int) -> str: +        try: +            s = super().repr_instance(x, level) +        except (KeyboardInterrupt, SystemExit): +            raise +        except BaseException as exc: +            s = _format_repr_exception(exc, x) +        return _ellipsize(s, self.maxsize) try: s = repr(x) except (KeyboardInterrupt, SystemExit): @@ -79,7 +86,10 @@ def saferepr(obj: Any, maxsize: int = 240) -> str: care to never raise exceptions itself.  This function is a wrapper around the Repr/reprlib functionality of the standard 2.6 lib. """ -    return SafeRepr(maxsize).repr(obj) +    try: +        return SafeRepr(maxsize).repr(obj) +    except BaseException as exc: +        return _format_repr_exception(exc, obj) class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter): + git diff 4787fd64a4ca0dba5528b5651bddd254102fe9f3 + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z x ']' ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1='(testbed) ' +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=3 +++ CONDA_SHLVL=3 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=4 ++ CONDA_SHLVL=4 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_3=/opt/miniconda3 ++ CONDA_PREFIX_3=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + python -m pip install -e . Obtaining file:///testbed Installing build dependencies: started Installing build dependencies: finished with status 'done' Checking if build backend supports build_editable: started Checking if build backend supports build_editable: finished with status 'done' Getting requirements to build editable: started Getting requirements to build editable: finished with status 'done' Preparing editable metadata (pyproject.toml): started Preparing editable metadata (pyproject.toml): finished with status 'done' Requirement already satisfied: py>=1.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev195+g4787fd64a.d20240716) (1.11.0) Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev195+g4787fd64a.d20240716) (23.1) Requirement already satisfied: attrs>=17.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev195+g4787fd64a.d20240716) (23.1.0) Requirement already satisfied: more-itertools>=4.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev195+g4787fd64a.d20240716) (10.1.0) Requirement already satisfied: pluggy<1.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev195+g4787fd64a.d20240716) (0.13.1) Requirement already satisfied: wcwidth in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev195+g4787fd64a.d20240716) (0.2.13) Building wheels for collected packages: pytest Building editable for pytest (pyproject.toml): started Building editable for pytest (pyproject.toml): finished with status 'done' Created wheel for pytest: filename=pytest-5.4.1.dev195+g4787fd64a.d20240716-0.editable-py3-none-any.whl size=8091 sha256=972abd8c9f20ce4c9e62a63831a7413cee877ae71cff3519cfeea563c7737445 Stored in directory: /tmp/pip-ephem-wheel-cache-lwq985up/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4 Successfully built pytest Installing collected packages: pytest Attempting uninstall: pytest Found existing installation: pytest 5.4.1.dev195+g4787fd64a Uninstalling pytest-5.4.1.dev195+g4787fd64a: Successfully uninstalled pytest-5.4.1.dev195+g4787fd64a Successfully installed pytest-5.4.1.dev195+g4787fd64a.d20240716 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv + git checkout 4787fd64a4ca0dba5528b5651bddd254102fe9f3 testing/io/test_saferepr.py Updated 0 paths from d1a70d4ec + git apply -v - Checking patch testing/io/test_saferepr.py... Applied patch testing/io/test_saferepr.py cleanly. + pytest -rA testing/io/test_saferepr.py ============================= test session starts ============================== platform linux -- Python 3.9.19, pytest-5.4.1.dev195+g4787fd64a.d20240716, py-1.11.0, pluggy-0.13.1 rootdir: /testbed, inifile: tox.ini collected 11 items testing/io/test_saferepr.py ...FF..... INTERNALERROR>
INTERNALERROR when exception in __repr__
def __getattribute__(self, attr):
INTERNALERROR> Traceback (most recent call last):
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/main.py", line 191, in wrap_session
INTERNALERROR>     session.exitstatus = doit(config, session) or 0
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/main.py", line 247, in _main
INTERNALERROR>     config.hook.pytest_runtestloop(session=session)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/hooks.py", line 286, in __call__
INTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/manager.py", line 93, in _hookexec
INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/manager.py", line 84, in <lambda>
INTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 208, in _multicall
INTERNALERROR>     return outcome.get_result()
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 80, in get_result
INTERNALERROR>     raise ex[1].with_traceback(ex[2])
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 187, in _multicall
INTERNALERROR>     res = hook_impl.function(*args)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/main.py", line 272, in pytest_runtestloop
INTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/hooks.py", line 286, in __call__
INTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/manager.py", line 93, in _hookexec
INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/manager.py", line 84, in <lambda>
INTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 208, in _multicall
INTERNALERROR>     return outcome.get_result()
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 80, in get_result
INTERNALERROR>     raise ex[1].with_traceback(ex[2])
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 187, in _multicall
INTERNALERROR>     res = hook_impl.function(*args)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/runner.py", line 85, in pytest_runtest_protocol
INTERNALERROR>     runtestprotocol(item, nextitem=nextitem)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/runner.py", line 100, in runtestprotocol
INTERNALERROR>     reports.append(call_and_report(item, "call", log))
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/runner.py", line 188, in call_and_report
INTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/hooks.py", line 286, in __call__
INTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/manager.py", line 93, in _hookexec
INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/manager.py", line 84, in <lambda>
INTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 203, in _multicall
INTERNALERROR>     gen.send(outcome)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/skipping.py", line 129, in pytest_runtest_makereport
INTERNALERROR>     rep = outcome.get_result()
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 80, in get_result
INTERNALERROR>     raise ex[1].with_traceback(ex[2])
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/pluggy/callers.py", line 187, in _multicall
INTERNALERROR>     res = hook_impl.function(*args)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/runner.py", line 260, in pytest_runtest_makereport
INTERNALERROR>     return TestReport.from_item_and_call(item, call)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/reports.py", line 294, in from_item_and_call
INTERNALERROR>     longrepr = item.repr_failure(excinfo)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/python.py", line 1513, in repr_failure
INTERNALERROR>     return self._repr_failure_py(excinfo, style=style)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/nodes.py", line 355, in _repr_failure_py
INTERNALERROR>     return excinfo.getrepr(
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py", line 634, in getrepr
INTERNALERROR>     return fmt.repr_excinfo(self)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py", line 879, in repr_excinfo
INTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py", line 823, in repr_traceback
INTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py", line 784, in repr_traceback_entry
INTERNALERROR>     reprargs = self.repr_args(entry) if not short else None
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py", line 693, in repr_args
INTERNALERROR>     args.append((argname, saferepr(argvalue)))
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 82, in saferepr
INTERNALERROR>     return SafeRepr(maxsize).repr(obj)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 51, in repr
INTERNALERROR>     s = _format_repr_exception(exc, x)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 23, in _format_repr_exception
INTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 47, in repr
INTERNALERROR>     s = super().repr(x)
INTERNALERROR>   File "/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py", line 52, in repr
INTERNALERROR>     return self.repr1(x, self.maxlevel)
INTERNALERROR>   File "/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py", line 62, in repr1
INTERNALERROR>     return self.repr_instance(x, level)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 60, in repr_instance
INTERNALERROR>     s = _format_repr_exception(exc, x)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 23, in _format_repr_exception
INTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)
INTERNALERROR>   File "/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py", line 56, in repr_instance
INTERNALERROR>     s = repr(x)
INTERNALERROR>   File "/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py", line 6, in __repr__
INTERNALERROR>     raise
INTERNALERROR> RuntimeError: No active exception to reraise

=== Test Verification Results ===
Tests Passed: False
