=== Original Patch ===
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..788ecbcb7c 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,7 +31,14 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        if isinstance(func, functools.partial):
+            self.func = func.func
+            self.partial_args = func.args
+            self.partial_kwargs = func.keywords
+        else:
+            self.func = func
+            self.partial_args = ()
+            self.partial_kwargs = {}
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
@@ -59,10 +66,16 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+        repr_str = "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s" % (
             self._func_path, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
+        if self.partial_args:
+            repr_str += ", partial_args=%s" % (self.partial_args,)
+        if self.partial_kwargs:
+            repr_str += ", partial_kwargs=%s" % (self.partial_kwargs,)
+        repr_str += ")"
+        return repr_str
 
 
 def get_resolver(urlconf=None):

=== Fixed Patch ===
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..788ecbcb7c 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,7 +31,14 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        if isinstance(func, functools.partial):
+self.func = func.func
+self.partial_args = func.args
+self.partial_kwargs = func.keywords
+        else:
+self.func = func
+self.partial_args = ()
+self.partial_kwargs = {}
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
@@ -59,10 +66,16 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+        repr_str = "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s" % (
             self._func_path, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
+        if self.partial_args:
+repr_str += ', partial_args=%s' % (self.partial_args,)
+        if self.partial_kwargs:
+repr_str += ', partial_kwargs=%s' % (self.partial_kwargs,)
+repr_str += ')'
+return repr_str
 
 
 def get_resolver(urlconf=None):

=== Applied Patterns ===

=== Original Error Messages ===
AssertionError: "Reso[87 chars]name=no-kwargs, app_names=[], namespaces=[], r[32 chars])/$)" != "Reso[87 chars]name='no-kwargs', app_names=[], namespaces=[],[36 chars]/$')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$) + ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=('42', '37'), kwargs={}, url_name='no-kwargs', app_names=[], namespaces=[], route='^no_kwargs/([0-9]+)/([0-9]+)/$') ?                                                                                                 +         +                                     +                              + ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[95 chars]al/)' != "ResolverMatch(func=functools.partial(<fu[152 chars]l/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, url_name=partial, app_names=[], namespaces=[], route=partial/) + ResolverMatch(func=functools.partial(<function empty_view at 0x77e1be2b7550>, template_name='template.html'), args=(), kwargs={}, url_name='partial', app_names=[], namespaces=[], route='partial/') ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial_nested') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[109 chars]ed/)' != "ResolverMatch(func=functools.partial(<fu[172 chars]d/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, url_name=partial_nested, app_names=[], namespaces=[], route=partial_nested/) + ResolverMatch(func=functools.partial(<function empty_view at 0x77e1be2b7550>, template_name='nested_partial.html'), args=(), kwargs={}, url_name='partial_nested', app_names=[], namespaces=[], route='partial_nested/') ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial_wrapped') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[111 chars]ed/)' != "ResolverMatch(func=functools.partial(<fu[168 chars]d/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, url_name=partial_wrapped, app_names=[], namespaces=[], route=partial_wrapped/) + ResolverMatch(func=functools.partial(<function empty_view at 0x77e1be2b7550>, template_name='template.html'), args=(), kwargs={}, url_name='partial_wrapped', app_names=[], namespaces=[], route='partial_wrapped/') ---------------------------------------------------------------------- Ran 95 tests in 0.820s FAILED (failures=4) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... + git checkout 2f13c476abe4ba787b6cb71131818341911f43cc tests/urlpatterns_reverse/tests.py Updated 1 path from 444e1f2af1

=== Test Verification Results ===
Tests Passed: False
