=== Original Patch ===
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 9ce46e3f73..0432f05b7c 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -162,6 +162,12 @@ class Field(RegisterLookupMixin):
         self._db_tablespace = db_tablespace
         self.auto_created = auto_created
 
+        # Check if max_length is sufficient for the longest choice
+        if self.choices and self.max_length is not None:
+            longest_choice = max((len(str(choice)) for choice, _ in self.choices), default=0)
+            if longest_choice > self.max_length:
+                raise ValueError(f"max_length {self.max_length} is too short to accommodate the longest choice ({longest_choice} characters).")
+
         # Adjust the appropriate creation counter, and save our local copy.
         if auto_created:
             self.creation_counter = Field.auto_creation_counter
@@ -280,6 +286,16 @@ class Field(RegisterLookupMixin):
             if isinstance(choices_group, str):
                 break
         else:
+            if self.max_length is not None:
+                longest_choice = max((len(str(choice)) for choice, _ in self.choices), default=0)
+                if longest_choice > self.max_length:
+                    return [
+                        checks.Error(
+                            f"max_length {self.max_length} is too short to accommodate the longest choice ({longest_choice} characters).",
+                            obj=self,
+                            id='fields.E006',
+                        )
+                    ]
             return []
 
         return [

=== Fixed Patch ===
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 9ce46e3f73..0432f05b7c 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -162,6 +162,12 @@ class Field(RegisterLookupMixin):
         self._db_tablespace = db_tablespace
         self.auto_created = auto_created
 
+        # Check if max_length is sufficient for the longest choice
+        if self.choices and self.max_length is not None:
+longest_choice = max((len(str(choice)) for choice, _ in self.choices), default=0)
+            if longest_choice > self.max_length:
+raise ValueError(f'max_length {self.max_length} is too short to accommodate the longest choice ({longest_choice} characters).')
+
         # Adjust the appropriate creation counter, and save our local copy.
         if auto_created:
             self.creation_counter = Field.auto_creation_counter
@@ -280,6 +286,16 @@ class Field(RegisterLookupMixin):
             if isinstance(choices_group, str):
                 break
         else:
+            if self.max_length is not None:
+longest_choice = max((len(str(choice)) for choice, _ in self.choices), default=0)
+                if longest_choice > self.max_length:
+                    return [
+                        checks.Error(
+(f'max_length {self.max_length} is too short to accommodate the longest choice ({longest_choice} characters).',)
+obj = (self,)
+id = ('fields.E006',)
+                        )
+                    ]
             return []
 
         return [

=== Applied Patterns ===

=== Original Error Messages ===
ValueError: too many values to unpack (expected 2) ====================================================================== ERROR: test_choices_in_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests) ----------------------------------------------------------------------
ValueError: max_length 2 is too short to accommodate the longest choice (3 characters). ====================================================================== ERROR: test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests) ----------------------------------------------------------------------
ValueError: not enough values to unpack (expected 2, got 1) ---------------------------------------------------------------------- Ran 47 tests in 0.039s FAILED (errors=3, skipped=2) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... + git checkout fee75d2aed4e58ada6567c464cfd22e89dc65f4a tests/invalid_models_tests/test_ordinary_fields.py Updated 1 path from 9044ec218d

=== Test Verification Results ===
Tests Passed: False
