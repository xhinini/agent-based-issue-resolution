=== Original Patch ===
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index df7452ee87..c62992300e 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1949,12 +1949,16 @@ def _print_nth_root(self, base, expt):
 
     def _print_Pow(self, power):
         from sympy.simplify.simplify import fraction
+        from sympy import pi, E
         b, e = power.as_base_exp()
         if power.is_commutative:
             if e is S.NegativeOne:
                 return prettyForm("1")/self._print(b)
             n, d = fraction(e)
             if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:
+                # General case for base**(1/exponent)
+                if d == S.Exp1:
+                    return self._print(b)**prettyForm("1")/self._print(d)
                 return self._print_nth_root(b, e)
             if e.is_Rational and e < 0:
                 return prettyForm("1")/self._print(Pow(b, -e, evaluate=False))
@@ -1962,6 +1966,10 @@ def _print_Pow(self, power):
         if b.is_Relational:
             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))
 
+        # General case for base**(1/exponent)
+        if e == 1/S.Exp1:
+            return self._print(b)**prettyForm("1")/self._print(S.Exp1)
+
         return self._print(b)**self._print(e)
 
     def _print_UnevaluatedExpr(self, expr):

=== Fixed Patch ===
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index df7452ee87..c62992300e 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1949,12 +1949,16 @@ def _print_nth_root(self, base, expt):
 
     def _print_Pow(self, power):
         from sympy.simplify.simplify import fraction
+from sympy import pi, E
         b, e = power.as_base_exp()
         if power.is_commutative:
             if e is S.NegativeOne:
                 return prettyForm("1")/self._print(b)
             n, d = fraction(e)
             if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:
+                # General case for base**(1/exponent)
+                if d == S.Exp1:
+return self._print(b) ** prettyForm('1') / self._print(d)
                 return self._print_nth_root(b, e)
             if e.is_Rational and e < 0:
                 return prettyForm("1")/self._print(Pow(b, -e, evaluate=False))
@@ -1962,6 +1966,10 @@ def _print_Pow(self, power):
         if b.is_Relational:
             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))
 
+        # General case for base**(1/exponent)
+        if e == 1/S.Exp1:
+return self._print(b) ** prettyForm('1') / self._print(S.Exp1)
+
         return self._print(b)**self._print(e)
 
     def _print_UnevaluatedExpr(self, expr):

=== Applied Patterns ===

=== Original Error Messages ===


=== Test Verification Results ===
Tests Passed: False
