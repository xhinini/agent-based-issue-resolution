=== Original Patch ===
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 43e675a..c4d8db9 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning
 from django.core.checks.urls import check_resolver
 from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
 from django.utils.datastructures import MultiValueDict
+import functools
 from django.utils.functional import cached_property
 from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
 from django.utils.regex_helper import _lazy_re_compile, normalize
@@ -31,7 +32,14 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        if isinstance(func, functools.partial):
+            self.func = func.func
+            self.partial_args = func.args
+            self.partial_kwargs = func.keywords
+        else:
+            self.func = func
+            self.partial_args = ()
+            self.partial_kwargs = {}
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
@@ -59,8 +67,8 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+        return "ResolverMatch(func=%s, args=%s, kwargs=%s, partial_args=%s, partial_kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+            self._func_path, self.args, self.kwargs, self.partial_args, self.partial_kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )

=== Fixed Patch ===
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 43e675a..c4d8db9 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning
 from django.core.checks.urls import check_resolver
 from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
 from django.utils.datastructures import MultiValueDict
+import functools
 from django.utils.functional import cached_property
 from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
 from django.utils.regex_helper import _lazy_re_compile, normalize
@@ -31,7 +32,14 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        if isinstance(func, functools.partial):
+self.func = func.func
+self.partial_args = func.args
+self.partial_kwargs = func.keywords
+        else:
+self.func = func
+self.partial_args = ()
+self.partial_kwargs = {}
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
@@ -59,8 +67,8 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
-        return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+        return "ResolverMatch(func=%s, args=%s, kwargs=%s, partial_args=%s, partial_kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
+(self._func_path, self.args, self.kwargs, self.partial_args, self.partial_kwargs, self.url_name)
             self.app_names, self.namespaces, self.route,
         )

=== Applied Patterns ===

=== Original Error Messages ===
AssertionError: "Reso[78 chars]={}, partial_args=(), partial_kwargs={}, url_n[77 chars])/$)" != "Reso[78 chars]={}, url_name='no-kwargs', app_names=[], names[45 chars]/$')" Diff is 698 characters long. Set self.maxDiff to None to see it. ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[131 chars]al/)' != "ResolverMatch(func=functools.partial(<fu[152 chars]l/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, partial_args=(), partial_kwargs={}, url_name=partial, app_names=[], namespaces=[], route=partial/) + ResolverMatch(func=functools.partial(<function empty_view at 0x7ccbfbbc34c0>, template_name='template.html'), args=(), kwargs={}, url_name='partial', app_names=[], namespaces=[], route='partial/') ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial_nested') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[145 chars]ed/)' != "ResolverMatch(func=functools.partial(<fu[172 chars]d/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, partial_args=(), partial_kwargs={}, url_name=partial_nested, app_names=[], namespaces=[], route=partial_nested/) + ResolverMatch(func=functools.partial(<function empty_view at 0x7ccbfbbc34c0>, template_name='nested_partial.html'), args=(), kwargs={}, url_name='partial_nested', app_names=[], namespaces=[], route='partial_nested/') ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial_wrapped') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[147 chars]ed/)' != "ResolverMatch(func=functools.partial(<fu[168 chars]d/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, partial_args=(), partial_kwargs={}, url_name=partial_wrapped, app_names=[], namespaces=[], route=partial_wrapped/) + ResolverMatch(func=functools.partial(<function empty_view at 0x7ccbfbbc34c0>, template_name='template.html'), args=(), kwargs={}, url_name='partial_wrapped', app_names=[], namespaces=[], route='partial_wrapped/') ---------------------------------------------------------------------- Ran 95 tests in 0.702s FAILED (failures=4) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... + git checkout 2f13c476abe4ba787b6cb71131818341911f43cc tests/urlpatterns_reverse/tests.py Updated 1 path from 444e1f2af1

=== Test Verification Results ===
Tests Passed: False
