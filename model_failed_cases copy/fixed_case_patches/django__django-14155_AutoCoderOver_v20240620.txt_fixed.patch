=== Original Patch ===
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..e1700aa5af 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -30,7 +30,15 @@ from .utils import get_callable
 
 
 class ResolverMatch:
+    import functools
+
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
+        if isinstance(func, functools.partial):
+            self.original_func = func
+            func = func.func
+        else:
+            self.original_func = None
+
         self.func = func
         self.args = args
         self.kwargs = kwargs
@@ -59,8 +67,15 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
+        if self.original_func:
+            func_repr = "functools.partial(%s, *%s, **%s)" % (
+                self._func_path, self.original_func.args, self.original_func.keywords
+            )
+        else:
+            func_repr = self._func_path
+
         return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+            func_repr, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )

=== Fixed Patch ===
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..e1700aa5af 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -30,7 +30,15 @@ from .utils import get_callable
 
 
 class ResolverMatch:
+import functools
+
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
+        if isinstance(func, functools.partial):
+self.original_func = func
+func = func.func
+        else:
+self.original_func = None
+
         self.func = func
         self.args = args
         self.kwargs = kwargs
@@ -59,8 +67,15 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
+        if self.original_func:
+            func_repr = "functools.partial(%s, *%s, **%s)" % (
+(self._func_path, self.original_func.args, self.original_func.keywords)
+            )
+        else:
+func_repr = self._func_path
+
         return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+(func_repr, self.args, self.kwargs, self.url_name)
             self.app_names, self.namespaces, self.route,
         )

=== Applied Patterns ===

=== Original Error Messages ===
AssertionError: "Reso[87 chars]name=no-kwargs, app_names=[], namespaces=[], r[32 chars])/$)" != "Reso[87 chars]name='no-kwargs', app_names=[], namespaces=[],[36 chars]/$')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$) + ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=('42', '37'), kwargs={}, url_name='no-kwargs', app_names=[], namespaces=[], route='^no_kwargs/([0-9]+)/([0-9]+)/$') ?                                                                                                 +         +                                     +                              + ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[95 chars]al/)' != "ResolverMatch(func=functools.partial(<fu[152 chars]l/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, url_name=partial, app_names=[], namespaces=[], route=partial/) + ResolverMatch(func=functools.partial(<function empty_view at 0x7128f15f5550>, template_name='template.html'), args=(), kwargs={}, url_name='partial', app_names=[], namespaces=[], route='partial/') ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial_nested') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[109 chars]ed/)' != "ResolverMatch(func=functools.partial(<fu[172 chars]d/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, url_name=partial_nested, app_names=[], namespaces=[], route=partial_nested/) + ResolverMatch(func=functools.partial(<function empty_view at 0x7128f15f5550>, template_name='nested_partial.html'), args=(), kwargs={}, url_name='partial_nested', app_names=[], namespaces=[], route='partial_nested/') ====================================================================== FAIL: test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests) (name='partial_wrapped') ----------------------------------------------------------------------
AssertionError: 'ResolverMatch(func=urlpatterns_reverse.v[111 chars]ed/)' != "ResolverMatch(func=functools.partial(<fu[168 chars]d/')" - ResolverMatch(func=urlpatterns_reverse.views.empty_view, args=(), kwargs={}, url_name=partial_wrapped, app_names=[], namespaces=[], route=partial_wrapped/) + ResolverMatch(func=functools.partial(<function empty_view at 0x7128f15f5550>, template_name='template.html'), args=(), kwargs={}, url_name='partial_wrapped', app_names=[], namespaces=[], route='partial_wrapped/') ---------------------------------------------------------------------- Ran 95 tests in 0.550s FAILED (failures=4) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... + git checkout 2f13c476abe4ba787b6cb71131818341911f43cc tests/urlpatterns_reverse/tests.py Updated 1 path from 444e1f2af1

=== Test Verification Results ===
Tests Passed: False
