=== Original Patch ===
diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py
index 7ea14ce33a..9cbeca332f 100644
--- a/sympy/parsing/mathematica.py
+++ b/sympy/parsing/mathematica.py
@@ -586,7 +586,7 @@ def parse(self, s):
         "##": lambda: ["SlotSequence", "1"],
     }
 
-    _literal = r"[A-Za-z][A-Za-z0-9]*"
+    _literal = r"[A-Za-z\u0370-\u03FF\u1F00-\u1FFF][A-Za-z\u0370-\u03FF\u1F00-\u1FFF0-9]*"
     _number = r"(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)"
 
     _enclosure_open = ["(", "[", "[[", "{"]

=== Fixed Patch ===
diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py
index 7ea14ce33a..9cbeca332f 100644
--- a/sympy/parsing/mathematica.py
+++ b/sympy/parsing/mathematica.py
@@ -586,7 +586,7 @@ def parse(self, s):
         "##": lambda: ["SlotSequence", "1"],
     }
 
-    _literal = r"[A-Za-z][A-Za-z0-9]*"
+_literal = '[A-Za-z\\u0370-\\u03FF\\u1F00-\\u1FFF][A-Za-z\\u0370-\\u03FF\\u1F00-\\u1FFF0-9]*'
     _number = r"(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)"
 
     _enclosure_open = ["(", "[", "[[", "{"]

=== Applied Patterns ===

=== Original Error Messages ===
SyntaxError: unable to create a single AST for the expression ``` This appears to be due to a bug in `parse_mathematica`, which is why I have opened this issue. Thanks in advance! Cannot parse Greek characters (and possibly others) in parse_mathematica The old Mathematica parser `mathematica` in the package `sympy.parsing.mathematica` was able to parse e.g. Greek characters. Hence the following example works fine: ``` from sympy.parsing.mathematica import mathematica mathematica('λ') Out[]: λ ``` As of SymPy v. 1.11, the `mathematica` function is deprecated, and is replaced by `parse_mathematica`. This function, however, seems unable to handle the simple example above: ``` from sympy.parsing.mathematica import parse_mathematica parse_mathematica('λ')
SyntaxError: unable to create a single AST for the expression ``` This appears to be due to a bug in `parse_mathematica`, which is why I have opened this issue. Thanks in advance! ### GOLD_PATCH diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py --- a/sympy/parsing/mathematica.py +++ b/sympy/parsing/mathematica.py @@ -654,7 +654,7 @@ def _from_mathematica_to_tokens(self, code: str): code_splits[i] = code_split # Tokenize the input strings with a regular expression: -        token_lists = [tokenizer.findall(i) if isinstance(i, str) else [i] for i in code_splits] +        token_lists = [tokenizer.findall(i) if isinstance(i, str) and i.isascii() else [i] for i in code_splits] tokens = [j for i in token_lists for j in i] # Remove newlines at the beginning ### MODEL_OUTPUTS ### Model Generated Patch diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py index 7ea14ce33a..9cbeca332f 100644 --- a/sympy/parsing/mathematica.py +++ b/sympy/parsing/mathematica.py @@ -586,7 +586,7 @@ def parse(self, s): "##": lambda: ["SlotSequence", "1"], } -    _literal = r"[A-Za-z][A-Za-z0-9]*" +    _literal = r"[A-Za-z\u0370-\u03FF\u1F00-\u1FFF][A-Za-z\u0370-\u03FF\u1F00-\u1FFF0-9]*" _number = r"(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)" _enclosure_open = ["(", "[", "[[", "{"] ### Test Output + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z '' ']' +++ export CONDA_SHLVL=0 +++ CONDA_SHLVL=0 +++ '[' -n '' ']' +++++ dirname /opt/miniconda3/bin/conda ++++ dirname /opt/miniconda3/bin +++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export PATH +++ '[' -z '' ']' +++ PS1= ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1= +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''1'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''1'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=1 +++ CONDA_SHLVL=1 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''2'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_1='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''2'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_1='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=2 ++ CONDA_SHLVL=2 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_1=/opt/miniconda3 ++ CONDA_PREFIX_1=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + cd /testbed + git config --global --add safe.directory /testbed + cd /testbed + git status On branch master Changes not staged for commit: (use "git add <file>..." to update what will be committed) (use "git restore <file>..." to discard changes in working directory) modified:   sympy/parsing/mathematica.py no changes added to commit (use "git add" and/or "git commit -a") + git show commit 58598660a3f6ab3d918781c4988c2e4b2bdd9297 Merge: b0a5f9c02c e694fc9fc5 Author: Aaron Meurer <asmeurer@gmail.com> Date:   Fri Sep 30 17:29:53 2022 -0600 Merge pull request #23802 from bertiewooster/system-of-equations-algebraically Documentation guide: Solve a system of equations algebraically + git diff 58598660a3f6ab3d918781c4988c2e4b2bdd9297 diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py index 7ea14ce33a..9cbeca332f 100644 --- a/sympy/parsing/mathematica.py +++ b/sympy/parsing/mathematica.py @@ -586,7 +586,7 @@ def parse(self, s): "##": lambda: ["SlotSequence", "1"], } -    _literal = r"[A-Za-z][A-Za-z0-9]*" +    _literal = r"[A-Za-z\u0370-\u03FF\u1F00-\u1FFF][A-Za-z\u0370-\u03FF\u1F00-\u1FFF0-9]*" _number = r"(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)" _enclosure_open = ["(", "[", "[[", "{"] + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z x ']' ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1='(testbed) ' +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=3 +++ CONDA_SHLVL=3 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=4 ++ CONDA_SHLVL=4 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_3=/opt/miniconda3 ++ CONDA_PREFIX_3=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + python -m pip install -e . Obtaining file:///testbed Preparing metadata (setup.py): started Preparing metadata (setup.py): finished with status 'done' Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.12.dev0) (1.3.0) Installing collected packages: sympy Attempting uninstall: sympy Found existing installation: sympy 1.12.dev0 Uninstalling sympy-1.12.dev0: Successfully uninstalled sympy-1.12.dev0 Running setup.py develop for sympy Successfully installed sympy-1.12.dev0 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv + git checkout 58598660a3f6ab3d918781c4988c2e4b2bdd9297 sympy/parsing/tests/test_mathematica.py sympy/testing/quality_unicode.py Updated 0 paths from 018bf13b9b + git apply -v - Checking patch sympy/parsing/tests/test_mathematica.py... Checking patch sympy/testing/quality_unicode.py... Applied patch sympy/parsing/tests/test_mathematica.py cleanly. Applied patch sympy/testing/quality_unicode.py cleanly. + PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning + bin/test -C --verbose sympy/parsing/tests/test_mathematica.py sympy/testing/quality_unicode.py ============================= test process starts ============================== executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython] architecture:       64-bit cache:              no ground types:       python numpy:              None random seed:        44371543 hash randomization: on (PYTHONHASHSEED=1700632045) sympy/parsing/tests/test_mathematica.py[3] test_mathematica F test_parser_mathematica_tokenizer ok test_parser_mathematica_exp_alt ok                                        [FAIL] ________________________________________________________________________________ ___________ sympy/parsing/tests/test_mathematica.py:test_mathematica ___________
SyntaxError: unable to create a single AST for the expression
SyntaxError: unable to create a single AST for the expression

=== Test Verification Results ===
Tests Passed: False
