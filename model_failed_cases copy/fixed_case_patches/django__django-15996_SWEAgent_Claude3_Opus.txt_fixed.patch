=== Original Patch ===
diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 38da1e6ecc..ef6103660e 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -125,10 +125,18 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        return (
-            "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
-            {"import %s" % module},
-        )
+        try:
+            members, _ = enum._decompose(enum_class, self.value)
+            member_names = [m.name for m in members]
+            return (
+                "%s.%s[%s]" % (module, enum_class.__qualname__, " | ".join(member_names)),
+                {"import %s" % module, "import enum"},
+            )
+        except ValueError:
+            return (
+                "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
+                {"import %s" % module},
+            )
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..893db8eafe
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/myapp/models.py b/myapp/models.py
new file mode 100644
index 0000000000..d58e5c6c9d
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,5 @@
+from django.db import models
+from reproduce import RegexFlag
+
+class MyModel(models.Model):
+    regex_flags = models.IntegerField(default=RegexFlag.UNICODE | RegexFlag.IGNORECASE)
diff --git a/myapp/reproduce.py b/myapp/reproduce.py
new file mode 100644
index 0000000000..4545470b18
--- /dev/null
+++ b/myapp/reproduce.py
@@ -0,0 +1,9 @@
+import re
+from enum import Enum, auto
+
+class RegexFlag(Enum):
+    UNICODE = auto()
+    IGNORECASE = auto()
+
+regex_flags = RegexFlag.UNICODE.value | RegexFlag.IGNORECASE.value
+print(regex_flags)
diff --git a/myproject/__init__.py b/myproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myproject/asgi.py b/myproject/asgi.py
new file mode 100644
index 0000000000..ab191894ae
--- /dev/null
+++ b/myproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_asgi_application()
diff --git a/myproject/settings.py b/myproject/settings.py
new file mode 100644
index 0000000000..a9eaa104f7
--- /dev/null
+++ b/myproject/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for myproject project.
+
+Generated by 'django-admin startproject' using Django 4.2.dev20220824103047.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-p(^eb=0v5#y+_jy^uembi48m0-i919)e-l%38(-3cix=byab-3"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "myproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "myproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/myproject/urls.py b/myproject/urls.py
new file mode 100644
index 0000000000..c4cc862373
--- /dev/null
+++ b/myproject/urls.py
@@ -0,0 +1,22 @@
+"""myproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/myproject/wsgi.py b/myproject/wsgi.py
new file mode 100644
index 0000000000..1de9e2cef2
--- /dev/null
+++ b/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
+
+application = get_wsgi_application()

=== Fixed Patch ===
diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 38da1e6ecc..ef6103660e 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -125,10 +125,18 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        return (
-            "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
-            {"import %s" % module},
-        )
+        try:
+members, _ = enum._decompose(enum_class, self.value)
+member_names = [m.name for m in members]
+            return (
+('%s.%s[%s]' % (module, enum_class.__qualname__, ' | '.join(member_names)),)
+({'import %s' % module, 'import enum'},)
+            )
+        except ValueError:
+            return (
+('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name),)
+({'import %s' % module},)
+            )
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/manage.py b/manage.py
index 0000000000..893db8eafe
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"Django's command-line utility for administrative tasks."
+import os
+import sys
+
+
+def main():
+'Run administrative tasks.'
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+    try:
+from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+"Couldn't import Django. Are you sure it's installed and "
+'available on your PYTHONPATH environment variable? Did you '
+'forget to activate a virtual environment?'
+        ) from exc
+execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+main()
diff --git a/myapp/models.py b/myapp/models.py
index 0000000000..d58e5c6c9d
--- /dev/null
+++ b/myapp/models.py
@@ -0,0 +1,5 @@
+from django.db import models
+from reproduce import RegexFlag
+
+class MyModel(models.Model):
+regex_flags = models.IntegerField(default=RegexFlag.UNICODE | RegexFlag.IGNORECASE)
diff --git a/myapp/reproduce.py b/myapp/reproduce.py
index 0000000000..4545470b18
--- /dev/null
+++ b/myapp/reproduce.py
@@ -0,0 +1,9 @@
+import re
+from enum import Enum, auto
+
+class RegexFlag(Enum):
+UNICODE = auto()
+IGNORECASE = auto()
+
+regex_flags = RegexFlag.UNICODE.value | RegexFlag.IGNORECASE.value
+print(regex_flags)
diff --git a/myproject/__init__.py b/myproject/__init__.py
index 0000000000..e69de29bb2
diff --git a/myproject/asgi.py b/myproject/asgi.py
index 0000000000..ab191894ae
--- /dev/null
+++ b/myproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = get_asgi_application()
diff --git a/myproject/settings.py b/myproject/settings.py
index 0000000000..a9eaa104f7
--- /dev/null
+++ b/myproject/settings.py
@@ -0,0 +1,123 @@
+"""
+Django settings for myproject project.
+
+Generated by 'django-admin startproject' using Django 4.2.dev20220824103047.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-p(^eb=0v5#y+_jy^uembi48m0-i919)e-l%38(-3cix=byab-3'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+('django.contrib.admin',)
+('django.contrib.auth',)
+('django.contrib.contenttypes',)
+('django.contrib.sessions',)
+('django.contrib.messages',)
+('django.contrib.staticfiles',)
+]
+
+MIDDLEWARE = [
+('django.middleware.security.SecurityMiddleware',)
+('django.contrib.sessions.middleware.SessionMiddleware',)
+('django.middleware.common.CommonMiddleware',)
+('django.middleware.csrf.CsrfViewMiddleware',)
+('django.contrib.auth.middleware.AuthenticationMiddleware',)
+('django.contrib.messages.middleware.MessageMiddleware',)
+('django.middleware.clickjacking.XFrameOptionsMiddleware',)
+]
+
+ROOT_URLCONF = 'myproject.urls'
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+('django.template.context_processors.debug',)
+('django.template.context_processors.request',)
+('django.contrib.auth.context_processors.auth',)
+('django.contrib.messages.context_processors.messages',)
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'myproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/myproject/urls.py b/myproject/urls.py
index 0000000000..c4cc862373
--- /dev/null
+++ b/myproject/urls.py
@@ -0,0 +1,22 @@
+"""myproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+(path('admin/', admin.site.urls),)
+]
diff --git a/myproject/wsgi.py b/myproject/wsgi.py
index 0000000000..1de9e2cef2
--- /dev/null
+++ b/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = get_wsgi_application()

=== Applied Patterns ===

=== Original Error Messages ===
TypeError: '<' not supported between instances of 'TextEnum' and 'int' ====================================================================== FAIL: test_serialize_class_based_validators (migrations.test_writer.WriterTests) Ticket #22943: Test serialization of class-based validators, including ----------------------------------------------------------------------
AssertionError: "djan[13 chars]ators.RegexValidator('^[0-9]+$', flags=re.RegexFlag[DOTALL])" != "djan[13 chars]ators.RegexValidator('^[0-9]+$', flags=re.RegexFlag['DOTALL'])" - django.core.validators.RegexValidator('^[0-9]+$', flags=re.RegexFlag[DOTALL]) + django.core.validators.RegexValidator('^[0-9]+$', flags=re.RegexFlag['DOTALL']) ?                                                                      +      + ====================================================================== FAIL: test_serialize_enum_flags (migrations.test_writer.WriterTests) ----------------------------------------------------------------------
AssertionError: Tuples differ: ('migrations.test_writer.IntFlagEnum[A]', [44 chars]um'}) != ("migrations.test_writer.IntFlagEnum['A']"[31 chars]er'}) First differing element 0: 'migrations.test_writer.IntFlagEnum[A]' "migrations.test_writer.IntFlagEnum['A']" + ("migrations.test_writer.IntFlagEnum['A']", {'import migrations.test_writer'}) - ('migrations.test_writer.IntFlagEnum[A]', -  {'import migrations.test_writer', 'import enum'}) ---------------------------------------------------------------------- Ran 52 tests in 0.045s FAILED (failures=2, errors=1) Testing against Django installed in '/testbed/django' Importing application migrations Found 52 test(s). Skipping setup of unused database(s): default, other. System check identified no issues (0 silenced). + git checkout b30c0081d4d8a31ab7dc7f72a4c7099af606ef29 tests/migrations/test_writer.py Updated 1 path from 17623c1b07
default=re.RegexFlag[None]

=== Test Verification Results ===
Tests Passed: False
