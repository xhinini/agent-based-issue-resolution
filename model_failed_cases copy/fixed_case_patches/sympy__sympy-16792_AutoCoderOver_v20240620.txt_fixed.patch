=== Original Patch ===
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..c7cce5e204 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -445,7 +445,7 @@ def _prototype_arg(self, arg):
             self._need_numpy = True
             ndim = len(arg.dimensions)
             mtype = np_types[t]
-            return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
+            return "double * {name}".format(name=self._string_var(arg.name))
         else:
             return "%s %s" % (t, self._string_var(arg.name))
 
@@ -453,7 +453,7 @@ def _declare_arg(self, arg):
         proto = self._prototype_arg(arg)
         if arg.dimensions:
             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'
-            return proto + " = np.empty({shape})".format(shape=shape)
+            return proto + " = np.empty{shape}".format(shape=shape)
         else:
             return proto + " = 0"

=== Fixed Patch ===
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..c7cce5e204 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -445,7 +445,7 @@ def _prototype_arg(self, arg):
             self._need_numpy = True
             ndim = len(arg.dimensions)
             mtype = np_types[t]
-            return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
+return 'double * {name}'.format(name=self._string_var(arg.name))
         else:
             return "%s %s" % (t, self._string_var(arg.name))
 
@@ -453,7 +453,7 @@ def _declare_arg(self, arg):
         proto = self._prototype_arg(arg)
         if arg.dimensions:
             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'
-            return proto + " = np.empty({shape})".format(shape=shape)
+return proto + ' = np.empty{shape}'.format(shape=shape)
         else:
             return proto + " = 0"

=== Applied Patterns ===

=== Original Error Messages ===
autowrap with cython backend fails when array arguments do not appear in wrapped expr
This should of course return `1.0` but instead fails with:
TypeError: only size-1 arrays can be converted to Python scalars
A little inspection reveals that this is because the corresponding C function is generated with an incorrect signature:
I've found that this error won't occur so long as `expr` depends at least in part on each argument. For example this slight modification of the above counterexample works perfectly:
# returns 1.0 as expected, without failure

=== Test Verification Results ===
Tests Passed: False
