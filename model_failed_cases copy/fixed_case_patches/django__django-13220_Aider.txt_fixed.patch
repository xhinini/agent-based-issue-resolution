=== Original Patch ===
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..7d768de57e 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -152,8 +152,8 @@ class ValidationError(Exception):
     @property
     def messages(self):
         if hasattr(self, 'error_dict'):
-            return sum(dict(self).values(), [])
-        return list(self)
+            return list(set(sum(dict(self).values(), [])))
+        return list(set(self))
 
     def update_error_dict(self, error_dict):
         if hasattr(self, 'error_dict'):
@@ -163,6 +163,21 @@ class ValidationError(Exception):
             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)
         return error_dict
 
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return False
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+            return self._normalize_error_dict(self.error_dict) == self._normalize_error_dict(other.error_dict)
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+            return sorted(self.messages) == sorted(other.messages)
+        return False
+
+    def _normalize_error_dict(self, error_dict):
+        normalized = {}
+        for field, errors in error_dict.items():
+            normalized[field] = sorted(str(e) for e in errors)
+        return normalized
+
     def __iter__(self):
         if hasattr(self, 'error_dict'):
             for field, errors in self.error_dict.items():
@@ -173,6 +188,15 @@ class ValidationError(Exception):
                 if error.params:
                     message %= error.params
                 yield str(message)
+        if hasattr(self, 'error_dict'):
+            for field, errors in self.error_dict.items():
+                yield field, list(ValidationError(errors))
+        else:
+            for error in self.error_list:
+                message = error.message
+                if error.params:
+                    message %= error.params
+                yield str(message)
 
     def __str__(self):
         if hasattr(self, 'error_dict'):

=== Fixed Patch ===
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..7d768de57e 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -152,8 +152,8 @@ class ValidationError(Exception):
     @property
     def messages(self):
         if hasattr(self, 'error_dict'):
-            return sum(dict(self).values(), [])
-        return list(self)
+return list(set(sum(dict(self).values(), [])))
+return list(set(self))
 
     def update_error_dict(self, error_dict):
         if hasattr(self, 'error_dict'):
@@ -163,6 +163,21 @@ class ValidationError(Exception):
             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)
         return error_dict
 
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+return False
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+return self._normalize_error_dict(self.error_dict) == self._normalize_error_dict(other.error_dict)
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+return sorted(self.messages) == sorted(other.messages)
+return False
+
+    def _normalize_error_dict(self, error_dict):
+normalized = {}
+        for field, errors in error_dict.items():
+normalized[field] = sorted((str(e) for e in errors))
+return normalized
+
     def __iter__(self):
         if hasattr(self, 'error_dict'):
             for field, errors in self.error_dict.items():
@@ -173,6 +188,15 @@ class ValidationError(Exception):
                 if error.params:
                     message %= error.params
                 yield str(message)
+        if hasattr(self, 'error_dict'):
+            for field, errors in self.error_dict.items():
+yield (field, list(ValidationError(errors)))
+        else:
+            for error in self.error_list:
+message = error.message
+                if error.params:
+message %= error.params
+yield str(message)
 
     def __str__(self):
         if hasattr(self, 'error_dict'):

=== Applied Patterns ===

=== Original Error Messages ===
TypeError: unhashable type: 'ValidationError' ====================================================================== ERROR: test_hash_nested (test_exceptions.test_validation_error.TestValidationError) ----------------------------------------------------------------------
TypeError: unhashable type: 'ValidationError' ====================================================================== FAIL: test_eq (test_exceptions.test_validation_error.TestValidationError) ----------------------------------------------------------------------
AssertionError: ValidationError(['message', 'message']) == ValidationError(['message', 'message']) ====================================================================== FAIL: test_eq_nested (test_exceptions.test_validation_error.TestValidationError) ----------------------------------------------------------------------
AssertionError: ValidationError({'field1': ['error val1 val2', 'error val1 val2'], 'field2': ['other', 'other']}) == ValidationError({'field1': ['error val1 val2', 'error val1 val2'], 'field2': ['other', 'other']}) ---------------------------------------------------------------------- Ran 5 tests in 0.001s FAILED (failures=2, errors=2) Testing against Django installed in '/testbed/django' Importing application test_exceptions Skipping setup of unused database(s): default, other. System check identified no issues (0 silenced). + git checkout 16218c20606d8cd89c5393970c83da04598a3e04 tests/test_exceptions/test_validation_error.py Updated 1 path from c1b968f621
Allow ValidationErrors to equal each other when created identically
Currently ValidationErrors (django.core.exceptions.ValidationError) that have identical messages don't equal each other, which is counter-intuitive, and can make certain kinds of testing more complicated. Please add an __eq__ method that allows two ValidationErrors to be compared.
Ideally, this would be more than just a simple self.messages == other.messages. It would be most helpful if the comparison were independent of the order in which errors were raised in a field or in non_field_errors.

=== Test Verification Results ===
Tests Passed: False
