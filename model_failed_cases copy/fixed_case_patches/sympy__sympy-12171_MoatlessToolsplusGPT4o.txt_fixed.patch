=== Original Patch ===
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index 4c2ffd81e1..fc6bedca9e 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -122,3 +122,85 @@ def mathematica_code(expr, **settings):
     '(1/120)*x^5 - 1/6*x^3 + x'
     """
     return MCodePrinter(settings).doprint(expr)
+
+class MCodePrinter(CodePrinter):
+    """A printer to convert python expressions to
+    strings of the Wolfram's Mathematica code
+    """
+    printmethod = "_mcode"
+
+    _default_settings = {
+        'order': None,
+        'full_prec': 'auto',
+        'precision': 15,
+        'user_functions': {},
+        'human': True,
+    }
+
+    _number_symbols = set()
+    _not_supported = set()
+
+    def __init__(self, settings={}):
+        """Register function mappings supplied by user"""
+        CodePrinter.__init__(self, settings)
+        self.known_functions = dict(known_functions)
+        userfuncs = settings.get('user_functions', {})
+        for k, v in userfuncs.items():
+            if not isinstance(v, list):
+                userfuncs[k] = [(lambda *x: True, v)]
+                self.known_functions.update(userfuncs)
+
+    doprint = StrPrinter.doprint
+
+    def _print_Pow(self, expr):
+        PREC = precedence(expr)
+        return '%s^%s' % (self.parenthesize(expr.base, PREC),
+                          self.parenthesize(expr.exp, PREC))
+
+    def _print_Mul(self, expr):
+        PREC = precedence(expr)
+        c, nc = expr.args_cnc()
+        res = super(MCodePrinter, self)._print_Mul(expr.func(*c))
+        if nc:
+            res += '*'
+            res += '**'.join(self.parenthesize(a, PREC) for a in nc)
+        return res
+
+    def _print_Pi(self, expr):
+        return 'Pi'
+
+    def _print_Infinity(self, expr):
+        return 'Infinity'
+
+    def _print_NegativeInfinity(self, expr):
+        return '-Infinity'
+
+    def _print_list(self, expr):
+        return '{' + ', '.join(self.doprint(a) for a in expr) + '}'
+    _print_tuple = _print_list
+    _print_Tuple = _print_list
+
+    def _print_Function(self, expr):
+        if expr.func.__name__ in self.known_functions:
+            cond_mfunc = self.known_functions[expr.func.__name__]
+            for cond, mfunc in cond_mfunc:
+                if cond(*expr.args):
+                    return "%s[%s]" % (mfunc, self.stringify(expr.args, ", "))
+        return expr.func.__name__ + "[%s]" % self.stringify(expr.args, ", ")
+
+    def _print_Integral(self, expr):
+        if len(expr.variables) == 1 and not expr.limits[0][1:]:
+            args = [expr.args[0], expr.variables[0]]
+        else:
+            args = expr.args
+        return "Hold[Integrate[" + ', '.join(self.doprint(a) for a in args) + "]]"
+
+    def _print_Sum(self, expr):
+        return "Hold[Sum[" + ', '.join(self.doprint(a) for a in expr.args) + "]]"
+
+    def _print_Derivative(self, expr):
+        return "D[%s]" % (self.stringify(expr.args, ", "))
+
+    def _print_Float(self, expr):
+        res = str(expr)
+        return res.replace('e', '*^')

=== Fixed Patch ===
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index 4c2ffd81e1..fc6bedca9e 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -122,3 +122,85 @@ def mathematica_code(expr, **settings):
     '(1/120)*x^5 - 1/6*x^3 + x'
     """
     return MCodePrinter(settings).doprint(expr)
+
+class MCodePrinter(CodePrinter):
+    """A printer to convert python expressions to
+    strings of the Wolfram's Mathematica code
+    """
+printmethod = '_mcode'
+
+    _default_settings = {
+        'order': None,
+        'full_prec': 'auto',
+        'precision': 15,
+        'user_functions': {},
+        'human': True,
+    }
+
+_number_symbols = set()
+_not_supported = set()
+
+    def __init__(self, settings={}):
+'Register function mappings supplied by user'
+CodePrinter.__init__(self, settings)
+self.known_functions = dict(known_functions)
+userfuncs = settings.get('user_functions', {})
+        for k, v in userfuncs.items():
+            if not isinstance(v, list):
+userfuncs[k] = [(lambda *x: True, v)]
+self.known_functions.update(userfuncs)
+
+doprint = StrPrinter.doprint
+
+    def _print_Pow(self, expr):
+PREC = precedence(expr)
+        return '%s^%s' % (self.parenthesize(expr.base, PREC),
+                          self.parenthesize(expr.exp, PREC))
+
+    def _print_Mul(self, expr):
+PREC = precedence(expr)
+c, nc = expr.args_cnc()
+res = super(MCodePrinter, self)._print_Mul(expr.func(*c))
+        if nc:
+res += '*'
+res += '**'.join((self.parenthesize(a, PREC) for a in nc))
+return res
+
+    def _print_Pi(self, expr):
+return 'Pi'
+
+    def _print_Infinity(self, expr):
+return 'Infinity'
+
+    def _print_NegativeInfinity(self, expr):
+return '-Infinity'
+
+    def _print_list(self, expr):
+return '{' + ', '.join((self.doprint(a) for a in expr)) + '}'
+_print_tuple = _print_list
+_print_Tuple = _print_list
+
+    def _print_Function(self, expr):
+        if expr.func.__name__ in self.known_functions:
+cond_mfunc = self.known_functions[expr.func.__name__]
+            for cond, mfunc in cond_mfunc:
+                if cond(*expr.args):
+return '%s[%s]' % (mfunc, self.stringify(expr.args, ', '))
+return expr.func.__name__ + '[%s]' % self.stringify(expr.args, ', ')
+
+    def _print_Integral(self, expr):
+        if len(expr.variables) == 1 and not expr.limits[0][1:]:
+args = [expr.args[0], expr.variables[0]]
+        else:
+args = expr.args
+return 'Hold[Integrate[' + ', '.join((self.doprint(a) for a in args)) + ']]'
+
+    def _print_Sum(self, expr):
+return 'Hold[Sum[' + ', '.join((self.doprint(a) for a in expr.args)) + ']]'
+
+    def _print_Derivative(self, expr):
+return 'D[%s]' % self.stringify(expr.args, ', ')
+
+    def _print_Float(self, expr):
+res = str(expr)
+return res.replace('e', '*^')

=== Applied Patterns ===

=== Original Error Messages ===


=== Test Verification Results ===
Tests Passed: False
