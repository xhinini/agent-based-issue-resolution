=== Original Patch ===
diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py
index 84962b9d0e..9bf1aac484 100644
--- a/django/contrib/auth/models.py
+++ b/django/contrib/auth/models.py
@@ -33,6 +33,8 @@ class PermissionManager(models.Manager):
 class Permission(models.Model):
     """
     The permissions system provides a way to assign permissions to specific
+    class Meta:
+        ordering = ['-pk']
     users and groups of users.
 
     The permission system is used by the Django admin site, but may also be
@@ -90,6 +92,8 @@ class GroupManager(models.Manager):
 class Group(models.Model):
     """
     Groups are a generic way of categorizing users to apply permissions, or
+    class Meta:
+        ordering = ['-pk']
     some other label, to those users. A user can belong to any number of
     groups.
 
@@ -226,6 +230,8 @@ def _user_has_module_perms(user, app_label):
 class PermissionsMixin(models.Model):
     """
     Add the fields and methods necessary to support the Group and Permission
+    class Meta:
+        ordering = ['-pk']
     models using the ModelBackend.
     """
     is_superuser = models.BooleanField(
diff --git a/django/contrib/flatpages/models.py b/django/contrib/flatpages/models.py
index 2f2473b842..fa9c62e9a5 100644
--- a/django/contrib/flatpages/models.py
+++ b/django/contrib/flatpages/models.py
@@ -8,6 +8,8 @@ from django.utils.translation import gettext_lazy as _
 class FlatPage(models.Model):
     url = models.CharField(_('URL'), max_length=100, db_index=True)
     title = models.CharField(_('title'), max_length=200)
+    class Meta:
+        ordering = ['-pk']
     content = models.TextField(_('content'), blank=True)
     enable_comments = models.BooleanField(_('enable comments'), default=False)
     template_name = models.CharField(

=== Fixed Patch ===
diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py
index 84962b9d0e..9bf1aac484 100644
--- a/django/contrib/auth/models.py
+++ b/django/contrib/auth/models.py
@@ -33,6 +33,8 @@ class PermissionManager(models.Manager):
 class Permission(models.Model):
     """
     The permissions system provides a way to assign permissions to specific
+    class Meta:
+ordering = ['-pk']
     users and groups of users.
 
     The permission system is used by the Django admin site, but may also be
@@ -90,6 +92,8 @@ class GroupManager(models.Manager):
 class Group(models.Model):
     """
     Groups are a generic way of categorizing users to apply permissions, or
+    class Meta:
+ordering = ['-pk']
     some other label, to those users. A user can belong to any number of
     groups.
 
@@ -226,6 +230,8 @@ def _user_has_module_perms(user, app_label):
 class PermissionsMixin(models.Model):
     """
     Add the fields and methods necessary to support the Group and Permission
+    class Meta:
+ordering = ['-pk']
     models using the ModelBackend.
     """
     is_superuser = models.BooleanField(
diff --git a/django/contrib/flatpages/models.py b/django/contrib/flatpages/models.py
index 2f2473b842..fa9c62e9a5 100644
--- a/django/contrib/flatpages/models.py
+++ b/django/contrib/flatpages/models.py
@@ -8,6 +8,8 @@ from django.utils.translation import gettext_lazy as _
 class FlatPage(models.Model):
     url = models.CharField(_('URL'), max_length=100, db_index=True)
     title = models.CharField(_('title'), max_length=200)
+    class Meta:
+ordering = ['-pk']
     content = models.TextField(_('content'), blank=True)
     enable_comments = models.BooleanField(_('enable comments'), default=False)
     template_name = models.CharField(

=== Applied Patterns ===

=== Original Error Messages ===
AssertionError: Sequences differ: <QuerySet [<Parent: Parent object (1)>, <Parent: Parent object (2)>]> != [<Parent: Parent object (2)>, <Parent: Parent object (1)>] First differing element 0: <Parent: Parent object (1)> <Parent: Parent object (2)> - <QuerySet [<Parent: Parent object (1)>, <Parent: Parent object (2)>]> ? ----------                         ^                            ^   - + [<Parent: Parent object (2)>, <Parent: Parent object (1)>] ?                          ^                            ^ ---------------------------------------------------------------------- Ran 34 tests in 0.083s FAILED (failures=1) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... + git checkout 142ab6846ac09d6d401e26fc8b6b988a583ac0f5 tests/model_inheritance/models.py tests/model_inheritance/tests.py Updated 2 paths from d12a79a5db

=== Test Verification Results ===
Tests Passed: False
