=== Original Patch ===
diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index d96e76263b..06a1e6751a 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -2105,11 +2105,23 @@ def uniq(seq, result=None):
     [1, 4, 5, 2]
     >>> list(uniq([[1], [2, 1], [1]]))
     [[1], [2, 1]]
+
+    Raises
+    ======
+
+    RuntimeError
+        If the size of ``seq`` changes during iteration.
     """
+    try:
+        start_size = len(seq)
+    except TypeError:
+        start_size = None
     try:
         seen = set()
         result = result or []
         for i, s in enumerate(seq):
+            if start_size is not None and len(seq) != start_size:
+                raise RuntimeError("size changed during iteration")
             if not (s in seen or seen.add(s)):
                 yield s
     except TypeError:

=== Fixed Patch ===
diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index d96e76263b..06a1e6751a 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -2105,11 +2105,23 @@ def uniq(seq, result=None):
     [1, 4, 5, 2]
     >>> list(uniq([[1], [2, 1], [1]]))
     [[1], [2, 1]]
+
+Raises
+    ======
+
+RuntimeError
+        If the size of ``seq`` changes during iteration.
     """
+    try:
+start_size = len(seq)
+    except TypeError:
+start_size = None
     try:
         seen = set()
         result = result or []
         for i, s in enumerate(seq):
+            if start_size is not None and len(seq) != start_size:
+raise RuntimeError('size changed during iteration')
             if not (s in seen or seen.add(s)):
                 yield s
     except TypeError:

=== Applied Patterns ===

=== Original Error Messages ===
except TypeError: + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z x ']' ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1='(testbed) ' +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=3 +++ CONDA_SHLVL=3 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=4 ++ CONDA_SHLVL=4 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_3=/opt/miniconda3 ++ CONDA_PREFIX_3=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + python -m pip install -e . Obtaining file:///testbed Preparing metadata (setup.py): started Preparing metadata (setup.py): finished with status 'done' Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0) Installing collected packages: sympy Attempting uninstall: sympy Found existing installation: sympy 1.6.dev0 Uninstalling sympy-1.6.dev0: Successfully uninstalled sympy-1.6.dev0 Running setup.py develop for sympy Successfully installed sympy-1.6.dev0 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv + git checkout 516fa83e69caf1e68306cfc912a13f36c434d51c sympy/utilities/tests/test_iterables.py Updated 0 paths from ce4fe549cf + git apply -v - Checking patch sympy/utilities/tests/test_iterables.py... Applied patch sympy/utilities/tests/test_iterables.py cleanly. + PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning + bin/test -C --verbose sympy/utilities/tests/test_iterables.py ============================= test process starts ============================== executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython] architecture:       64-bit cache:              no ground types:       python numpy:              None random seed:        9431069 hash randomization: on (PYTHONHASHSEED=4075039197) sympy/utilities/tests/test_iterables.py[43] test_is_palindromic ok test_postorder_traversal ok test_flatten ok test_iproduct ok test_group ok test_subsets ok test_variations ok test_cartes ok test_filter_symbols ok test_numbered_symbols ok test_sift ok test_take ok test_dict_merge ok test_prefixes ok test_postfixes ok test_topological_sort ok test_strongly_connected_components ok test_connected_components ok test_rotate ok test_multiset_partitions ok test_multiset_combinations ok test_multiset_permutations ok test_partitions ok test_binary_partitions ok test_bell_perm ok test_involutions ok test_derangements ok test_necklaces ok test_bracelets ok test_generate_oriented_forest ok test_unflatten ok test_common_prefix_suffix ok test_minlex ok test_ordered ok test_runs ok test_reshape ok test_uniq E test_kbins ok test_has_dups ok test__partition ok test_ordered_partitions ok test_rotations ok test_ibin ok                                                              [FAIL] ________________________________________________________________________________ ______________ sympy/utilities/tests/test_iterables.py:test_uniq _______________
When you iterate over a dictionary or set and try to modify it while doing so you get an error from Python:
RuntimeError: dictionary changed size during iteration
It would be good to do the same thing from within `uniq` because the output will silently be wrong if you modify a passed list:
I think this would entail recording the size at the start and then checking the size and raising a similar RuntimeError if the size changes.

=== Test Verification Results ===
Tests Passed: False
