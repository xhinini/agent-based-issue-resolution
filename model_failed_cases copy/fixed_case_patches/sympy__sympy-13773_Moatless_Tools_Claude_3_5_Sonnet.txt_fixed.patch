=== Original Patch ===
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 379a2917aa..d142087623 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1973,6 +1973,8 @@ def __div__(self, other):
 
     @call_highest_priority('__rmatmul__')
     def __matmul__(self, other):
+        if not isinstance(other, MatrixRequired):
+            raise ValueError("Scalar operands are not allowed, use '*' instead")
         return self.__mul__(other)
 
     @call_highest_priority('__rmul__')
@@ -2068,6 +2070,8 @@ def __radd__(self, other):
 
     @call_highest_priority('__matmul__')
     def __rmatmul__(self, other):
+        if not isinstance(other, MatrixRequired):
+            raise ValueError("Scalar operands are not allowed, use '*' instead")
         return self.__rmul__(other)
 
     @call_highest_priority('__mul__')

=== Fixed Patch ===
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 379a2917aa..d142087623 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1973,6 +1973,8 @@ def __div__(self, other):
 
     @call_highest_priority('__rmatmul__')
     def __matmul__(self, other):
+        if not isinstance(other, MatrixRequired):
+raise ValueError("Scalar operands are not allowed, use '*' instead")
         return self.__mul__(other)
 
     @call_highest_priority('__rmul__')
@@ -2068,6 +2070,8 @@ def __radd__(self, other):
 
     @call_highest_priority('__matmul__')
     def __rmatmul__(self, other):
+        if not isinstance(other, MatrixRequired):
+raise ValueError("Scalar operands are not allowed, use '*' instead")
         return self.__rmul__(other)
 
     @call_highest_priority('__mul__')

=== Applied Patterns ===

=== Original Error Messages ===
ValueError: Scalar operands are not allowed, use '*' instead ________________________________________________________________________________ ______________ sympy/matrices/tests/test_commonmatrix.py:test_div ______________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 723, in test_div assert n/2 == ArithmeticOnlyMatrix(1, 2, [1/2, 2/2]) File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2112, in __truediv__ return self.__div__(other) File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 1972, in __div__ return self * (S.One / other) File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2024, in __mul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ __________ sympy/matrices/tests/test_commonmatrix.py:test_eigenvects ___________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1225, in test_eigenvects vecs = M.eigenvects() File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp> ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace m = mat - self.eye(mat.rows) * eigenval File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2024, in __mul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ ________ sympy/matrices/tests/test_commonmatrix.py:test_left_eigenvects ________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1234, in test_left_eigenvects vecs = M.left_eigenvects() File "/testbed/sympy/matrices/matrices.py", line 1503, in left_eigenvects eigs = self.transpose().eigenvects(**flags) File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp> ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace m = mat - self.eye(mat.rows) * eigenval File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2024, in __mul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ __________ sympy/matrices/tests/test_commonmatrix.py:test_diagonalize __________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1241, in test_diagonalize raises(MatrixError, lambda: m.diagonalize(reals_only=True)) File "/testbed/sympy/utilities/pytest.py", line 78, in raises code() File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1241, in <lambda> raises(MatrixError, lambda: m.diagonalize(reals_only=True)) File "/testbed/sympy/matrices/matrices.py", line 1083, in diagonalize if not self.is_diagonalizable(reals_only=reals_only, clear_cache=False): File "/testbed/sympy/matrices/matrices.py", line 1281, in is_diagonalizable self._cache_eigenvects = self.eigenvects(simplify=True) File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp> ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace m = mat - self.eye(mat.rows) * eigenval File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2024, in __mul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ _______ sympy/matrices/tests/test_commonmatrix.py:test_is_diagonalizable _______ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1261, in test_is_diagonalizable assert m.is_diagonalizable() File "/testbed/sympy/matrices/matrices.py", line 1281, in is_diagonalizable self._cache_eigenvects = self.eigenvects(simplify=True) File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp> ret = [(val, mult, eigenspace(val)) for val, mult in File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace m = mat - self.eye(mat.rows) * eigenval File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2024, in __mul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ __________ sympy/matrices/tests/test_commonmatrix.py:test_jordan_form __________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1282, in test_jordan_form P, J = m.jordan_form() File "/testbed/sympy/matrices/matrices.py", line 1423, in jordan_form chain = nullity_chain(eig) File "/testbed/sympy/matrices/matrices.py", line 1366, in nullity_chain nullity = cols - eig_mat(val, 1).rank() File "/testbed/sympy/matrices/matrices.py", line 1355, in eig_mat mat_cache[(val, pow)] = (mat - val*self.eye(self.rows))**pow File "/testbed/sympy/core/numbers.py", line 2095, in __mul__ return Rational.__mul__(self, other) File "/testbed/sympy/core/decorators.py", line 91, in __sympifyit_wrapper return func(a, b) File "/testbed/sympy/core/numbers.py", line 1619, in __mul__ return Number.__mul__(self, other) File "/testbed/sympy/core/decorators.py", line 91, in __sympifyit_wrapper return func(a, b) File "/testbed/sympy/core/numbers.py", line 676, in __mul__ return AtomicExpr.__mul__(self, other) File "/testbed/sympy/core/decorators.py", line 91, in __sympifyit_wrapper return func(a, b) File "/testbed/sympy/core/decorators.py", line 131, in binary_op_wrapper return f(self) File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2094, in __rmul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ ___________ sympy/matrices/tests/test_commonmatrix.py:test_jacobian2 ___________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1356, in test_jacobian2 assert X.jacobian(Y) == J File "/testbed/sympy/matrices/matrices.py", line 1651, in jacobian return self._new(m, n, lambda j, i: self[j].diff(X[i])) File "/testbed/sympy/matrices/common.py", line 2167, in _new return cls(*args, **kwargs) File "/testbed/sympy/matrices/common.py", line 2172, in __init__ mat = list(mat(i, j) for i in range(rows) for j in range(cols)) File "/testbed/sympy/matrices/common.py", line 2172, in <genexpr> mat = list(mat(i, j) for i in range(rows) for j in range(cols)) File "/testbed/sympy/matrices/matrices.py", line 1651, in <lambda> return self._new(m, n, lambda j, i: self[j].diff(X[i])) File "/testbed/sympy/core/expr.py", line 3008, in diff return Derivative(self, *new_symbols, **assumptions) File "/testbed/sympy/core/function.py", line 1241, in __new__ if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ _____________ sympy/matrices/tests/test_commonmatrix.py:test_limit _____________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1366, in test_limit assert m.limit(x, 5) == Matrix(2, 1, [S(1)/5, y]) File "/testbed/sympy/matrices/matrices.py", line 1674, in limit return self.applyfunc(lambda x: x.limit(*args)) File "/testbed/sympy/matrices/common.py", line 1547, in applyfunc return self._eval_applyfunc(f) File "/testbed/sympy/matrices/common.py", line 1487, in _eval_applyfunc out = self._new(self.rows, self.cols, [f(x) for x in self]) File "/testbed/sympy/matrices/common.py", line 1487, in <listcomp> out = self._new(self.rows, self.cols, [f(x) for x in self]) File "/testbed/sympy/matrices/matrices.py", line 1674, in <lambda> return self.applyfunc(lambda x: x.limit(*args)) File "/testbed/sympy/core/expr.py", line 2871, in limit return limit(self, x, xlim, dir) File "/testbed/sympy/series/limits.py", line 68, in limit return Limit(e, z, z0, dir).doit(deep=False) File "/testbed/sympy/series/limits.py", line 209, in doit r = gruntz(e, z, z0, dir) File "/testbed/sympy/series/gruntz.py", line 658, in gruntz r = limitinf(e0, z) File "/testbed/sympy/series/gruntz.py", line 428, in limitinf c0, e0 = mrv_leadterm(e, x) File "/testbed/sympy/series/gruntz.py", line 487, in mrv_leadterm Omega, exps = mrv(e, x) File "/testbed/sympy/series/gruntz.py", line 246, in mrv e = powsimp(e, deep=True, combine='exp') File "/testbed/sympy/simplify/powsimp.py", line 118, in powsimp expr = expr.func(*[recurse(w) for w in expr.args]) File "/testbed/sympy/simplify/powsimp.py", line 118, in <listcomp> expr = expr.func(*[recurse(w) for w in expr.args]) File "/testbed/sympy/simplify/powsimp.py", line 109, in recurse return powsimp(arg, _deep, _combine, _force, _measure) File "/testbed/sympy/simplify/powsimp.py", line 118, in powsimp expr = expr.func(*[recurse(w) for w in expr.args]) File "/testbed/sympy/simplify/powsimp.py", line 118, in <listcomp> expr = expr.func(*[recurse(w) for w in expr.args]) File "/testbed/sympy/simplify/powsimp.py", line 109, in recurse return powsimp(arg, _deep, _combine, _force, _measure) File "/testbed/sympy/simplify/powsimp.py", line 121, in powsimp return recurse(expr*_y, deep=False)/_y File "/testbed/sympy/core/decorators.py", line 91, in __sympifyit_wrapper return func(a, b) File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/core/expr.py", line 177, in __div__ return Mul(self, Pow(other, S.NegativeOne)) File "/testbed/sympy/core/operations.py", line 42, in __new__ c_part, nc_part, order_symbols = cls.flatten(args) File "/testbed/sympy/core/mul.py", line 184, in flatten if not a.is_zero and a.is_Rational: File "/testbed/sympy/core/assumptions.py", line 248, in getit return _ask(fact, self) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 291, in _ask a = evaluate(obj) File "/testbed/sympy/core/mul.py", line 1228, in _eval_is_irrational a = t.is_irrational File "/testbed/sympy/core/assumptions.py", line 248, in getit return _ask(fact, self) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) [Previous line repeated 1 more time] File "/testbed/sympy/core/assumptions.py", line 291, in _ask a = evaluate(obj) File "/testbed/sympy/core/power.py", line 1130, in _eval_is_algebraic if self.base.is_zero or _is_one(self.base): File "/testbed/sympy/core/power.py", line 1125, in _is_one return (expr - 1).is_zero File "/testbed/sympy/core/assumptions.py", line 248, in getit return _ask(fact, self) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 291, in _ask a = evaluate(obj) File "/testbed/sympy/core/add.py", line 522, in _eval_is_imaginary if b.is_zero: File "/testbed/sympy/core/assumptions.py", line 248, in getit return _ask(fact, self) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) [Previous line repeated 1 more time] File "/testbed/sympy/core/assumptions.py", line 291, in _ask a = evaluate(obj) File "/testbed/sympy/core/add.py", line 522, in _eval_is_imaginary if b.is_zero: File "/testbed/sympy/core/assumptions.py", line 248, in getit return _ask(fact, self) File "/testbed/sympy/core/assumptions.py", line 303, in _ask _ask(pk, obj) File "/testbed/sympy/core/assumptions.py", line 291, in _ask a = evaluate(obj) File "/testbed/sympy/core/add.py", line 592, in _eval_is_positive if s != self and s.is_positive and a.is_nonnegative: File "/testbed/sympy/core/assumptions.py", line 248, in getit return _ask(fact, self) File "/testbed/sympy/core/assumptions.py", line 291, in _ask a = evaluate(obj) File "/testbed/sympy/core/add.py", line 595, in _eval_is_positive v = _monotonic_sign(self) File "/testbed/sympy/core/exprtools.py", line 120, in _monotonic_sign d = self.diff(x) File "/testbed/sympy/core/expr.py", line 3008, in diff return Derivative(self, *new_symbols, **assumptions) File "/testbed/sympy/core/function.py", line 1241, in __new__ if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working ________________________________________________________________________________ __________ sympy/matrices/tests/test_commonmatrix.py:test_issue_13774 __________ File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1371, in test_issue_13774 raises(TypeError, lambda: M*v) File "/testbed/sympy/utilities/pytest.py", line 78, in raises code() File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1371, in <lambda> raises(TypeError, lambda: M*v) File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper return func(self, other) File "/testbed/sympy/matrices/common.py", line 2024, in __mul__ if not isinstance(other, collections.Iterable): File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__ warnings.warn("Using or importing the ABCs from 'collections' instead " DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working tests finished: 69 passed, 1 expected to fail, 13 exceptions, in 3.28 seconds = DO *NOT* COMMIT! + git checkout 7121bdf1facdd90d05b6994b4c2e5b2865a4638a sympy/matrices/tests/test_commonmatrix.py Updated 1 path from 72f278ebf0
@ (__matmul__) should fail if one argument is not a matrix
ValueError: Scalar operands are not allowed, use '*' instead

=== Test Verification Results ===
Tests Passed: False
