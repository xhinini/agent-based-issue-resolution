=== Original Patch ===
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 03cf57a30b..9eb043f425 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1262,13 +1262,14 @@ def __new__(cls, *args, **kwargs):
         # flatten inputs to merge intersections and iterables
         args = _sympify(args)
 
+        # Remove duplicates
+        args = list(ordered(set(args), Set._infimum_key))
+
         # Reduce sets using known rules
         if evaluate:
             args = list(cls._new_args_filter(args))
             return simplify_intersection(args)
 
-        args = list(ordered(args, Set._infimum_key))
-
         obj = Basic.__new__(cls, *args)
         obj._argset = frozenset(args)
         return obj
@@ -1316,6 +1317,7 @@ def __iter__(self):
     def _handle_finite_sets(args):
         from sympy.core.logic import fuzzy_and, fuzzy_bool
         from sympy.core.compatibility import zip_longest
+        from sympy import Piecewise, Eq
 
         fs_args, other = sift(args, lambda x: x.is_FiniteSet,
             binary=True)
@@ -1377,6 +1379,8 @@ def _handle_finite_sets(args):
                 res += Intersection(
                     FiniteSet(*unk),
                     other_sets, evaluate=False)
+        if unk:
+            return Piecewise((res, Eq(symbolic_s_list[0], unk[0])), (S.EmptySet, True))
         return res
 
     def as_relational(self, symbol):

=== Fixed Patch ===
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 03cf57a30b..9eb043f425 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1262,13 +1262,14 @@ def __new__(cls, *args, **kwargs):
         # flatten inputs to merge intersections and iterables
         args = _sympify(args)
 
+        # Remove duplicates
+args = list(ordered(set(args), Set._infimum_key))
+
         # Reduce sets using known rules
         if evaluate:
             args = list(cls._new_args_filter(args))
             return simplify_intersection(args)
 
-        args = list(ordered(args, Set._infimum_key))
-
         obj = Basic.__new__(cls, *args)
         obj._argset = frozenset(args)
         return obj
@@ -1316,6 +1317,7 @@ def __iter__(self):
     def _handle_finite_sets(args):
         from sympy.core.logic import fuzzy_and, fuzzy_bool
         from sympy.core.compatibility import zip_longest
+from sympy import Piecewise, Eq
 
         fs_args, other = sift(args, lambda x: x.is_FiniteSet,
             binary=True)
@@ -1377,6 +1379,8 @@ def _handle_finite_sets(args):
                 res += Intersection(
                     FiniteSet(*unk),
                     other_sets, evaluate=False)
+        if unk:
+return Piecewise((res, Eq(symbolic_s_list[0], unk[0])), (S.EmptySet, True))
         return res
 
     def as_relational(self, symbol):

=== Applied Patterns ===

=== Original Error Messages ===
IndexError: list index out of range ________________________________________________________________________________ ________________ sympy/sets/tests/test_sets.py:test_intersect1 _________________
IndexError: list index out of range ________________________________________________________________________________ _______________ sympy/sets/tests/test_sets.py:test_intersection ________________
IndexError: list index out of range ________________________________________________________________________________ ____________ sympy/sets/tests/test_sets.py:test_issue_Symbol_inter _____________

=== Test Verification Results ===
Tests Passed: False
