=== Original Patch ===
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 62631f7ff..15a8fd219 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -112,7 +112,11 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
 def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
     """Used to convert the :members: option to auto directives."""
     if arg in (None, True):
-        return 'object'
+        return {'object'}
+    elif isinstance(arg, str):
+        return {arg}
+    elif isinstance(arg, (list, tuple)):
+        return set(arg)
     else:
         return arg
 
@@ -681,16 +685,27 @@ class Documenter:
         """
         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
             if inspect.isclass(self.object):
-                for cls in self.object.__mro__:
-                    if cls.__name__ == self.options.inherited_members and cls != self.object:
-                        # given member is a member of specified *super class*
-                        return True
-                    elif name in cls.__dict__:
-                        return False
-                    elif name in self.get_attr(cls, '__annotations__', {}):
-                        return False
-                    elif isinstance(obj, ObjectMember) and obj.class_ is cls:
-                        return False
+                inherited_members = self.options.inherited_members
+                if isinstance(inherited_members, set):
+                    for cls in self.object.__mro__:
+                        if cls.__name__ in inherited_members and cls != self.object:
+                            return True
+                        elif name in cls.__dict__:
+                            return False
+                        elif name in self.get_attr(cls, '__annotations__', {}):
+                            return False
+                        elif isinstance(obj, ObjectMember) and obj.class_ is cls:
+                            return False
+                else:
+                    for cls in self.object.__mro__:
+                        if cls.__name__ == inherited_members and cls != self.object:
+                            return True
+                        elif name in cls.__dict__:
+                            return False
+                        elif name in self.get_attr(cls, '__annotations__', {}):
+                            return False
+                        elif isinstance(obj, ObjectMember) and obj.class_ is cls:
+                            return False
 
             return False
 
@@ -1700,7 +1715,6 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
         if not want_all:
             if not self.options.members:
                 return False, []  # type: ignore
-            # specific members given
             selected = []
             for name in self.options.members:  # type: str
                 if name in members:
@@ -1710,7 +1724,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
                                    (name, self.fullname), type='autodoc')
             return False, selected
         elif self.options.inherited_members:
-            return False, list(members.values())
+            inherited_members = self.options.inherited_members
+            if isinstance(inherited_members, set):
+                return False, [m for m in members.values() if m.class_.__name__ not in inherited_members]
+            else:
+                return False, list(members.values())
         else:
             return False, [m for m in members.values() if m.class_ == self.object]

=== Fixed Patch ===
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 62631f7ff..15a8fd219 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -112,7 +112,11 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
 def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
     """Used to convert the :members: option to auto directives."""
     if arg in (None, True):
-        return 'object'
+return {'object'}
+    elif isinstance(arg, str):
+return {arg}
+    elif isinstance(arg, (list, tuple)):
+return set(arg)
     else:
         return arg
 
@@ -681,16 +685,27 @@ class Documenter:
         """
         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
             if inspect.isclass(self.object):
-                for cls in self.object.__mro__:
-                    if cls.__name__ == self.options.inherited_members and cls != self.object:
-                        # given member is a member of specified *super class*
-                        return True
-                    elif name in cls.__dict__:
-                        return False
-                    elif name in self.get_attr(cls, '__annotations__', {}):
-                        return False
-                    elif isinstance(obj, ObjectMember) and obj.class_ is cls:
-                        return False
+inherited_members = self.options.inherited_members
+                if isinstance(inherited_members, set):
+                    for cls in self.object.__mro__:
+                        if cls.__name__ in inherited_members and cls != self.object:
+return True
+                        elif name in cls.__dict__:
+return False
+                        elif name in self.get_attr(cls, '__annotations__', {}):
+return False
+                        elif isinstance(obj, ObjectMember) and obj.class_ is cls:
+return False
+                else:
+                    for cls in self.object.__mro__:
+                        if cls.__name__ == inherited_members and cls != self.object:
+return True
+                        elif name in cls.__dict__:
+return False
+                        elif name in self.get_attr(cls, '__annotations__', {}):
+return False
+                        elif isinstance(obj, ObjectMember) and obj.class_ is cls:
+return False
 
             return False
 
@@ -1700,7 +1715,6 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
         if not want_all:
             if not self.options.members:
                 return False, []  # type: ignore
-            # specific members given
             selected = []
             for name in self.options.members:  # type: str
                 if name in members:
@@ -1710,7 +1724,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
                                    (name, self.fullname), type='autodoc')
             return False, selected
         elif self.options.inherited_members:
-            return False, list(members.values())
+inherited_members = self.options.inherited_members
+            if isinstance(inherited_members, set):
+return (False, [m for m in members.values() if m.class_.__name__ not in inherited_members])
+            else:
+return (False, list(members.values()))
         else:
             return False, [m for m in members.values() if m.class_ == self.object]

=== Applied Patterns ===

=== Original Error Messages ===


=== Test Verification Results ===
Tests Passed: False
