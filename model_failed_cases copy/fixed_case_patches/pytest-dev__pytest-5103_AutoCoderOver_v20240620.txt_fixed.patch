=== Original Patch ===
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..101e8880f 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -841,6 +841,48 @@ class AssertionRewriter(ast.NodeVisitor):
         self.push_format_context()
         # Rewrite assert into a bunch of statements.
         top_condition, explanation = self.visit(assert_.test)
+
+        # Detect and handle all/any calls
+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name) and assert_.test.func.id in {"all", "any"}:
+            func_name = assert_.test.func.id
+            iterable = assert_.test.args[0]
+            if isinstance(iterable, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):
+                # Unroll the iterable
+                element_var = self.variable()
+                self.statements.append(ast.Assign([ast.Name(element_var, ast.Store())], iterable))
+                for_loop = ast.For(
+                    target=iterable.elt,
+                    iter=ast.Name(element_var, ast.Load()),
+                    body=[
+                        ast.If(
+                            test=ast.UnaryOp(
+                                op=ast.Not() if func_name == "all" else ast.Is(),
+                                operand=iterable.elt
+                            ),
+                            body=[
+                                ast.Raise(
+                                    exc=ast.Call(
+                                        func=ast.Name(id='AssertionError', ctx=ast.Load()),
+                                        args=[ast.BinOp(
+                                            left=ast.Str(s=f"Element {{}} in {{}} failed the {func_name} assertion"),
+                                            op=ast.Mod(),
+                                            right=ast.Tuple(
+                                                elts=[self.display(iterable.elt), self.display(ast.Name(element_var, ast.Load()))],
+                                                ctx=ast.Load()
+                                            )
+                                        )],
+                                        keywords=[]
+                                    ),
+                                    cause=None
+                                )
+                            ],
+                            orelse=[]
+                        )
+                    ],
+                    orelse=[]
+                )
+                self.statements.append(for_loop)
+                return self.statements
         # If in a test module, check if directly asserting None, in order to warn [Issue #3191]
         if self.module_path is not None:
             self.statements.append(

=== Fixed Patch ===
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..101e8880f 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -841,6 +841,48 @@ class AssertionRewriter(ast.NodeVisitor):
         self.push_format_context()
         # Rewrite assert into a bunch of statements.
         top_condition, explanation = self.visit(assert_.test)
+
+        # Detect and handle all/any calls
+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name) and assert_.test.func.id in {"all", "any"}:
+func_name = assert_.test.func.id
+iterable = assert_.test.args[0]
+            if isinstance(iterable, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):
+                # Unroll the iterable
+element_var = self.variable()
+self.statements.append(ast.Assign([ast.Name(element_var, ast.Store())], iterable))
+                for_loop = ast.For(
+target = (iterable.elt,)
+iter = (ast.Name(element_var, ast.Load()),)
+                    body=[
+                        ast.If(
+                            test=ast.UnaryOp(
+op = (ast.Not() if func_name == 'all' else ast.Is(),)
+operand = iterable.elt
+                            ),
+                            body=[
+                                ast.Raise(
+                                    exc=ast.Call(
+func = (ast.Name(id='AssertionError', ctx=ast.Load()),)
+                                        args=[ast.BinOp(
+left = (ast.Str(s=f'Element {{}} in {{}} failed the {func_name} assertion'),)
+op = (ast.Mod(),)
+                                            right=ast.Tuple(
+elts = ([self.display(iterable.elt), self.display(ast.Name(element_var, ast.Load()))],)
+ctx = ast.Load()
+                                            )
+                                        )],
+keywords = []
+                                    ),
+cause = None
+                                )
+                            ],
+orelse = []
+                        )
+                    ],
+orelse = []
+                )
+self.statements.append(for_loop)
+return self.statements
         # If in a test module, check if directly asserting None, in order to warn [Issue #3191]
         if self.module_path is not None:
             self.statements.append(

=== Applied Patterns ===

=== Original Error Messages ===
Sometime I need to assert some predicate on all of an iterable, and for that the builtin functions `all`/`any` are great - but the failure messages aren't useful at all!
test_all_any.py:7: AssertionError

=== Test Verification Results ===
Tests Passed: False
