=== Original Patch ===
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..5e583d952 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -986,7 +986,34 @@ warn_explicit(
 
         expl = "%s(%s)" % (func_expl, ", ".join(arg_expls))
         new_call = ast.Call(new_func, new_args, new_kwargs)
-        res = self.assign(new_call)
+
+        if isinstance(new_func, ast.Name) and new_func.id in ('all', 'any'):
+            # Unroll the iterable for all/any calls
+            iter_var = self.variable()
+            self.statements.append(
+                ast.Assign([ast.Name(iter_var, ast.Store())], new_args[0])
+            )
+
+            loop_var = self.variable()
+            test = ast.Name(loop_var, ast.Load())
+            if new_func.id == 'all':
+                test = ast.UnaryOp(ast.Not(), test)
+
+            self.statements.append(
+                ast.For(
+                    ast.Name(loop_var, ast.Store()),
+                    ast.Name(iter_var, ast.Load()),
+                    [ast.If(test, [ast.Break()], [])],
+                    []
+                )
+            )
+
+            res = ast.Name(loop_var, ast.Load())
+            if new_func.id == 'all':
+                res = ast.UnaryOp(ast.Not(), res)
+        else:
+            res = self.assign(new_call)
+
         res_expl = self.explanation_param(self.display(res))
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl

=== Fixed Patch ===
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..5e583d952 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -986,7 +986,34 @@ warn_explicit(
 
         expl = "%s(%s)" % (func_expl, ", ".join(arg_expls))
         new_call = ast.Call(new_func, new_args, new_kwargs)
-        res = self.assign(new_call)
+
+        if isinstance(new_func, ast.Name) and new_func.id in ('all', 'any'):
+            # Unroll the iterable for all/any calls
+iter_var = self.variable()
+            self.statements.append(
+ast.Assign([ast.Name(iter_var, ast.Store())], new_args[0])
+            )
+
+loop_var = self.variable()
+test = ast.Name(loop_var, ast.Load())
+            if new_func.id == 'all':
+test = ast.UnaryOp(ast.Not(), test)
+
+            self.statements.append(
+                ast.For(
+(ast.Name(loop_var, ast.Store()),)
+(ast.Name(iter_var, ast.Load()),)
+([ast.If(test, [ast.Break()], [])],)
+[]
+                )
+            )
+
+res = ast.Name(loop_var, ast.Load())
+            if new_func.id == 'all':
+res = ast.UnaryOp(ast.Not(), res)
+        else:
+res = self.assign(new_call)
+
         res_expl = self.explanation_param(self.display(res))
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl

=== Applied Patterns ===

=== Original Error Messages ===
Sometime I need to assert some predicate on all of an iterable, and for that the builtin functions `all`/`any` are great - but the failure messages aren't useful at all!
test_all_any.py:7: AssertionError

=== Test Verification Results ===
Tests Passed: False
