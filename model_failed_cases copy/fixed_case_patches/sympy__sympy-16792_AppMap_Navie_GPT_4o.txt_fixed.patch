=== Original Patch ===
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..6dc7bdbd78 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -455,15 +455,18 @@ def _declare_arg(self, arg):
             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'
             return proto + " = np.empty({shape})".format(shape=shape)
         else:
-            return proto + " = 0"
+            # Ensure scalar arguments are given appropriate initial values
+            return proto + " = 0.0" if proto.startswith('double') else proto + " = 0"
 
     def _call_arg(self, arg):
         if arg.dimensions:
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
-        elif isinstance(arg, ResultBase):
+        elif isinstance(arg, (ResultBase, OutputArgument)):
             return "&{0}".format(self._string_var(arg.name))
         else:
+            if isinstance(arg, InputArgument) and len(arg.dimensions) > 0 and arg.get_datatype('c').startswith('double'):
+                return "<{0}*> &{1}".format(t, self._string_var(arg.name))    
             return self._string_var(arg.name)
 
     def _string_var(self, var):

=== Fixed Patch ===
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..6dc7bdbd78 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -455,15 +455,18 @@ def _declare_arg(self, arg):
             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'
             return proto + " = np.empty({shape})".format(shape=shape)
         else:
-            return proto + " = 0"
+            # Ensure scalar arguments are given appropriate initial values
+return proto + ' = 0.0' if proto.startswith('double') else proto + ' = 0'
 
     def _call_arg(self, arg):
         if arg.dimensions:
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
-        elif isinstance(arg, ResultBase):
+        elif isinstance(arg, (ResultBase, OutputArgument)):
             return "&{0}".format(self._string_var(arg.name))
         else:
+            if isinstance(arg, InputArgument) and len(arg.dimensions) > 0 and arg.get_datatype('c').startswith('double'):
+return '<{0}*> &{1}'.format(t, self._string_var(arg.name))
             return self._string_var(arg.name)
 
     def _string_var(self, var):

=== Applied Patterns ===

=== Original Error Messages ===
autowrap with cython backend fails when array arguments do not appear in wrapped expr
This should of course return `1.0` but instead fails with:
TypeError: only size-1 arrays can be converted to Python scalars
A little inspection reveals that this is because the corresponding C function is generated with an incorrect signature:
I've found that this error won't occur so long as `expr` depends at least in part on each argument. For example this slight modification of the above counterexample works perfectly:
# returns 1.0 as expected, without failure

=== Test Verification Results ===
Tests Passed: False
