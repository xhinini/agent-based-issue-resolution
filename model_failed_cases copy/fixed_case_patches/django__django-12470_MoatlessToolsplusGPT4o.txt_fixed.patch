=== Original Patch ===
diff --git a/django/db/models/base.py b/django/db/models/base.py
index b2a60629c9..2b54fd6da6 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -143,11 +143,10 @@ class ModelBase(type):
                 # Non-abstract child classes inherit some attributes from their
                 # non-abstract parent (unless an ABC comes before it in the
                 # method resolution order).
-                if not hasattr(meta, 'ordering'):
+                if not hasattr(meta, 'ordering') or not meta.ordering:
                     new_class._meta.ordering = base_meta.ordering
                 if not hasattr(meta, 'get_latest_by'):
                     new_class._meta.get_latest_by = base_meta.get_latest_by
-
         is_proxy = new_class._meta.proxy
 
         # If the model is a proxy, ensure that the base class
diff --git a/django/db/models/options.py b/django/db/models/options.py
index f027a74976..c2febc6082 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -82,7 +82,7 @@ class Options:
         self.verbose_name = None
         self.verbose_name_plural = None
         self.db_table = ''
-        self.ordering = []
+        self.ordering = list(getattr(meta, 'ordering', []))
         self._ordering_clash = False
         self.indexes = []
         self.constraints = []
@@ -93,40 +93,28 @@ class Options:
         self.permissions = []
         self.object_name = None
         self.app_label = app_label
-        self.get_latest_by = None
-        self.order_with_respect_to = None
+        self.get_latest_by = getattr(meta, 'get_latest_by', None)
+        self.order_with_respect_to = getattr(meta, 'order_with_respect_to', None)
         self.db_tablespace = settings.DEFAULT_TABLESPACE
         self.required_db_features = []
         self.required_db_vendor = None
         self.meta = meta
         self.pk = None
         self.auto_field = None
-        self.abstract = False
-        self.managed = True
-        self.proxy = False
-        # For any class that is a proxy (including automatically created
-        # classes for deferred object loading), proxy_for_model tells us
-        # which class this model is proxying. Note that proxy_for_model
-        # can create a chain of proxy models. For non-proxy models, the
-        # variable is always None.
+        self.abstract = getattr(meta, 'abstract', False)
+        self.managed = getattr(meta, 'managed', True)
+        self.proxy = getattr(meta, 'proxy', False)
         self.proxy_for_model = None
-        # For any non-abstract class, the concrete class is the model
-        # in the end of the proxy_for_model chain. In particular, for
-        # concrete models, the concrete_model is always the class itself.
         self.concrete_model = None
         self.swappable = None
         self.parents = {}
         self.auto_created = False
 
-        # List of all lookups defined in ForeignKey 'limit_choices_to' options
-        # from *other* models. Needed for some admin checks. Internal use only.
         self.related_fkey_lookups = []
 
-        # A custom app registry to use, if you're making a separate model set.
         self.apps = self.default_apps
 
-        self.default_related_name = None
-
+        self.default_related_name = getattr(meta, 'default_related_name', None)
     @property
     def label(self):
         return '%s.%s' % (self.app_label, self.object_name)

=== Fixed Patch ===
diff --git a/django/db/models/base.py b/django/db/models/base.py
index b2a60629c9..2b54fd6da6 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -143,11 +143,10 @@ class ModelBase(type):
                 # Non-abstract child classes inherit some attributes from their
                 # non-abstract parent (unless an ABC comes before it in the
                 # method resolution order).
-                if not hasattr(meta, 'ordering'):
+                if not hasattr(meta, 'ordering') or not meta.ordering:
                     new_class._meta.ordering = base_meta.ordering
                 if not hasattr(meta, 'get_latest_by'):
                     new_class._meta.get_latest_by = base_meta.get_latest_by
-
         is_proxy = new_class._meta.proxy
 
         # If the model is a proxy, ensure that the base class
diff --git a/django/db/models/options.py b/django/db/models/options.py
index f027a74976..c2febc6082 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -82,7 +82,7 @@ class Options:
         self.verbose_name = None
         self.verbose_name_plural = None
         self.db_table = ''
-        self.ordering = []
+self.ordering = list(getattr(meta, 'ordering', []))
         self._ordering_clash = False
         self.indexes = []
         self.constraints = []
@@ -93,40 +93,28 @@ class Options:
         self.permissions = []
         self.object_name = None
         self.app_label = app_label
-        self.get_latest_by = None
-        self.order_with_respect_to = None
+self.get_latest_by = getattr(meta, 'get_latest_by', None)
+self.order_with_respect_to = getattr(meta, 'order_with_respect_to', None)
         self.db_tablespace = settings.DEFAULT_TABLESPACE
         self.required_db_features = []
         self.required_db_vendor = None
         self.meta = meta
         self.pk = None
         self.auto_field = None
-        self.abstract = False
-        self.managed = True
-        self.proxy = False
-        # For any class that is a proxy (including automatically created
-        # classes for deferred object loading), proxy_for_model tells us
-        # which class this model is proxying. Note that proxy_for_model
-        # can create a chain of proxy models. For non-proxy models, the
-        # variable is always None.
+self.abstract = getattr(meta, 'abstract', False)
+self.managed = getattr(meta, 'managed', True)
+self.proxy = getattr(meta, 'proxy', False)
         self.proxy_for_model = None
-        # For any non-abstract class, the concrete class is the model
-        # in the end of the proxy_for_model chain. In particular, for
-        # concrete models, the concrete_model is always the class itself.
         self.concrete_model = None
         self.swappable = None
         self.parents = {}
         self.auto_created = False
 
-        # List of all lookups defined in ForeignKey 'limit_choices_to' options
-        # from *other* models. Needed for some admin checks. Internal use only.
         self.related_fkey_lookups = []
 
-        # A custom app registry to use, if you're making a separate model set.
         self.apps = self.default_apps
 
-        self.default_related_name = None
-
+self.default_related_name = getattr(meta, 'default_related_name', None)
     @property
     def label(self):
         return '%s.%s' % (self.app_label, self.object_name)

=== Applied Patterns ===

=== Original Error Messages ===
AssertionError: Sequences differ: <QuerySet [<Parent: Parent object (1)>, <Parent: Parent object (2)>]> != [<Parent: Parent object (2)>, <Parent: Parent object (1)>] First differing element 0: <Parent: Parent object (1)> <Parent: Parent object (2)> - <QuerySet [<Parent: Parent object (1)>, <Parent: Parent object (2)>]> ? ----------                         ^                            ^   - + [<Parent: Parent object (2)>, <Parent: Parent object (1)>] ?                          ^                            ^ ---------------------------------------------------------------------- Ran 34 tests in 0.073s FAILED (failures=1) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... Testing against Django installed in '/testbed/django' Importing application model_inheritance Skipping setup of unused database(s): other. Operations to perform: Synchronize unmigrated apps: auth, contenttypes, messages, model_inheritance, sessions, staticfiles Apply all migrations: admin, sites Synchronizing apps without migrations: Creating tables... Creating table django_content_type Creating table auth_permission Creating table auth_group Creating table auth_user Creating table django_session Creating table model_inheritance_worker Creating table model_inheritance_student Creating table model_inheritance_post Creating table model_inheritance_comment Creating table model_inheritance_link Creating table model_inheritance_chef Creating table model_inheritance_place Creating table my_restaurant Creating table model_inheritance_italianrestaurant Creating table model_inheritance_supplier Creating table model_inheritance_parkinglot Creating table model_inheritance_title Creating table model_inheritance_mixinmodel Creating table model_inheritance_base Creating table model_inheritance_subbase Creating table model_inheritance_grandparent Creating table model_inheritance_parent Creating table model_inheritance_child Creating table model_inheritance_grandchild Running deferred SQL... Running migrations: Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying sites.0001_initial... OK Applying sites.0002_alter_domain_unique... OK System check identified no issues (0 silenced). + git checkout 142ab6846ac09d6d401e26fc8b6b988a583ac0f5 tests/model_inheritance/models.py tests/model_inheritance/tests.py Updated 2 paths from d12a79a5db

=== Test Verification Results ===
Tests Passed: False
