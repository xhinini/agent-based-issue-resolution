=== Original Patch ===
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..4a1f782e47 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -447,6 +447,11 @@ def _prototype_arg(self, arg):
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
         else:
+            if isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:
+                self._need_numpy = True
+                ndim = len(arg.dimensions)
+                mtype = np_types[t]
+                return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
             return "%s %s" % (t, self._string_var(arg.name))
 
     def _declare_arg(self, arg):

=== Fixed Patch ===
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..4a1f782e47 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -447,6 +447,11 @@ def _prototype_arg(self, arg):
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
         else:
+            if isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:
+self._need_numpy = True
+ndim = len(arg.dimensions)
+mtype = np_types[t]
+return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
             return "%s %s" % (t, self._string_var(arg.name))
 
     def _declare_arg(self, arg):

=== Applied Patterns ===

=== Original Error Messages ===
autowrap with cython backend fails when array arguments do not appear in wrapped expr
This should of course return `1.0` but instead fails with:
TypeError: only size-1 arrays can be converted to Python scalars
A little inspection reveals that this is because the corresponding C function is generated with an incorrect signature:
I've found that this error won't occur so long as `expr` depends at least in part on each argument. For example this slight modification of the above counterexample works perfectly:
# returns 1.0 as expected, without failure

=== Test Verification Results ===
Tests Passed: False
