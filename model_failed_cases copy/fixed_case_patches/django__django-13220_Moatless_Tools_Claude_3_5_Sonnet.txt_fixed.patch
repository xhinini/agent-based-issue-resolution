=== Original Patch ===
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..191d25d151 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -182,6 +182,29 @@ class ValidationError(Exception):
     def __repr__(self):
         return 'ValidationError(%s)' % self
 
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+            return self._compare_error_dict(self.error_dict, other.error_dict)
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+            return self._compare_error_list(self.error_list, other.error_list)
+        return (self.message == other.message and
+                self.code == other.code and
+                self.params == other.params)
+
+    @staticmethod
+    def _compare_error_dict(dict1, dict2):
+        if set(dict1.keys()) != set(dict2.keys()):
+            return False
+        return all(ValidationError._compare_error_list(dict1[k], dict2[k]) for k in dict1)
+
+    @staticmethod
+    def _compare_error_list(list1, list2):
+        if len(list1) != len(list2):
+            return False
+        return all(e1 == e2 for e1, e2 in zip(sorted(list1, key=str), sorted(list2, key=str)))
+
 
 class EmptyResultSet(Exception):
     """A database query predicate is impossible."""

=== Fixed Patch ===
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..191d25d151 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -182,6 +182,29 @@ class ValidationError(Exception):
     def __repr__(self):
         return 'ValidationError(%s)' % self
 
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+return NotImplemented
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+return self._compare_error_dict(self.error_dict, other.error_dict)
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+return self._compare_error_list(self.error_list, other.error_list)
+        return (self.message == other.message and
+                self.code == other.code and
+                self.params == other.params)
+
+    @staticmethod
+    def _compare_error_dict(dict1, dict2):
+        if set(dict1.keys()) != set(dict2.keys()):
+return False
+return all((ValidationError._compare_error_list(dict1[k], dict2[k]) for k in dict1))
+
+    @staticmethod
+    def _compare_error_list(list1, list2):
+        if len(list1) != len(list2):
+return False
+return all((e1 == e2 for e1, e2 in zip(sorted(list1, key=str), sorted(list2, key=str))))
+
 
 class EmptyResultSet(Exception):
     """A database query predicate is impossible."""

=== Applied Patterns ===

=== Original Error Messages ===
RecursionError: maximum recursion depth exceeded while calling a Python object ====================================================================== ERROR: test_eq_nested (test_exceptions.test_validation_error.TestValidationError) ----------------------------------------------------------------------
RecursionError: maximum recursion depth exceeded ====================================================================== ERROR: test_hash (test_exceptions.test_validation_error.TestValidationError) ----------------------------------------------------------------------
TypeError: unhashable type: 'ValidationError' ====================================================================== ERROR: test_hash_nested (test_exceptions.test_validation_error.TestValidationError) ----------------------------------------------------------------------
TypeError: unhashable type: 'ValidationError' ---------------------------------------------------------------------- Ran 5 tests in 0.009s FAILED (errors=4) Testing against Django installed in '/testbed/django' Importing application test_exceptions Skipping setup of unused database(s): default, other. System check identified no issues (0 silenced). + git checkout 16218c20606d8cd89c5393970c83da04598a3e04 tests/test_exceptions/test_validation_error.py Updated 1 path from c1b968f621
Allow ValidationErrors to equal each other when created identically
Currently ValidationErrors (django.core.exceptions.ValidationError) that have identical messages don't equal each other, which is counter-intuitive, and can make certain kinds of testing more complicated. Please add an __eq__ method that allows two ValidationErrors to be compared.
Ideally, this would be more than just a simple self.messages == other.messages. It would be most helpful if the comparison were independent of the order in which errors were raised in a field or in non_field_errors.

=== Test Verification Results ===
Tests Passed: False
