=== Original Patch ===
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..227797cdf7 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -181,11 +181,100 @@ class ValidationError(Exception):
 
     def __repr__(self):
         return 'ValidationError(%s)' % self
+class ValidationError(Exception):
+    """An error while validating data."""
+    def __init__(self, message, code=None, params=None):
+        """
+        The `message` argument can be a single error, a list of errors, or a
+        dictionary that maps field names to lists of errors. What we define as
+        an "error" can be either a simple string or an instance of
+        ValidationError with its message attribute set, and what we define as
+        list or dictionary can be an actual `list` or `dict` or an instance
+        of ValidationError with its `error_list` or `error_dict` attribute set.
+        """
+        super().__init__(message, code, params)
 
+        if isinstance(message, ValidationError):
+            if hasattr(message, 'error_dict'):
+                message = message.error_dict
+            elif not hasattr(message, 'message'):
+                message = message.error_list
+            else:
+                message, code, params = message.message, message.code, message.params
 
-class EmptyResultSet(Exception):
-    """A database query predicate is impossible."""
-    pass
+        if isinstance(message, dict):
+            self.error_dict = {}
+            for field, messages in message.items():
+                if not isinstance(messages, ValidationError):
+                    messages = ValidationError(messages)
+                self.error_dict[field] = messages.error_list
+
+        elif isinstance(message, list):
+            self.error_list = []
+            for message in message:
+                # Normalize plain strings to instances of ValidationError.
+                if not isinstance(message, ValidationError):
+                    message = ValidationError(message)
+                if hasattr(message, 'error_dict'):
+                    self.error_list.extend(sum(message.error_dict.values(), []))
+                else:
+                    self.error_list.extend(message.error_list)
+
+        else:
+            self.message = message
+            self.code = code
+            self.params = params
+            self.error_list = [self]
+
+    @property
+    def message_dict(self):
+        # Trigger an AttributeError if this ValidationError
+        # doesn't have an error_dict.
+        getattr(self, 'error_dict')
+
+        return dict(self)
+
+    @property
+    def messages(self):
+        if hasattr(self, 'error_dict'):
+            return sum(dict(self).values(), [])
+        return list(self)
+
+    def update_error_dict(self, error_dict):
+        if hasattr(self, 'error_dict'):
+            for field, error_list in self.error_dict.items():
+                error_dict.setdefault(field, []).extend(error_list)
+        else:
+            error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)
+        return error_dict
+
+    def __iter__(self):
+        if hasattr(self, 'error_dict'):
+            for field, errors in self.error_dict.items():
+                yield field, list(ValidationError(errors))
+        else:
+            for error in self.error_list:
+                message = error.message
+                if error.params:
+                    message %= error.params
+                yield str(message)
+
+    def __str__(self):
+        if hasattr(self, 'error_dict'):
+            return repr(dict(self))
+        return repr(list(self))
+
+    def __repr__(self):
+        return 'ValidationError(%s)' % self
+
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return False
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+            return self.error_dict == other.error_dict
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+            return sorted(self.error_list, key=str) == sorted(other.error_list, key=str)
+        return False
 
 
 class SynchronousOnlyOperation(Exception):

=== Fixed Patch ===
diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..227797cdf7 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -181,11 +181,100 @@ class ValidationError(Exception):
 
     def __repr__(self):
         return 'ValidationError(%s)' % self
+class ValidationError(Exception):
+'An error while validating data.'
+    def __init__(self, message, code=None, params=None):
+        """
+        The `message` argument can be a single error, a list of errors, or a
+        dictionary that maps field names to lists of errors. What we define as
+        an "error" can be either a simple string or an instance of
+        ValidationError with its message attribute set, and what we define as
+        list or dictionary can be an actual `list` or `dict` or an instance
+        of ValidationError with its `error_list` or `error_dict` attribute set.
+        """
+super().__init__(message, code, params)
 
+        if isinstance(message, ValidationError):
+            if hasattr(message, 'error_dict'):
+message = message.error_dict
+            elif not hasattr(message, 'message'):
+message = message.error_list
+            else:
+message, code, params = (message.message, message.code, message.params)
 
-class EmptyResultSet(Exception):
-    """A database query predicate is impossible."""
-    pass
+        if isinstance(message, dict):
+self.error_dict = {}
+            for field, messages in message.items():
+                if not isinstance(messages, ValidationError):
+messages = ValidationError(messages)
+self.error_dict[field] = messages.error_list
+
+        elif isinstance(message, list):
+self.error_list = []
+            for message in message:
+                # Normalize plain strings to instances of ValidationError.
+                if not isinstance(message, ValidationError):
+message = ValidationError(message)
+                if hasattr(message, 'error_dict'):
+self.error_list.extend(sum(message.error_dict.values(), []))
+                else:
+self.error_list.extend(message.error_list)
+
+        else:
+self.message = message
+self.code = code
+self.params = params
+self.error_list = [self]
+
+    @property
+    def message_dict(self):
+        # Trigger an AttributeError if this ValidationError
+        # doesn't have an error_dict.
+getattr(self, 'error_dict')
+
+return dict(self)
+
+    @property
+    def messages(self):
+        if hasattr(self, 'error_dict'):
+return sum(dict(self).values(), [])
+return list(self)
+
+    def update_error_dict(self, error_dict):
+        if hasattr(self, 'error_dict'):
+            for field, error_list in self.error_dict.items():
+error_dict.setdefault(field, []).extend(error_list)
+        else:
+error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)
+return error_dict
+
+    def __iter__(self):
+        if hasattr(self, 'error_dict'):
+            for field, errors in self.error_dict.items():
+yield (field, list(ValidationError(errors)))
+        else:
+            for error in self.error_list:
+message = error.message
+                if error.params:
+message %= error.params
+yield str(message)
+
+    def __str__(self):
+        if hasattr(self, 'error_dict'):
+return repr(dict(self))
+return repr(list(self))
+
+    def __repr__(self):
+return 'ValidationError(%s)' % self
+
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+return False
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+return self.error_dict == other.error_dict
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+return sorted(self.error_list, key=str) == sorted(other.error_list, key=str)
+return False
 
 
 class SynchronousOnlyOperation(Exception):

=== Applied Patterns ===

=== Original Error Messages ===
ImportError: cannot import name 'EmptyResultSet' + git checkout 16218c20606d8cd89c5393970c83da04598a3e04 tests/test_exceptions/test_validation_error.py Updated 1 path from c1b968f621
Allow ValidationErrors to equal each other when created identically
Currently ValidationErrors (django.core.exceptions.ValidationError) that have identical messages don't equal each other, which is counter-intuitive, and can make certain kinds of testing more complicated. Please add an __eq__ method that allows two ValidationErrors to be compared.
Ideally, this would be more than just a simple self.messages == other.messages. It would be most helpful if the comparison were independent of the order in which errors were raised in a field or in non_field_errors.

=== Test Verification Results ===
Tests Passed: False
