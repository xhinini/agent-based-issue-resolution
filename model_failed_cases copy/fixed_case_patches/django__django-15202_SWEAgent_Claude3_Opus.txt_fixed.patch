=== Original Patch ===
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..f200919974 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -678,7 +678,15 @@ class URLField(CharField):
     def __init__(self, **kwargs):
         super().__init__(strip=True, **kwargs)
 
+    def clean(self, value):
+        return super().clean(value)
+
     def to_python(self, value):
+        try:
+            return super().to_python(value)
+        except ValueError as e:
+            raise ValidationError(self.error_messages['invalid'], code='invalid') from e
+        
 
         def split_url(url):
             """
@@ -687,10 +695,9 @@ class URLField(CharField):
             """
             try:
                 return list(urlsplit(url))
-            except ValueError:
-                # urlparse.urlsplit can raise a ValueError with some
-                # misformatted URLs.
-                raise ValidationError(self.error_messages['invalid'], code='invalid')
+            except ValueError as e:
+                # urlsplit can raise a ValueError with some misformatted URLs.
+                raise ValidationError(self.error_messages['invalid'], code='invalid') from e
 
         value = super().to_python(value)
         if value:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5baf155ef5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,3 @@
+from django import forms
+
+forms.URLField().clean('////]@N.AN')

=== Fixed Patch ===
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..f200919974 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -678,7 +678,15 @@ class URLField(CharField):
     def __init__(self, **kwargs):
         super().__init__(strip=True, **kwargs)
 
+    def clean(self, value):
+return super().clean(value)
+
     def to_python(self, value):
+        try:
+return super().to_python(value)
+        except ValueError as e:
+raise ValidationError(self.error_messages['invalid'], code='invalid') from e
+        
 
         def split_url(url):
             """
@@ -687,10 +695,9 @@ class URLField(CharField):
             """
             try:
                 return list(urlsplit(url))
-            except ValueError:
-                # urlparse.urlsplit can raise a ValueError with some
-                # misformatted URLs.
-                raise ValidationError(self.error_messages['invalid'], code='invalid')
+            except ValueError as e:
+                # urlsplit can raise a ValueError with some misformatted URLs.
+raise ValidationError(self.error_messages['invalid'], code='invalid') from e
 
         value = super().to_python(value)
         if value:
diff --git a/reproduce_error.py b/reproduce_error.py
index 0000000000..5baf155ef5
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,3 @@
+from django import forms
+
+forms.URLField().clean('////]@N.AN')

=== Applied Patterns ===

=== Original Error Messages ===
-            except ValueError: -                # urlparse.urlsplit can raise a ValueError with some -                # misformatted URLs. -                raise ValidationError(self.error_messages['invalid'], code='invalid') +            except ValueError as e: +                # urlsplit can raise a ValueError with some misformatted URLs. +                raise ValidationError(self.error_messages['invalid'], code='invalid') from e value = super().to_python(value) if value: + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z x ']' ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1='(testbed) ' +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=3 +++ CONDA_SHLVL=3 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=4 ++ CONDA_SHLVL=4 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_3=/opt/miniconda3 ++ CONDA_PREFIX_3=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + python -m pip install -e . Obtaining file:///testbed Installing build dependencies: started Installing build dependencies: finished with status 'done' Checking if build backend supports build_editable: started Checking if build backend supports build_editable: finished with status 'done' Getting requirements to build editable: started Getting requirements to build editable: finished with status 'done' Preparing editable metadata (pyproject.toml): started Preparing editable metadata (pyproject.toml): finished with status 'done' Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211220054634) (3.8.1) Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211220054634) (0.5.1) Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20211220054634) (4.12.2) Building wheels for collected packages: Django Building editable for Django (pyproject.toml): started Building editable for Django (pyproject.toml): finished with status 'done' Created wheel for Django: filename=Django-4.1.dev20211220054634-0.editable-py3-none-any.whl size=26867 sha256=f406c272d4c0c56e18614511826eb95e46043ad8e55ea8313dde733c9cec8039 Stored in directory: /tmp/pip-ephem-wheel-cache-tfvypt5r/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4 Successfully built Django Installing collected packages: Django Attempting uninstall: Django Found existing installation: Django 4.1.dev20211220054634 Uninstalling Django-4.1.dev20211220054634: Successfully uninstalled Django-4.1.dev20211220054634 Successfully installed Django-4.1.dev20211220054634 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv + git checkout 4fd3044ca0135da903a70dfb66992293f529ecf1 tests/forms_tests/field_tests/test_urlfield.py Updated 0 paths from 5884d724f0 + git apply -v - Checking patch tests/forms_tests/field_tests/test_urlfield.py... Applied patch tests/forms_tests/field_tests/test_urlfield.py cleanly. + ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 forms_tests.field_tests.test_urlfield test_urlfield_clean (forms_tests.field_tests.test_urlfield.URLFieldTest) ... test_urlfield_clean_invalid (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_clean_not_required (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_clean_required (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_strip_on_none_value (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_unable_to_set_strip_kwarg (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_widget (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_widget_max_min_length (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok ====================================================================== ERROR: test_urlfield_clean (forms_tests.field_tests.test_urlfield.URLFieldTest) (url='valid-with-hyphens.com') ----------------------------------------------------------------------
django.core.exceptions.ValidationError: ['Enter a valid URL.'] ====================================================================== ERROR: test_urlfield_clean (forms_tests.field_tests.test_urlfield.URLFieldTest) (url='subdomain.domain.com') ----------------------------------------------------------------------
django.core.exceptions.ValidationError: ['Enter a valid URL.'] ====================================================================== ERROR: test_urlfield_clean (forms_tests.field_tests.test_urlfield.URLFieldTest) (url='www.example.com/s/http://code.djangoproject.com/ticket/13804') ----------------------------------------------------------------------
django.core.exceptions.ValidationError: ['Enter a valid URL.'] ---------------------------------------------------------------------- Ran 8 tests in 0.060s FAILED (errors=3) Testing against Django installed in '/testbed/django' Importing application forms_tests Found 8 test(s). Skipping setup of unused database(s): default, other. System check identified no issues (0 silenced). + git checkout 4fd3044ca0135da903a70dfb66992293f529ecf1 tests/forms_tests/field_tests/test_urlfield.py Updated 1 path from 5884d724f0
URLField throws ValueError instead of ValidationError on clean
ValueError: Invalid IPv6 URL

=== Test Verification Results ===
Tests Passed: False
