=== Original Patch ===
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 78c4f47b5b..c4ce51277e 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -473,13 +473,18 @@ class Query(BaseExpression):
                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
                     del inner_query.annotations[alias]
                     annotation_select_mask.remove(alias)
-                # Make sure the annotation_select wont use cached results.
-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)
-            if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
-                # In case of Model.objects[0:3].count(), there would be no
-                # field selected in the inner query, yet we must use a subquery.
-                # So, make sure at least one field is selected.
-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
+                # If alias is reused in select fields, add a distinct one
+                    if alias in [column.alias for column in outer_query.select]:
+                        new_alias = alias + '_subq'
+                        outer_query.annotations[new_alias] = outer_query.annotations.pop(alias)
+                        alias = new_alias
+                    # Make sure the annotation_select wont use cached results.
+                    inner_query.set_annotation_mask(inner_query.annotation_select_mask)
+                if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
+                    # In case of Model.objects[0:3].count(), there would be no
+                    # field selected in the inner query, yet we must use a subquery.
+                    # So, make sure at least one field is selected.
+                    inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
             try:
                 outer_query.add_subquery(inner_query, using)
             except EmptyResultSet:

=== Fixed Patch ===
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 78c4f47b5b..c4ce51277e 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -473,13 +473,18 @@ class Query(BaseExpression):
                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)
                     del inner_query.annotations[alias]
                     annotation_select_mask.remove(alias)
-                # Make sure the annotation_select wont use cached results.
-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)
-            if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
-                # In case of Model.objects[0:3].count(), there would be no
-                # field selected in the inner query, yet we must use a subquery.
-                # So, make sure at least one field is selected.
-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
+                # If alias is reused in select fields, add a distinct one
+                    if alias in [column.alias for column in outer_query.select]:
+new_alias = alias + '_subq'
+outer_query.annotations[new_alias] = outer_query.annotations.pop(alias)
+alias = new_alias
+                    # Make sure the annotation_select wont use cached results.
+inner_query.set_annotation_mask(inner_query.annotation_select_mask)
+                if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
+                    # In case of Model.objects[0:3].count(), there would be no
+                    # field selected in the inner query, yet we must use a subquery.
+                    # So, make sure at least one field is selected.
+inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
             try:
                 outer_query.add_subquery(inner_query, using)
             except EmptyResultSet:

=== Applied Patterns ===

=== Original Error Messages ===
sqlite3.OperationalError: ambiguous column name: rating The above exception was the direct cause of the following exception:
django.db.utils.OperationalError: ambiguous column name: rating ---------------------------------------------------------------------- Ran 67 tests in 0.149s FAILED (errors=1) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... + git checkout 895f28f9cbed817c00ab68770433170d83132d90 tests/aggregation/models.py tests/aggregation/tests.py Updated 2 paths from d7dee2ad87
Django 3.0: "GROUP BY" clauses error with tricky field annotation
null=True,
on_delete=models.SET_NULL,
On Django 3.0.4 we have an error
django.db.utils.ProgrammingError: column reference "status" is ambiguous

=== Test Verification Results ===
Tests Passed: False
