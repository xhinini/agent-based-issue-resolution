=== Original Patch ===
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index d912cd7d5..feb319ad4 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -47,7 +47,6 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
         else:
             fullname = signature['fullname']
     except KeyError:
-        # signature node does not have valid context info for the target object
         return
 
     annotations = app.env.temp_data.get('annotations', {})
@@ -72,6 +71,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
                     field_list, annotations[fullname], force_rtype=False
                 )
 
+        # Remove duplicated *args and **kwargs
+        for field_list in field_lists:
+            fields_to_remove = []
+            for field in field_list:
+                field_name = field[0].astext()
+                if field_name in ('param *args', 'param **kwargs', 'type *args', 'type **kwargs'):
+                    fields_to_remove.append(field)
+            for field in fields_to_remove:
+                field_list.remove(field)
+
 
 def insert_field_list(node: Element) -> nodes.field_list:
     field_list = nodes.field_list()
@@ -95,11 +104,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
         parts = re.split(' +', field_name)
         if parts[0] == 'param':
             if len(parts) == 2:
-                # :param xxx:
                 arg = arguments.setdefault(parts[1], {})
                 arg['param'] = True
             elif len(parts) > 2:
-                # :param xxx yyy:
                 name = ' '.join(parts[2:])
                 arg = arguments.setdefault(name, {})
                 arg['param'] = True
@@ -116,12 +123,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
             continue
 
         arg = arguments.get(name, {})
-        if not arg.get('type'):
+        if not arg.get('type') and name not in ('*args', '**kwargs'):
             field = nodes.field()
             field += nodes.field_name('', 'type ' + name)
             field += nodes.field_body('', nodes.paragraph('', annotation))
             node += field
-        if not arg.get('param'):
+        if not arg.get('param') and name not in ('*args', '**kwargs'):
             field = nodes.field()
             field += nodes.field_name('', 'param ' + name)
             field += nodes.field_body('', nodes.paragraph('', ''))
@@ -168,7 +175,7 @@ def augment_descriptions_with_types(
 
     # Add 'type' for parameters with a description but no declared type.
     for name in annotations:
-        if name in ('return', 'returns'):
+        if name in ('return', 'returns', '*args', '**kwargs'):
             continue
         if name in has_description and name not in has_type:
             field = nodes.field()

=== Fixed Patch ===
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index d912cd7d5..feb319ad4 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -47,7 +47,6 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
         else:
             fullname = signature['fullname']
     except KeyError:
-        # signature node does not have valid context info for the target object
         return
 
     annotations = app.env.temp_data.get('annotations', {})
@@ -72,6 +71,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
                     field_list, annotations[fullname], force_rtype=False
                 )
 
+        # Remove duplicated *args and **kwargs
+        for field_list in field_lists:
+fields_to_remove = []
+            for field in field_list:
+field_name = field[0].astext()
+                if field_name in ('param *args', 'param **kwargs', 'type *args', 'type **kwargs'):
+fields_to_remove.append(field)
+            for field in fields_to_remove:
+field_list.remove(field)
+
 
 def insert_field_list(node: Element) -> nodes.field_list:
     field_list = nodes.field_list()
@@ -95,11 +104,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
         parts = re.split(' +', field_name)
         if parts[0] == 'param':
             if len(parts) == 2:
-                # :param xxx:
                 arg = arguments.setdefault(parts[1], {})
                 arg['param'] = True
             elif len(parts) > 2:
-                # :param xxx yyy:
                 name = ' '.join(parts[2:])
                 arg = arguments.setdefault(name, {})
                 arg['param'] = True
@@ -116,12 +123,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
             continue
 
         arg = arguments.get(name, {})
-        if not arg.get('type'):
+        if not arg.get('type') and name not in ('*args', '**kwargs'):
             field = nodes.field()
             field += nodes.field_name('', 'type ' + name)
             field += nodes.field_body('', nodes.paragraph('', annotation))
             node += field
-        if not arg.get('param'):
+        if not arg.get('param') and name not in ('*args', '**kwargs'):
             field = nodes.field()
             field += nodes.field_name('', 'param ' + name)
             field += nodes.field_body('', nodes.paragraph('', ''))
@@ -168,7 +175,7 @@ def augment_descriptions_with_types(
 
     # Add 'type' for parameters with a description but no declared type.
     for name in annotations:
-        if name in ('return', 'returns'):
+        if name in ('return', 'returns', '*args', '**kwargs'):
             continue
         if name in has_description and name not in has_type:
             field = nodes.field()

=== Applied Patterns ===

=== Original Error Messages ===


=== Test Verification Results ===
Tests Passed: False
