=== Original Patch ===
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 63ca817355..6d58ce8e93 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -96,36 +96,24 @@ class SQLCompiler:
             return []
         expressions = []
         if self.query.group_by is not True:
-            # If the group by is set to a list (by .values() call most likely),
-            # then we need to add everything in it to the GROUP BY clause.
-            # Backwards compatibility hack for setting query.group_by. Remove
-            # when  we have public API way of forcing the GROUP BY clause.
-            # Converts string references to expressions.
             for expr in self.query.group_by:
                 if not hasattr(expr, 'as_sql'):
                     expressions.append(self.query.resolve_ref(expr))
                 else:
                     expressions.append(expr)
-        # Note that even if the group_by is set, it is only the minimal
-        # set to group by. So, we need to add cols in select, order_by, and
-        # having into the select in any case.
         ref_sources = {
             expr.source for expr in expressions if isinstance(expr, Ref)
         }
         for expr, _, _ in select:
-            # Skip members of the select clause that are already included
-            # by reference.
             if expr in ref_sources:
                 continue
-            cols = expr.get_group_by_cols()
+            cols = expr.get_group_by_cols(alias="subquery")
             for col in cols:
                 expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
-            # Skip References to the select clause, as all expressions in the
-            # select clause are already part of the group by.
             if not is_ref:
-                expressions.extend(expr.get_group_by_cols())
-        having_group_by = self.having.get_group_by_cols() if self.having else ()
+                expressions.extend(expr.get_group_by_cols(alias="subquery"))
+        having_group_by = self.having.get_group_by_cols(alias="subquery") if self.having else ()
         for expr in having_group_by:
             expressions.append(expr)
         result = []
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 78c4f47b5b..426737dd4b 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1940,9 +1940,7 @@ class Query(BaseExpression):
                     warnings.warn(msg, category=RemovedInDjango40Warning)
                     group_by_cols = annotation.get_group_by_cols()
                 else:
-                    if not allow_aliases:
-                        alias = None
-                    group_by_cols = annotation.get_group_by_cols(alias=alias)
+                    group_by_cols = annotation.get_group_by_cols(alias=alias if allow_aliases else None)
                 group_by.extend(group_by_cols)
         self.group_by = tuple(group_by)

=== Fixed Patch ===
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 63ca817355..6d58ce8e93 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -96,36 +96,24 @@ class SQLCompiler:
             return []
         expressions = []
         if self.query.group_by is not True:
-            # If the group by is set to a list (by .values() call most likely),
-            # then we need to add everything in it to the GROUP BY clause.
-            # Backwards compatibility hack for setting query.group_by. Remove
-            # when  we have public API way of forcing the GROUP BY clause.
-            # Converts string references to expressions.
             for expr in self.query.group_by:
                 if not hasattr(expr, 'as_sql'):
                     expressions.append(self.query.resolve_ref(expr))
                 else:
                     expressions.append(expr)
-        # Note that even if the group_by is set, it is only the minimal
-        # set to group by. So, we need to add cols in select, order_by, and
-        # having into the select in any case.
         ref_sources = {
             expr.source for expr in expressions if isinstance(expr, Ref)
         }
         for expr, _, _ in select:
-            # Skip members of the select clause that are already included
-            # by reference.
             if expr in ref_sources:
                 continue
-            cols = expr.get_group_by_cols()
+cols = expr.get_group_by_cols(alias='subquery')
             for col in cols:
                 expressions.append(col)
         for expr, (sql, params, is_ref) in order_by:
-            # Skip References to the select clause, as all expressions in the
-            # select clause are already part of the group by.
             if not is_ref:
-                expressions.extend(expr.get_group_by_cols())
-        having_group_by = self.having.get_group_by_cols() if self.having else ()
+expressions.extend(expr.get_group_by_cols(alias='subquery'))
+having_group_by = self.having.get_group_by_cols(alias='subquery') if self.having else ()
         for expr in having_group_by:
             expressions.append(expr)
         result = []
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 78c4f47b5b..426737dd4b 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1940,9 +1940,7 @@ class Query(BaseExpression):
                     warnings.warn(msg, category=RemovedInDjango40Warning)
                     group_by_cols = annotation.get_group_by_cols()
                 else:
-                    if not allow_aliases:
-                        alias = None
-                    group_by_cols = annotation.get_group_by_cols(alias=alias)
+group_by_cols = annotation.get_group_by_cols(alias=alias if allow_aliases else None)
                 group_by.extend(group_by_cols)
         self.group_by = tuple(group_by)

=== Applied Patterns ===

=== Original Error Messages ===
sqlite3.OperationalError: ambiguous column name: rating The above exception was the direct cause of the following exception:
django.db.utils.OperationalError: ambiguous column name: rating ---------------------------------------------------------------------- Ran 67 tests in 0.141s FAILED (errors=1) Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')... Testing against Django installed in '/testbed/django' Importing application aggregation Skipping setup of unused database(s): other. Operations to perform: Synchronize unmigrated apps: aggregation, auth, contenttypes, messages, sessions, staticfiles Apply all migrations: admin, sites Synchronizing apps without migrations: Creating tables... Creating table django_content_type Creating table auth_permission Creating table auth_group Creating table auth_user Creating table django_session Creating table aggregation_author Creating table aggregation_publisher Creating table aggregation_book Creating table aggregation_store Running deferred SQL... Running migrations: Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying sites.0001_initial... OK Applying sites.0002_alter_domain_unique... OK System check identified no issues (0 silenced). + git checkout 895f28f9cbed817c00ab68770433170d83132d90 tests/aggregation/models.py tests/aggregation/tests.py Updated 2 paths from d7dee2ad87
Django 3.0: "GROUP BY" clauses error with tricky field annotation
null=True,
on_delete=models.SET_NULL,
On Django 3.0.4 we have an error
django.db.utils.ProgrammingError: column reference "status" is ambiguous

=== Test Verification Results ===
Tests Passed: False
