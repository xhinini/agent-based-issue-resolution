=== Original Patch ===
diff --git a/django/core/validators.py b/django/core/validators.py
index 72fbe15551..978d9eb3c7 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):
             if value:
                 try:
                     scheme, netloc, path, query, fragment = urlsplit(value)
-                except ValueError:  # for example, "Invalid IPv6 URL"
+                except (ValueError, IndexError):  # For example, "Invalid IPv6 URL"
                     raise ValidationError(self.message, code=self.code, params={'value': value})
                 try:
                     netloc = punycode(netloc)  # IDN -> ACE
@@ -124,7 +124,7 @@ class URLValidator(RegexValidator):
                 url = urlunsplit((scheme, netloc, path, query, fragment))
                 super().__call__(url)
             else:
-                raise
+                raise ValidationError(self.message, code=self.code, params={'value': value})
         else:
             # Now verify IPv6 in the netloc part
             host_match = re.search(r'^\[(.+)\](?::\d{1,5})?$', urlsplit(value).netloc)

=== Fixed Patch ===
diff --git a/django/core/validators.py b/django/core/validators.py
index 72fbe15551..978d9eb3c7 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):
             if value:
                 try:
                     scheme, netloc, path, query, fragment = urlsplit(value)
-                except ValueError:  # for example, "Invalid IPv6 URL"
+                except (ValueError, IndexError):  # For example, "Invalid IPv6 URL"
                     raise ValidationError(self.message, code=self.code, params={'value': value})
                 try:
                     netloc = punycode(netloc)  # IDN -> ACE
@@ -124,7 +124,7 @@ class URLValidator(RegexValidator):
                 url = urlunsplit((scheme, netloc, path, query, fragment))
                 super().__call__(url)
             else:
-                raise
+raise ValidationError(self.message, code=self.code, params={'value': value})
         else:
             # Now verify IPv6 in the netloc part
             host_match = re.search(r'^\[(.+)\](?::\d{1,5})?$', urlsplit(value).netloc)

=== Applied Patterns ===

=== Original Error Messages ===
-                except ValueError:  # for example, "Invalid IPv6 URL" +                except (ValueError, IndexError):  # For example, "Invalid IPv6 URL" raise ValidationError(self.message, code=self.code, params={'value': value}) try: netloc = punycode(netloc)  # IDN -> ACE @@ -124,7 +124,7 @@ class URLValidator(RegexValidator): url = urlunsplit((scheme, netloc, path, query, fragment)) super().__call__(url) else: -                raise +                raise ValidationError(self.message, code=self.code, params={'value': value}) else: # Now verify IPv6 in the netloc part host_match = re.search(r'^\[(.+)\](?::\d{1,5})?$', urlsplit(value).netloc) + source /opt/miniconda3/bin/activate ++ _CONDA_ROOT=/opt/miniconda3 ++ . /opt/miniconda3/etc/profile.d/conda.sh +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ '[' -z x ']' ++ conda activate ++ local cmd=activate ++ case "$cmd" in ++ __conda_activate activate ++ '[' -n '' ']' ++ local ask_conda +++ PS1='(testbed) ' +++ __conda_exe shell.posix activate +++ /opt/miniconda3/bin/conda shell.posix activate ++ ask_conda='PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ eval 'PS1='\''(base) '\'' export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3'\'' export CONDA_SHLVL='\''3'\'' export CONDA_DEFAULT_ENV='\''base'\'' export CONDA_PROMPT_MODIFIER='\''(base) '\'' export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' +++ PS1='(base) ' +++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin +++ export CONDA_PREFIX=/opt/miniconda3 +++ CONDA_PREFIX=/opt/miniconda3 +++ export CONDA_SHLVL=3 +++ CONDA_SHLVL=3 +++ export CONDA_DEFAULT_ENV=base +++ CONDA_DEFAULT_ENV=base +++ export 'CONDA_PROMPT_MODIFIER=(base) ' +++ CONDA_PROMPT_MODIFIER='(base) ' +++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed +++ export CONDA_EXE=/opt/miniconda3/bin/conda +++ CONDA_EXE=/opt/miniconda3/bin/conda +++ export _CE_M= +++ _CE_M= +++ export _CE_CONDA= +++ _CE_CONDA= +++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python +++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ __conda_hashr ++ '[' -n '' ']' ++ '[' -n '' ']' ++ hash -r + conda activate testbed + local cmd=activate + case "$cmd" in + __conda_activate activate testbed + '[' -n '' ']' + local ask_conda ++ PS1='(base) ' ++ __conda_exe shell.posix activate testbed ++ /opt/miniconda3/bin/conda shell.posix activate testbed + ask_conda='PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' + eval 'PS1='\''(testbed) '\'' export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\'' export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\'' export CONDA_SHLVL='\''4'\'' export CONDA_DEFAULT_ENV='\''testbed'\'' export CONDA_PROMPT_MODIFIER='\''(testbed) '\'' export CONDA_PREFIX_3='\''/opt/miniconda3'\'' export CONDA_EXE='\''/opt/miniconda3/bin/conda'\'' export _CE_M='\'''\'' export _CE_CONDA='\'''\'' export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''' ++ PS1='(testbed) ' ++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin ++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ CONDA_PREFIX=/opt/miniconda3/envs/testbed ++ export CONDA_SHLVL=4 ++ CONDA_SHLVL=4 ++ export CONDA_DEFAULT_ENV=testbed ++ CONDA_DEFAULT_ENV=testbed ++ export 'CONDA_PROMPT_MODIFIER=(testbed) ' ++ CONDA_PROMPT_MODIFIER='(testbed) ' ++ export CONDA_PREFIX_3=/opt/miniconda3 ++ CONDA_PREFIX_3=/opt/miniconda3 ++ export CONDA_EXE=/opt/miniconda3/bin/conda ++ CONDA_EXE=/opt/miniconda3/bin/conda ++ export _CE_M= ++ _CE_M= ++ export _CE_CONDA= ++ _CE_CONDA= ++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python ++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python + __conda_hashr + '[' -n '' ']' + '[' -n '' ']' + hash -r + python -m pip install -e . Obtaining file:///testbed Installing build dependencies: started Installing build dependencies: finished with status 'done' Checking if build backend supports build_editable: started Checking if build backend supports build_editable: finished with status 'done' Getting requirements to build editable: started Getting requirements to build editable: finished with status 'done' Preparing editable metadata (pyproject.toml): started Preparing editable metadata (pyproject.toml): finished with status 'done' Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211220054634) (3.8.1) Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211220054634) (0.5.1) Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20211220054634) (4.12.2) Building wheels for collected packages: Django Building editable for Django (pyproject.toml): started Building editable for Django (pyproject.toml): finished with status 'done' Created wheel for Django: filename=Django-4.1.dev20211220054634-0.editable-py3-none-any.whl size=26867 sha256=08c66e1635c4ce8e952ea3ece170cc35c852df87e86a36e8540cf5b3d58d8fe8 Stored in directory: /tmp/pip-ephem-wheel-cache-mra6391q/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4 Successfully built Django Installing collected packages: Django Attempting uninstall: Django Found existing installation: Django 4.1.dev20211220054634 Uninstalling Django-4.1.dev20211220054634: Successfully uninstalled Django-4.1.dev20211220054634 Successfully installed Django-4.1.dev20211220054634 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv + git checkout 4fd3044ca0135da903a70dfb66992293f529ecf1 tests/forms_tests/field_tests/test_urlfield.py Updated 0 paths from 5884d724f0 + git apply -v - Checking patch tests/forms_tests/field_tests/test_urlfield.py... Applied patch tests/forms_tests/field_tests/test_urlfield.py cleanly. + ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 forms_tests.field_tests.test_urlfield test_urlfield_clean (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_clean_invalid (forms_tests.field_tests.test_urlfield.URLFieldTest) ... test_urlfield_clean_not_required (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_clean_required (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_strip_on_none_value (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_unable_to_set_strip_kwarg (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_widget (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok test_urlfield_widget_max_min_length (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok ====================================================================== ERROR: test_urlfield_clean_invalid (forms_tests.field_tests.test_urlfield.URLFieldTest) (value='////]@N.AN') ----------------------------------------------------------------------
ValueError: Invalid IPv6 URL ====================================================================== ERROR: test_urlfield_clean_invalid (forms_tests.field_tests.test_urlfield.URLFieldTest) (value='#@A.bO') ----------------------------------------------------------------------
TypeError: object of type 'NoneType' has no len() ---------------------------------------------------------------------- Ran 8 tests in 0.061s FAILED (errors=2) Testing against Django installed in '/testbed/django' Importing application forms_tests Found 8 test(s). Skipping setup of unused database(s): default, other. System check identified no issues (0 silenced). + git checkout 4fd3044ca0135da903a70dfb66992293f529ecf1 tests/forms_tests/field_tests/test_urlfield.py Updated 1 path from 5884d724f0
URLField throws ValueError instead of ValidationError on clean
ValueError: Invalid IPv6 URL

=== Test Verification Results ===
Tests Passed: False
