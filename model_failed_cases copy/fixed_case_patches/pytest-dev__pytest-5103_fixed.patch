=== Original Patch ===
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 4810cdd..8140a29 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -969,6 +969,9 @@ warn_explicit(
         visit `ast.Call` nodes on Python3.5 and after
         """
         new_func, func_expl = self.visit(call.func)
+        if isinstance(call.func, ast.Name) and call.func.id in {"all", "any"}:
+            return self._visit_all_any_call(new_func, func_expl, call)
+        
         arg_expls = []
         new_args = []
         new_kwargs = []
@@ -991,6 +994,39 @@ warn_explicit(
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl
 
+    def _visit_all_any_call(self, new_func, func_expl, call):
+        """Special handling for `all` and `any` calls to unroll the iterable."""
+        arg = call.args[0]
+        res_var = self.variable()
+        expl_list = self.assign(ast.List([], ast.Load()))
+        app = ast.Attribute(expl_list, "append", ast.Load())
+
+        self.push_format_context()
+        body = save = self.statements
+        fail_save = self.on_failure
+        
+        loop_var = self.variable()
+        for_body = []
+        self.statements = for_body
+        self.on_failure = for_body
+
+        self.push_format_context()
+        res, expl = self.visit(arg)
+        self.statements.append(ast.Assign([ast.Name(loop_var, ast.Store())], res))
+        expl_format = self.pop_format_context(ast.Str(expl))
+        call = ast.Call(app, [expl_format], [])
+        self.on_failure.append(ast.Expr(call))
+        
+        self.statements = save
+        self.on_failure = fail_save
+
+        loop = ast.For(target=ast.Name(loop_var, ast.Store()), iter=res, body=for_body, orelse=[])
+        self.statements.append(loop)
+        
+        expl_template = self.helper("_format_all_any", expl_list, ast.Str(new_func.id))
+        expl = self.pop_format_context(expl_template)
+        return ast.Call(new_func, [res], call.keywords), self.explanation_param(expl)
+
     def visit_Starred(self, starred):
         # From Python 3.5, a Starred node can appear in a function call
         res, expl = self.visit(starred.value)
@@ -1081,4 +1117,4 @@ warn_explicit(
             res = ast.BoolOp(ast.And(), load_names)
         else:
             res = load_names[0]
-        return res, self.explanation_param(self.pop_format_context(expl_call))
+        return res, self.explanation_param(self.pop_format_context(expl_call))

=== Fixed Patch ===
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 4810cdd..8140a29 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -969,6 +969,9 @@ warn_explicit(
         visit `ast.Call` nodes on Python3.5 and after
         """
         new_func, func_expl = self.visit(call.func)
+        if isinstance(call.func, ast.Name) and call.func.id in {"all", "any"}:
+return self._visit_all_any_call(new_func, func_expl, call)
+        
         arg_expls = []
         new_args = []
         new_kwargs = []
@@ -991,6 +994,39 @@ warn_explicit(
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl
 
+    def _visit_all_any_call(self, new_func, func_expl, call):
+'Special handling for `all` and `any` calls to unroll the iterable.'
+arg = call.args[0]
+res_var = self.variable()
+expl_list = self.assign(ast.List([], ast.Load()))
+app = ast.Attribute(expl_list, 'append', ast.Load())
+
+self.push_format_context()
+body = save = self.statements
+fail_save = self.on_failure
+        
+loop_var = self.variable()
+for_body = []
+self.statements = for_body
+self.on_failure = for_body
+
+self.push_format_context()
+res, expl = self.visit(arg)
+self.statements.append(ast.Assign([ast.Name(loop_var, ast.Store())], res))
+expl_format = self.pop_format_context(ast.Str(expl))
+call = ast.Call(app, [expl_format], [])
+self.on_failure.append(ast.Expr(call))
+        
+self.statements = save
+self.on_failure = fail_save
+
+loop = ast.For(target=ast.Name(loop_var, ast.Store()), iter=res, body=for_body, orelse=[])
+self.statements.append(loop)
+        
+expl_template = self.helper('_format_all_any', expl_list, ast.Str(new_func.id))
+expl = self.pop_format_context(expl_template)
+return (ast.Call(new_func, [res], call.keywords), self.explanation_param(expl))
+
     def visit_Starred(self, starred):
         # From Python 3.5, a Starred node can appear in a function call
         res, expl = self.visit(starred.value)
@@ -1081,4 +1117,4 @@ warn_explicit(
             res = ast.BoolOp(ast.And(), load_names)
         else:
             res = load_names[0]
-        return res, self.explanation_param(self.pop_format_context(expl_call))
+return (res, self.explanation_param(self.pop_format_context(expl_call)))

=== Applied Patterns ===

=== Original Error Messages ===
Sometime I need to assert some predicate on all of an iterable, and for that the builtin functions `all`/`any` are great - but the failure messages aren't useful at all!
test_all_any.py:7: AssertionError

=== Test Verification Results ===
Tests Passed: False
