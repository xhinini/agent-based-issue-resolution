=== Original Patch ===
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b645576cee
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+import sympy as sp
+from pprint import pprint
+
+
+def sub_in_matrixsymbols(exp, matrices):
+    for matrix in matrices:
+        for i in range(matrix.shape[0]):
+            for j in range(matrix.shape[1]):
+                name = "%s_%d_%d" % (matrix.name, i, j)
+                sym = sp.symbols(name)
+                exp = exp.subs(sym, matrix[i, j])
+    return exp
+
+
+def t44(name):
+    return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))
+
+
+# Construct matrices of symbols that work with our
+# expressions. (MatrixSymbols does not.)
+a = t44("a")
+b = t44("b")
+
+# Set up expression. This is a just a simple example.
+e = a * b
+
+# Put in matrixsymbols. (Gives array-input in codegen.)
+e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol("a", 4, 4), sp.MatrixSymbol("b", 4, 4)])
+cse_subs, cse_reduced = sp.cse(e2)
+pprint((cse_subs, cse_reduced))
+
+# Codegen, etc..
+print("\nccode:")
+for sym, expr in cse_subs:
+    constants, not_c, c_expr = sp.printing.ccode(
+        expr,
+        human=False,
+        assign_to=sp.printing.ccode(sym),
+    )
+    assert not constants, constants
+    assert not not_c, not_c
+    print("%s\n" % c_expr)

=== Fixed Patch ===
diff --git a/reproduce.py b/reproduce.py
index 0000000000..b645576cee
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+import sympy as sp
+from pprint import pprint
+
+
+def sub_in_matrixsymbols(exp, matrices):
+    for matrix in matrices:
+        for i in range(matrix.shape[0]):
+            for j in range(matrix.shape[1]):
+name = '%s_%d_%d' % (matrix.name, i, j)
+sym = sp.symbols(name)
+exp = exp.subs(sym, matrix[i, j])
+return exp
+
+
+def t44(name):
+return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))
+
+
+# Construct matrices of symbols that work with our
+# expressions. (MatrixSymbols does not.)
+a = t44('a')
+b = t44('b')
+
+# Set up expression. This is a just a simple example.
+e = a * b
+
+# Put in matrixsymbols. (Gives array-input in codegen.)
+e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol('a', 4, 4), sp.MatrixSymbol('b', 4, 4)])
+cse_subs, cse_reduced = sp.cse(e2)
+pprint((cse_subs, cse_reduced))
+
+# Codegen, etc..
+print('\nccode:')
+for sym, expr in cse_subs:
+    constants, not_c, c_expr = sp.printing.ccode(
+(expr,)
+human = (False,)
+assign_to = (sp.printing.ccode(sym),)
+    )
+assert not constants, constants
+assert not not_c, not_c
+print('%s\n' % c_expr)

=== Applied Patterns ===

=== Original Error Messages ===


=== Test Verification Results ===
Tests Passed: False
