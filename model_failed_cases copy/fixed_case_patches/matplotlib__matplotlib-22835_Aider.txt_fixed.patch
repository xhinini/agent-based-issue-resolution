=== Original Patch ===
diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py
index 1f33b9d3ec..8570971d2b 100644
--- a/lib/matplotlib/artist.py
+++ b/lib/matplotlib/artist.py
@@ -1304,12 +1304,13 @@ class Artist:
             normed = self.norm(data)
             if np.isfinite(normed):
                 # Midpoints of neighboring color intervals.
-                neighbors = self.norm.inverse(
-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)
-                delta = abs(neighbors - data).max()
-                g_sig_digits = cbook._g_sig_digits(data, delta)
-            else:
-                g_sig_digits = 3  # Consistent with default below.
+                try:
+                    neighbors = self.norm.inverse(
+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)
+                    delta = abs(neighbors - data).max()
+                    g_sig_digits = cbook._g_sig_digits(data, delta)
+                except ValueError:
+                    g_sig_digits = 3  # Consistent with default below.
             return "[{:-#.{}g}]".format(data, g_sig_digits)
         else:
             try:
diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2e51914952..2117bef74f 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -1902,13 +1902,7 @@ class BoundaryNorm(Normalize):
         return ret
 
     def inverse(self, value):
-        """
-        Raises
-        ------
-        ValueError
-            BoundaryNorm is not invertible, so calling this method will always
-            raise an error
-        """
+        """BoundaryNorm is not invertible, so calling this method will always raise an error."""
         raise ValueError("BoundaryNorm is not invertible")

=== Fixed Patch ===
diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py
index 1f33b9d3ec..8570971d2b 100644
--- a/lib/matplotlib/artist.py
+++ b/lib/matplotlib/artist.py
@@ -1304,12 +1304,13 @@ class Artist:
             normed = self.norm(data)
             if np.isfinite(normed):
                 # Midpoints of neighboring color intervals.
-                neighbors = self.norm.inverse(
-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)
-                delta = abs(neighbors - data).max()
-                g_sig_digits = cbook._g_sig_digits(data, delta)
-            else:
-                g_sig_digits = 3  # Consistent with default below.
+                try:
+                    neighbors = self.norm.inverse(
+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)
+delta = abs(neighbors - data).max()
+g_sig_digits = cbook._g_sig_digits(data, delta)
+                except ValueError:
+g_sig_digits = 3
             return "[{:-#.{}g}]".format(data, g_sig_digits)
         else:
             try:
diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2e51914952..2117bef74f 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -1902,13 +1902,7 @@ class BoundaryNorm(Normalize):
         return ret
 
     def inverse(self, value):
-        """
-        Raises
-        ------
-        ValueError
-            BoundaryNorm is not invertible, so calling this method will always
-            raise an error
-        """
+'BoundaryNorm is not invertible, so calling this method will always raise an error.'
         raise ValueError("BoundaryNorm is not invertible")

=== Applied Patterns ===

=== Original Error Messages ===


=== Test Verification Results ===
Tests Passed: False
