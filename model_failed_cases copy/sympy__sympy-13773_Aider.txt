# Instance ID: sympy__sympy-13773
# Model: Aider

### Original Case Description and Gold Patch
# INSTANCE_ID: sympy__sympy-13773

### ISSUE TYPE
bug fix

### DESCRIPTION
@ (__matmul__) should fail if one argument is not a matrix
```
>>> A = Matrix([[1, 2], [3, 4]])
>>> B = Matrix([[2, 3], [1, 2]])
>>> A@B
Matrix([
[ 4,  7],
[10, 17]])
>>> 2@B
Matrix([
[4, 6],
[2, 4]])
```

Right now `@` (`__matmul__`) just copies `__mul__`, but it should actually only work if the multiplication is actually a matrix multiplication. 

This is also how NumPy works

```
>>> import numpy as np
>>> a = np.array([[1, 2], [3, 4]])
>>> 2*a
array([[2, 4],
       [6, 8]])
>>> 2@a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: Scalar operands are not allowed, use '*' instead
```


### GOLD_PATCH
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -1973,6 +1973,10 @@ def __div__(self, other):
 
     @call_highest_priority('__rmatmul__')
     def __matmul__(self, other):
+        other = _matrixify(other)
+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):
+            return NotImplemented
+
         return self.__mul__(other)
 
     @call_highest_priority('__rmul__')
@@ -2066,6 +2070,10 @@ def __radd__(self, other):
 
     @call_highest_priority('__matmul__')
     def __rmatmul__(self, other):
+        other = _matrixify(other)
+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):
+            return NotImplemented
+
         return self.__rmul__(other)
 
     @call_highest_priority('__mul__')


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/sympy/assumptions/sathandlers.py b/sympy/assumptions/sathandlers.py
index 61d62d04cf..881a5f9ba8 100644
--- a/sympy/assumptions/sathandlers.py
+++ b/sympy/assumptions/sathandlers.py
@@ -1,6 +1,7 @@
 from __future__ import print_function, division
 
-from collections import MutableMapping, defaultdict
+from collections.abc import MutableMapping
+from collections import defaultdict
 
 from sympy.core import (Add, Mul, Pow, Integer, Number, NumberSymbol,)
 from sympy.core.numbers import ImaginaryUnit
diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index d4ca323e0d..b42fd1d75c 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -1,6 +1,7 @@
 """Base class for all the objects in SymPy"""
 from __future__ import print_function, division
-from collections import Mapping, defaultdict
+from collections.abc import Mapping
+from collections import defaultdict
 from itertools import chain
 
 from .assumptions import BasicMeta, ManagedProperties
diff --git a/sympy/core/containers.py b/sympy/core/containers.py
index 15abd93e3a..8ac11e7ecd 100644
--- a/sympy/core/containers.py
+++ b/sympy/core/containers.py
@@ -268,7 +268,7 @@ def _sorted_args(self):
         return tuple(sorted(self.args, key=default_sort_key))
 
 
-class OrderedSet(collections.MutableSet):
+class OrderedSet(collections.abc.MutableSet):
     def __init__(self, iterable=None):
         if iterable:
             self.map = collections.OrderedDict((item, None) for item in iterable)
diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py
index 00395585b9..5e94214ed6 100644
--- a/sympy/matrices/dense.py
+++ b/sympy/matrices/dense.py
@@ -38,6 +38,11 @@ def _compare_sequence(a, b):
 
 class DenseMatrix(MatrixBase):
 
+    def __matmul__(self, other):
+        if not isinstance(other, MatrixBase):
+            raise ValueError("Scalar operands are not allowed, use '*' instead")
+        return self * other
+
     is_MatrixExpr = False
 
     _op_priority = 10.01
diff --git a/sympy/plotting/plot.py b/sympy/plotting/plot.py
index b3b0237d19..0b959a43a4 100644
--- a/sympy/plotting/plot.py
+++ b/sympy/plotting/plot.py
@@ -25,7 +25,7 @@
 from __future__ import print_function, division
 
 import inspect
-from collections import Callable
+from collections.abc import Callable
 import warnings
 import sys
 


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/assumptions/sathandlers.py
	modified:   sympy/core/basic.py
	modified:   sympy/core/containers.py
	modified:   sympy/matrices/dense.py
	modified:   sympy/plotting/plot.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 7121bdf1facdd90d05b6994b4c2e5b2865a4638a
Merge: 7d0231704a 98a3f70b3b
Author: Chris Smith <smichr@gmail.com>
Date:   Tue Dec 26 08:24:02 2017 -0600

    Merge pull request #13796 from ArighnaIITG/13699_issue2
    
    Used fuzzy_bool instead of ternary sort.

+ git diff 7121bdf1facdd90d05b6994b4c2e5b2865a4638a
diff --git a/sympy/assumptions/sathandlers.py b/sympy/assumptions/sathandlers.py
index 61d62d04cf..881a5f9ba8 100644
--- a/sympy/assumptions/sathandlers.py
+++ b/sympy/assumptions/sathandlers.py
@@ -1,6 +1,7 @@
 from __future__ import print_function, division
 
-from collections import MutableMapping, defaultdict
+from collections.abc import MutableMapping
+from collections import defaultdict
 
 from sympy.core import (Add, Mul, Pow, Integer, Number, NumberSymbol,)
 from sympy.core.numbers import ImaginaryUnit
diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index d4ca323e0d..b42fd1d75c 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -1,6 +1,7 @@
 """Base class for all the objects in SymPy"""
 from __future__ import print_function, division
-from collections import Mapping, defaultdict
+from collections.abc import Mapping
+from collections import defaultdict
 from itertools import chain
 
 from .assumptions import BasicMeta, ManagedProperties
diff --git a/sympy/core/containers.py b/sympy/core/containers.py
index 15abd93e3a..8ac11e7ecd 100644
--- a/sympy/core/containers.py
+++ b/sympy/core/containers.py
@@ -268,7 +268,7 @@ def _sorted_args(self):
         return tuple(sorted(self.args, key=default_sort_key))
 
 
-class OrderedSet(collections.MutableSet):
+class OrderedSet(collections.abc.MutableSet):
     def __init__(self, iterable=None):
         if iterable:
             self.map = collections.OrderedDict((item, None) for item in iterable)
diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py
index 00395585b9..5e94214ed6 100644
--- a/sympy/matrices/dense.py
+++ b/sympy/matrices/dense.py
@@ -38,6 +38,11 @@ def _compare_sequence(a, b):
 
 class DenseMatrix(MatrixBase):
 
+    def __matmul__(self, other):
+        if not isinstance(other, MatrixBase):
+            raise ValueError("Scalar operands are not allowed, use '*' instead")
+        return self * other
+
     is_MatrixExpr = False
 
     _op_priority = 10.01
diff --git a/sympy/plotting/plot.py b/sympy/plotting/plot.py
index b3b0237d19..0b959a43a4 100644
--- a/sympy/plotting/plot.py
+++ b/sympy/plotting/plot.py
@@ -25,7 +25,7 @@
 from __future__ import print_function, division
 
 import inspect
-from collections import Callable
+from collections.abc import Callable
 import warnings
 import sys
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.1.2.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 7121bdf1facdd90d05b6994b4c2e5b2865a4638a sympy/matrices/tests/test_commonmatrix.py
Updated 0 paths from 72f278ebf0
+ git apply -v -
Checking patch sympy/matrices/tests/test_commonmatrix.py...
Applied patch sympy/matrices/tests/test_commonmatrix.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/matrices/tests/test_commonmatrix.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        58658652
hash randomization: on (PYTHONHASHSEED=2131968144)

sympy/matrices/tests/test_commonmatrix.py[83] 
test__MinimalMatrix ok
test_vec ok
test_tolist ok
test_row_col_del ok
test_get_diag_blocks1 ok
test_get_diag_blocks2 E
test_shape ok
test_reshape E
test_row_col E
test_row_join E
test_col_join E
test_row_insert ok
test_col_insert ok
test_extract E
test_hstack E
test_vstack E
test_atoms ok
test_free_symbols ok
test_has ok
test_is_anti_symmetric ok
test_diagonal_symmetrical E
test_is_hermitian ok
test_is_Identity E
test_is_symbolic ok
test_is_upper ok
test_is_lower ok
test_is_square ok
test_is_symmetric ok
test_is_hessenberg ok
test_is_zero E
test_values ok
test_applyfunc E
test_adjoint ok
test_as_real_imag ok
test_conjugate ok
test_doit ok
test_evalf ok
test_expand ok
test_refine ok
test_replace ok
test_replace_map ok
test_simplify ok
test_subs ok
test_trace ok
test_xreplace ok
test_permute ok
test_abs ok
test_add ok
test_multiplication E
test_matmul E
test_power E
test_neg ok
test_sub ok
test_div E
test_det ok
test_adjugate ok
test_cofactor_and_minors ok
test_charpoly ok
test_row_op E
test_col_op E
test_is_echelon ok
test_echelon_form ok
test_rref ok
test_eye E
test_ones E
test_zeros E
test_diag E
test_jordan_block ok
test_columnspace ok
test_rowspace ok
test_nullspace ok
test_eigenvals E
test_eigenvects E
test_left_eigenvects E
test_diagonalize E
test_is_diagonalizable E
test_jordan_form E
test_singular_values E
test_diff f
test_integrate E
test_jacobian2 E
test_limit E
test_issue_13774 E                                                        [FAIL]


________________________________ slowest tests _________________________________
test_refine - Took 10.894 seconds
________________________________________________________________________________
_______ sympy/matrices/tests/test_commonmatrix.py:test_get_diag_blocks2 ________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 149, in test_get_diag_blocks2
    A, B, C, D = diag(a, b, b), diag(a, b, c), diag(a, c, b), diag(c, c, b)
  File "/testbed/sympy/matrices/dense.py", line 1185, in diag
    return Matrix.diag(*values, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 759, in diag
    return klass._eval_diag(rows, cols, diag_entries)
  File "/testbed/sympy/matrices/common.py", line 616, in _eval_diag
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_reshape ____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 166, in test_reshape
    assert m0.reshape(1, 9) == Matrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_row_col ____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 174, in test_row_col
    assert m.row(0) == Matrix(1, 3, [1, 2, 3])
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
___________ sympy/matrices/tests/test_commonmatrix.py:test_row_join ____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 178, in test_row_join
    assert eye_Shaping(3).row_join(Matrix([7, 7, 7])) == \
  File "/testbed/sympy/matrices/common.py", line 485, in row_join
    return self._eval_row_join(other)
  File "/testbed/sympy/matrices/common.py", line 157, in _eval_row_join
    return classof(self, other)._new(self.rows, self.cols + other.cols,
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
___________ sympy/matrices/tests/test_commonmatrix.py:test_col_join ____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 184, in test_col_join
    assert eye_Shaping(3).col_join(Matrix([[7, 7, 7]])) == \
  File "/testbed/sympy/matrices/common.py", line 249, in col_join
    return self._eval_col_join(other)
  File "/testbed/sympy/matrices/common.py", line 102, in _eval_col_join
    return classof(self, other)._new(self.rows + other.rows, self.cols,
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_extract ____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 214, in test_extract
    assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_hstack _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 230, in test_hstack
    assert Matrix.hstack() == Matrix()
  File "/testbed/sympy/matrices/dense.py", line 53, in __eq__
    other = sympify(other)
  File "/testbed/sympy/core/sympify.py", line 292, in sympify
    return converter[superclass](a)
  File "/testbed/sympy/matrices/immutable.py", line 13, in sympify_matrix
    return arg.as_immutable()
  File "/testbed/sympy/matrices/dense.py", line 336, in as_immutable
    return cls._new(self.rows, self.cols, [])
  File "/testbed/sympy/matrices/immutable.py", line 55, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_vstack _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 258, in test_vstack
    assert Matrix.vstack() == Matrix()
  File "/testbed/sympy/matrices/dense.py", line 53, in __eq__
    other = sympify(other)
  File "/testbed/sympy/core/sympify.py", line 292, in sympify
    return converter[superclass](a)
  File "/testbed/sympy/matrices/immutable.py", line 13, in sympify_matrix
    return arg.as_immutable()
  File "/testbed/sympy/matrices/dense.py", line 336, in as_immutable
    return cls._new(self.rows, self.cols, [])
  File "/testbed/sympy/matrices/immutable.py", line 55, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
_____ sympy/matrices/tests/test_commonmatrix.py:test_diagonal_symmetrical ______
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 305, in test_diagonal_symmetrical
    m = PropertiesOnlyMatrix(3, 3, diag(1, 2, 3))
  File "/testbed/sympy/matrices/dense.py", line 1185, in diag
    return Matrix.diag(*values, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 759, in diag
    return klass._eval_diag(rows, cols, diag_entries)
  File "/testbed/sympy/matrices/common.py", line 616, in _eval_diag
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
__________ sympy/matrices/tests/test_commonmatrix.py:test_is_Identity __________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 341, in test_is_Identity
    assert not PropertiesOnlyMatrix(zeros(3)).is_Identity
  File "/testbed/sympy/matrices/dense.py", line 1478, in zeros
    return Matrix.zeros(*args, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 897, in zeros
    return klass._eval_zeros(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 652, in _eval_zeros
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_is_zero ____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 408, in test_is_zero
    assert PropertiesOnlyMatrix(zeros(3, 4)).is_zero
  File "/testbed/sympy/matrices/dense.py", line 1478, in zeros
    return Matrix.zeros(*args, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 897, in zeros
    return klass._eval_zeros(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 652, in _eval_zeros
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
___________ sympy/matrices/tests/test_commonmatrix.py:test_applyfunc ___________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 424, in test_applyfunc
    m0 = OperationsOnlyMatrix(eye(3))
  File "/testbed/sympy/matrices/dense.py", line 1085, in eye
    return Matrix.eye(*args, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 780, in eye
    return klass._eval_eye(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 622, in _eval_eye
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
________ sympy/matrices/tests/test_commonmatrix.py:test_multiplication _________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 617, in test_multiplication
    raises(TypeError, lambda: a*{})
  File "/testbed/sympy/utilities/pytest.py", line 78, in raises
    code()
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 617, in <lambda>
    raises(TypeError, lambda: a*{})
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_matmul _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 680, in test_matmul
    assert a.__matmul__(2) == NotImplemented
  File "/testbed/sympy/matrices/dense.py", line 43, in __matmul__
    raise ValueError("Scalar operands are not allowed, use '*' instead")
ValueError: Scalar operands are not allowed, use '*' instead
________________________________________________________________________________
_____________ sympy/matrices/tests/test_commonmatrix.py:test_power _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 708, in test_power
    assert A**0 == eye(3)
  File "/testbed/sympy/matrices/dense.py", line 1085, in eye
    return Matrix.eye(*args, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 780, in eye
    return klass._eval_eye(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 622, in _eval_eye
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
______________ sympy/matrices/tests/test_commonmatrix.py:test_div ______________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 723, in test_div
    assert n/2 == ArithmeticOnlyMatrix(1, 2, [1/2, 2/2])
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2108, in __truediv__
    return self.__div__(other)
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 1972, in __div__
    return self * (S.One / other)
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_row_op _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 849, in test_row_op
    assert a.elementary_row_op("n->kn", 1, 5) == Matrix(2, 3, [0]*6)
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
____________ sympy/matrices/tests/test_commonmatrix.py:test_col_op _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 884, in test_col_op
    assert a.elementary_col_op("n->kn", 1, 5) == Matrix(2, 3, [0]*6)
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
______________ sympy/matrices/tests/test_commonmatrix.py:test_eye ______________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1078, in test_eye
    assert type(SpecialOnlyMatrix.eye(2, cls=Matrix)) == Matrix
  File "/testbed/sympy/matrices/common.py", line 780, in eye
    return klass._eval_eye(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 622, in _eval_eye
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
_____________ sympy/matrices/tests/test_commonmatrix.py:test_ones ______________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1085, in test_ones
    assert type(SpecialOnlyMatrix.ones(2, cls=Matrix)) == Matrix
  File "/testbed/sympy/matrices/common.py", line 876, in ones
    return klass._eval_ones(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 646, in _eval_ones
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
_____________ sympy/matrices/tests/test_commonmatrix.py:test_zeros _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1092, in test_zeros
    assert type(SpecialOnlyMatrix.zeros(2, cls=Matrix)) == Matrix
  File "/testbed/sympy/matrices/common.py", line 897, in zeros
    return klass._eval_zeros(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 652, in _eval_zeros
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
_____________ sympy/matrices/tests/test_commonmatrix.py:test_diag ______________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1147, in test_diag
    assert type(SpecialOnlyMatrix.diag(1, cls=Matrix)) == Matrix
  File "/testbed/sympy/matrices/common.py", line 759, in diag
    return klass._eval_diag(rows, cols, diag_entries)
  File "/testbed/sympy/matrices/common.py", line 616, in _eval_diag
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
___________ sympy/matrices/tests/test_commonmatrix.py:test_eigenvals ___________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1219, in test_eigenvals
    raises(MatrixError, lambda: m.eigenvals())
  File "/testbed/sympy/utilities/pytest.py", line 78, in raises
    code()
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1219, in <lambda>
    raises(MatrixError, lambda: m.eigenvals())
  File "/testbed/sympy/matrices/matrices.py", line 1126, in eigenvals
    eigs = roots(mat.charpoly(x=Dummy('x')), **flags)
  File "/testbed/sympy/matrices/matrices.py", line 344, in charpoly
    berk_vector = self._eval_berkowitz_vector()
  File "/testbed/sympy/matrices/matrices.py", line 161, in _eval_berkowitz_vector
    submat, toeplitz = self._eval_berkowitz_toeplitz_matrix()
  File "/testbed/sympy/matrices/matrices.py", line 117, in _eval_berkowitz_toeplitz_matrix
    toeplitz = self._new(self.cols + 1, self.rows, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
__________ sympy/matrices/tests/test_commonmatrix.py:test_eigenvects ___________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1225, in test_eigenvects
    vecs = M.eigenvects()
  File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp>
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace
    m = mat - self.eye(mat.rows) * eigenval
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
________ sympy/matrices/tests/test_commonmatrix.py:test_left_eigenvects ________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1234, in test_left_eigenvects
    vecs = M.left_eigenvects()
  File "/testbed/sympy/matrices/matrices.py", line 1503, in left_eigenvects
    eigs = self.transpose().eigenvects(**flags)
  File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp>
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace
    m = mat - self.eye(mat.rows) * eigenval
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
__________ sympy/matrices/tests/test_commonmatrix.py:test_diagonalize __________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1241, in test_diagonalize
    raises(MatrixError, lambda: m.diagonalize(reals_only=True))
  File "/testbed/sympy/utilities/pytest.py", line 78, in raises
    code()
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1241, in <lambda>
    raises(MatrixError, lambda: m.diagonalize(reals_only=True))
  File "/testbed/sympy/matrices/matrices.py", line 1083, in diagonalize
    if not self.is_diagonalizable(reals_only=reals_only, clear_cache=False):
  File "/testbed/sympy/matrices/matrices.py", line 1281, in is_diagonalizable
    self._cache_eigenvects = self.eigenvects(simplify=True)
  File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp>
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace
    m = mat - self.eye(mat.rows) * eigenval
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
_______ sympy/matrices/tests/test_commonmatrix.py:test_is_diagonalizable _______
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1261, in test_is_diagonalizable
    assert m.is_diagonalizable()
  File "/testbed/sympy/matrices/matrices.py", line 1281, in is_diagonalizable
    self._cache_eigenvects = self.eigenvects(simplify=True)
  File "/testbed/sympy/matrices/matrices.py", line 1190, in eigenvects
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1190, in <listcomp>
    ret = [(val, mult, eigenspace(val)) for val, mult in
  File "/testbed/sympy/matrices/matrices.py", line 1175, in eigenspace
    m = mat - self.eye(mat.rows) * eigenval
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
__________ sympy/matrices/tests/test_commonmatrix.py:test_jordan_form __________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1269, in test_jordan_form
    m = Matrix(3, 2, [-3, 1, -3, 20, 3, 10])
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
________ sympy/matrices/tests/test_commonmatrix.py:test_singular_values ________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1322, in test_singular_values
    A = eye(3)
  File "/testbed/sympy/matrices/dense.py", line 1085, in eye
    return Matrix.eye(*args, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 780, in eye
    return klass._eval_eye(rows, cols)
  File "/testbed/sympy/matrices/common.py", line 622, in _eval_eye
    return cls._new(rows, cols, entry)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
___________ sympy/matrices/tests/test_commonmatrix.py:test_integrate ___________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1345, in test_integrate
    assert m.integrate(x) == Matrix(2, 1, [x**2/2, y*x])
  File "/testbed/sympy/matrices/dense.py", line 416, in __new__
    return cls._new(*args, **kwargs)
  File "/testbed/sympy/matrices/dense.py", line 428, in _new
    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
  File "/testbed/sympy/matrices/matrices.py", line 2048, in _handle_creation_inputs
    if len(args) == 3 and isinstance(args[2], collections.Callable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
___________ sympy/matrices/tests/test_commonmatrix.py:test_jacobian2 ___________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1356, in test_jacobian2
    assert X.jacobian(Y) == J
  File "/testbed/sympy/matrices/matrices.py", line 1651, in jacobian
    return self._new(m, n, lambda j, i: self[j].diff(X[i]))
  File "/testbed/sympy/matrices/common.py", line 2163, in _new
    return cls(*args, **kwargs)
  File "/testbed/sympy/matrices/common.py", line 2168, in __init__
    mat = list(mat(i, j) for i in range(rows) for j in range(cols))
  File "/testbed/sympy/matrices/common.py", line 2168, in <genexpr>
    mat = list(mat(i, j) for i in range(rows) for j in range(cols))
  File "/testbed/sympy/matrices/matrices.py", line 1651, in <lambda>
    return self._new(m, n, lambda j, i: self[j].diff(X[i]))
  File "/testbed/sympy/core/expr.py", line 3008, in diff
    return Derivative(self, *new_symbols, **assumptions)
  File "/testbed/sympy/core/function.py", line 1241, in __new__
    if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
_____________ sympy/matrices/tests/test_commonmatrix.py:test_limit _____________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1366, in test_limit
    assert m.limit(x, 5) == Matrix(2, 1, [S(1)/5, y])
  File "/testbed/sympy/matrices/matrices.py", line 1674, in limit
    return self.applyfunc(lambda x: x.limit(*args))
  File "/testbed/sympy/matrices/common.py", line 1547, in applyfunc
    return self._eval_applyfunc(f)
  File "/testbed/sympy/matrices/common.py", line 1487, in _eval_applyfunc
    out = self._new(self.rows, self.cols, [f(x) for x in self])
  File "/testbed/sympy/matrices/common.py", line 1487, in <listcomp>
    out = self._new(self.rows, self.cols, [f(x) for x in self])
  File "/testbed/sympy/matrices/matrices.py", line 1674, in <lambda>
    return self.applyfunc(lambda x: x.limit(*args))
  File "/testbed/sympy/core/expr.py", line 2871, in limit
    return limit(self, x, xlim, dir)
  File "/testbed/sympy/series/limits.py", line 68, in limit
    return Limit(e, z, z0, dir).doit(deep=False)
  File "/testbed/sympy/series/limits.py", line 209, in doit
    r = gruntz(e, z, z0, dir)
  File "/testbed/sympy/series/gruntz.py", line 658, in gruntz
    r = limitinf(e0, z)
  File "/testbed/sympy/series/gruntz.py", line 428, in limitinf
    c0, e0 = mrv_leadterm(e, x)
  File "/testbed/sympy/series/gruntz.py", line 487, in mrv_leadterm
    Omega, exps = mrv(e, x)
  File "/testbed/sympy/series/gruntz.py", line 246, in mrv
    e = powsimp(e, deep=True, combine='exp')
  File "/testbed/sympy/simplify/powsimp.py", line 118, in powsimp
    expr = expr.func(*[recurse(w) for w in expr.args])
  File "/testbed/sympy/simplify/powsimp.py", line 118, in <listcomp>
    expr = expr.func(*[recurse(w) for w in expr.args])
  File "/testbed/sympy/simplify/powsimp.py", line 109, in recurse
    return powsimp(arg, _deep, _combine, _force, _measure)
  File "/testbed/sympy/simplify/powsimp.py", line 118, in powsimp
    expr = expr.func(*[recurse(w) for w in expr.args])
  File "/testbed/sympy/simplify/powsimp.py", line 118, in <listcomp>
    expr = expr.func(*[recurse(w) for w in expr.args])
  File "/testbed/sympy/simplify/powsimp.py", line 109, in recurse
    return powsimp(arg, _deep, _combine, _force, _measure)
  File "/testbed/sympy/simplify/powsimp.py", line 121, in powsimp
    return recurse(expr*_y, deep=False)/_y
  File "/testbed/sympy/core/decorators.py", line 91, in __sympifyit_wrapper
    return func(a, b)
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/core/expr.py", line 177, in __div__
    return Mul(self, Pow(other, S.NegativeOne))
  File "/testbed/sympy/core/operations.py", line 42, in __new__
    c_part, nc_part, order_symbols = cls.flatten(args)
  File "/testbed/sympy/core/mul.py", line 184, in flatten
    if not a.is_zero and a.is_Rational:
  File "/testbed/sympy/core/assumptions.py", line 248, in getit
    return _ask(fact, self)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  [Previous line repeated 2 more times]
  File "/testbed/sympy/core/assumptions.py", line 291, in _ask
    a = evaluate(obj)
  File "/testbed/sympy/core/mul.py", line 1325, in _eval_is_composite
    if self.is_integer and self.is_positive:
  File "/testbed/sympy/core/assumptions.py", line 248, in getit
    return _ask(fact, self)
  File "/testbed/sympy/core/assumptions.py", line 291, in _ask
    a = evaluate(obj)
  File "/testbed/sympy/core/mul.py", line 1115, in _eval_is_integer
    is_rational = self.is_rational
  File "/testbed/sympy/core/assumptions.py", line 248, in getit
    return _ask(fact, self)
  File "/testbed/sympy/core/assumptions.py", line 291, in _ask
    a = evaluate(obj)
  File "/testbed/sympy/core/mul.py", line 1084, in _eval_is_rational
    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)
  File "/testbed/sympy/core/logic.py", line 78, in _fuzzy_group
    for a in args:
  File "/testbed/sympy/core/mul.py", line 1084, in <genexpr>
    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)
  File "/testbed/sympy/core/assumptions.py", line 248, in getit
    return _ask(fact, self)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  File "/testbed/sympy/core/assumptions.py", line 291, in _ask
    a = evaluate(obj)
  File "/testbed/sympy/core/power.py", line 1130, in _eval_is_algebraic
    if self.base.is_zero or _is_one(self.base):
  File "/testbed/sympy/core/power.py", line 1125, in _is_one
    return (expr - 1).is_zero
  File "/testbed/sympy/core/assumptions.py", line 248, in getit
    return _ask(fact, self)
  File "/testbed/sympy/core/assumptions.py", line 303, in _ask
    _ask(pk, obj)
  File "/testbed/sympy/core/assumptions.py", line 291, in _ask
    a = evaluate(obj)
  File "/testbed/sympy/core/add.py", line 592, in _eval_is_positive
    if s != self and s.is_positive and a.is_nonnegative:
  File "/testbed/sympy/core/assumptions.py", line 248, in getit
    return _ask(fact, self)
  File "/testbed/sympy/core/assumptions.py", line 291, in _ask
    a = evaluate(obj)
  File "/testbed/sympy/core/add.py", line 595, in _eval_is_positive
    v = _monotonic_sign(self)
  File "/testbed/sympy/core/exprtools.py", line 120, in _monotonic_sign
    d = self.diff(x)
  File "/testbed/sympy/core/expr.py", line 3008, in diff
    return Derivative(self, *new_symbols, **assumptions)
  File "/testbed/sympy/core/function.py", line 1241, in __new__
    if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
________________________________________________________________________________
__________ sympy/matrices/tests/test_commonmatrix.py:test_issue_13774 __________
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1371, in test_issue_13774
    raises(TypeError, lambda: M*v)
  File "/testbed/sympy/utilities/pytest.py", line 78, in raises
    code()
  File "/testbed/sympy/matrices/tests/test_commonmatrix.py", line 1371, in <lambda>
    raises(TypeError, lambda: M*v)
  File "/testbed/sympy/core/decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/matrices/common.py", line 2022, in __mul__
    if not isinstance(other, collections.Iterable):
  File "/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py", line 62, in __getattr__
    warnings.warn("Using or importing the ABCs from 'collections' instead "
DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working

 tests finished: 49 passed, 1 expected to fail, 33 exceptions, in 13.84 seconds 
DO *NOT* COMMIT!
+ git checkout 7121bdf1facdd90d05b6994b4c2e5b2865a4638a sympy/matrices/tests/test_commonmatrix.py
Updated 1 path from 72f278ebf0

