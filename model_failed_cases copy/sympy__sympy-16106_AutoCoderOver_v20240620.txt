# Instance ID: sympy__sympy-16106
# Model: AutoCoderOver v20240620

### Original Case Description and Gold Patch
# INSTANCE_ID: sympy__sympy-16106

### ISSUE TYPE
new feature

### DESCRIPTION
mathml printer for IndexedBase required
Writing an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`:

```
In [340]: sympy.__version__
Out[340]: '1.0.1.dev'

In [341]: from sympy.abc import (a, b)

In [342]: sympy.printing.mathml(sympy.IndexedBase(a)[b])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-342-b32e493b70d3> in <module>()
----> 1 sympy.printing.mathml(sympy.IndexedBase(a)[b])

/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in mathml(expr, **settings)
    442 def mathml(expr, **settings):
    443     """Returns the MathML representation of expr"""
--> 444     return MathMLPrinter(settings).doprint(expr)
    445 
    446 

/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in doprint(self, expr)
     36         Prints the expression as MathML.
     37         """
---> 38         mathML = Printer._print(self, expr)
     39         unistr = mathML.toxml()
     40         xmlbstr = unistr.encode('ascii', 'xmlcharrefreplace')

/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/printer.py in _print(self, expr, *args, **kwargs)
    255                 printmethod = '_print_' + cls.__name__
    256                 if hasattr(self, printmethod):
--> 257                     return getattr(self, printmethod)(expr, *args, **kwargs)
    258             # Unknown object, fall back to the emptyPrinter.
    259             return self.emptyPrinter(expr)

/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in _print_Basic(self, e)
    356     def _print_Basic(self, e):
    357         x = self.dom.createElement(self.mathml_tag(e))
--> 358         for arg in e:
    359             x.appendChild(self._print(arg))
    360         return x

TypeError: 'Indexed' object is not iterable
```

It also fails for more complex expressions where at least one element is Indexed.


### GOLD_PATCH
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -1271,6 +1271,26 @@ def _print_Lambda(self, e):
         return x
 
 
+    def _print_tuple(self, e):
+        x = self.dom.createElement('mfenced')
+        for i in e:
+            x.appendChild(self._print(i))
+        return x
+
+
+    def _print_IndexedBase(self, e):
+        return self._print(e.label)
+
+    def _print_Indexed(self, e):
+        x = self.dom.createElement('msub')
+        x.appendChild(self._print(e.base))
+        if len(e.indices) == 1:
+            x.appendChild(self._print(e.indices[0]))
+            return x
+        x.appendChild(self._print(e.indices))
+        return x
+
+
 def mathml(expr, printer='content', **settings):
     """Returns the MathML representation of expr. If printer is presentation then
      prints Presentation MathML else prints content MathML.


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..b304fe77a8 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -123,6 +123,15 @@ class MathMLContentPrinter(MathMLPrinterBase):
     """
     printmethod = "_mathml_content"
 
+    def _print_Indexed(self, expr):
+        apply = self.dom.createElement('apply')
+        ci = self.dom.createElement('ci')
+        ci.appendChild(self.dom.createTextNode(str(expr.base)))
+        apply.appendChild(ci)
+        for index in expr.indices:
+            apply.appendChild(self._print(index))
+        return apply
+
     def mathml_tag(self, e):
         """Returns the MathML tag for an expression."""
         translate = {
@@ -485,6 +494,17 @@ class MathMLPresentationPrinter(MathMLPrinterBase):
     """
     printmethod = "_mathml_presentation"
 
+    def _print_Indexed(self, expr):
+        mrow = self.dom.createElement('mrow')
+        base = self._print(expr.base)
+        mrow.appendChild(base)
+        for index in expr.indices:
+            subscript = self.dom.createElement('msub')
+            subscript.appendChild(base)
+            subscript.appendChild(self._print(index))
+            mrow.appendChild(subscript)
+        return mrow
+
     def mathml_tag(self, e):
         """Returns the MathML tag for an expression."""
         translate = {


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/printing/mathml.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 0e987498b00167fdd4a08a41c852a97cb70ce8f2
Merge: 6ad7e8d132 4171f26ebd
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Mar 7 07:57:15 2019 -0600

    Merge pull request #16185 from RituRajSingh878/diff
    
    abs(f(x)).diff(f(x)) behaves more like abs(x).diff(x)

+ git diff 0e987498b00167fdd4a08a41c852a97cb70ce8f2
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..b304fe77a8 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -123,6 +123,15 @@ class MathMLContentPrinter(MathMLPrinterBase):
     """
     printmethod = "_mathml_content"
 
+    def _print_Indexed(self, expr):
+        apply = self.dom.createElement('apply')
+        ci = self.dom.createElement('ci')
+        ci.appendChild(self.dom.createTextNode(str(expr.base)))
+        apply.appendChild(ci)
+        for index in expr.indices:
+            apply.appendChild(self._print(index))
+        return apply
+
     def mathml_tag(self, e):
         """Returns the MathML tag for an expression."""
         translate = {
@@ -485,6 +494,17 @@ class MathMLPresentationPrinter(MathMLPrinterBase):
     """
     printmethod = "_mathml_presentation"
 
+    def _print_Indexed(self, expr):
+        mrow = self.dom.createElement('mrow')
+        base = self._print(expr.base)
+        mrow.appendChild(base)
+        for index in expr.indices:
+            subscript = self.dom.createElement('msub')
+            subscript.appendChild(base)
+            subscript.appendChild(self._print(index))
+            mrow.appendChild(subscript)
+        return mrow
+
     def mathml_tag(self, e):
         """Returns the MathML tag for an expression."""
         translate = {
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.4.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.4.dev0
    Uninstalling sympy-1.4.dev0:
      Successfully uninstalled sympy-1.4.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.4.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 0e987498b00167fdd4a08a41c852a97cb70ce8f2 sympy/printing/tests/test_mathml.py
Updated 0 paths from b0d5932494
+ git apply -v -
Checking patch sympy/printing/tests/test_mathml.py...
Applied patch sympy/printing/tests/test_mathml.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/printing/tests/test_mathml.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        4584915
hash randomization: on (PYTHONHASHSEED=562439063)

sympy/printing/tests/test_mathml.py[66] 
test_mathml_printer ok
test_content_printmethod ok
test_content_mathml_core ok
test_content_mathml_functions ok
test_content_mathml_limits ok
test_content_mathml_integrals ok
test_content_mathml_matrices ok
test_content_mathml_sums ok
test_content_mathml_tuples ok
test_content_mathml_add ok
test_content_mathml_Rational ok
test_content_mathml_constants ok
test_content_mathml_trig ok
test_content_mathml_relational ok
test_content_symbol ok
test_content_mathml_greek ok
test_content_mathml_order ok
test_content_settings ok
test_presentation_printmethod ok
test_presentation_mathml_core ok
test_presentation_mathml_functions ok
test_print_derivative ok
test_presentation_mathml_limits ok
test_presentation_mathml_integrals ok
test_presentation_mathml_matrices ok
test_presentation_mathml_sums ok
test_presentation_mathml_add ok
test_presentation_mathml_Rational ok
test_presentation_mathml_constants ok
test_presentation_mathml_trig ok
test_presentation_mathml_relational ok
test_presentation_symbol ok
test_presentation_mathml_greek ok
test_presentation_mathml_order ok
test_print_intervals F
test_print_tuples ok
test_print_re_im ok
test_print_Abs F
test_print_Determinant F
test_presentation_settings ok
test_toprettyxml_hooking ok
test_print_domains ok
test_print_expression_with_minus ok
test_print_AssocOp ok
test_print_basic ok
test_mat_delim_print F
test_ln_notation_print ok
test_mul_symbol_print ok
test_print_lerchphi ok
test_print_polylog ok
test_print_set_frozenset F
test_print_FiniteSet F
test_print_SetOp F
test_print_logic ok
test_root_notation_print ok
test_fold_frac_powers_print ok
test_fold_short_frac_print ok
test_print_factorials ok
test_print_floor F
test_print_ceiling F
test_print_Lambda ok
test_print_conjugate ok
test_print_matrix_symbol ok
test_print_random_symbol ok
test_print_IndexedBase F
test_print_Indexed F                                                      [FAIL]


________________________________________________________________________________
___________ sympy/printing/tests/test_mathml.py:test_print_intervals ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 922, in test_print_intervals
    assert mpp.doprint(Interval(0, a)) == '<mrow><mfenced close="]" open="["><mn>0</mn><mi>a</mi></mfenced></mrow>'
AssertionError
________________________________________________________________________________
______________ sympy/printing/tests/test_mathml.py:test_print_Abs ______________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 948, in test_print_Abs
    assert mpp.doprint(Abs(x)) == '<mrow><mfenced close="|" open="|"><mi>x</mi></mfenced></mrow>'
AssertionError
________________________________________________________________________________
__________ sympy/printing/tests/test_mathml.py:test_print_Determinant __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 953, in test_print_Determinant
    assert mpp.doprint(Determinant(Matrix([[1, 2], [3, 4]]))) == '<mrow><mfenced close="|" open="|"><mfenced close="]" open="["><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd></mtr><mtr><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr></mtable></mfenced></mfenced></mrow>'
AssertionError
________________________________________________________________________________
___________ sympy/printing/tests/test_mathml.py:test_mat_delim_print ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1009, in test_mat_delim_print
    assert mathml(expr, printer='presentation', mat_delim='[') == '<mfenced close="]" open="["><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd></mtr><mtr><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr></mtable></mfenced>'
AssertionError
________________________________________________________________________________
_________ sympy/printing/tests/test_mathml.py:test_print_set_frozenset _________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1041, in test_print_set_frozenset
    assert mpp.doprint(f) == '<mfenced close="}" open="{"><mn>1</mn><mn>3</mn><mn>5</mn></mfenced>'
AssertionError
________________________________________________________________________________
___________ sympy/printing/tests/test_mathml.py:test_print_FiniteSet ___________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1048, in test_print_FiniteSet
    assert mpp.doprint(f1) == '<mfenced close="}" open="{"><mn>1</mn><mn>3</mn><mi>x</mi></mfenced>'
AssertionError
________________________________________________________________________________
_____________ sympy/printing/tests/test_mathml.py:test_print_SetOp _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1055, in test_print_SetOp
    assert mpp.doprint(Union(f1, f2, evaluate=False)) == '<mrow><mfenced close="}" open="{"><mn>1</mn><mn>3</mn><mi>x</mi></mfenced><mo>&#x222A;</mo><mfenced close="}" open="{"><mn>2</mn><mn>4</mn><mi>y</mi></mfenced></mrow>'
AssertionError
________________________________________________________________________________
_____________ sympy/printing/tests/test_mathml.py:test_print_floor _____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1110, in test_print_floor
    assert mathml(expr, printer='presentation') == '<mrow><mfenced close="&#8971;" open="&#8970;"><mi>x</mi></mfenced></mrow>'
AssertionError
________________________________________________________________________________
____________ sympy/printing/tests/test_mathml.py:test_print_ceiling ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1115, in test_print_ceiling
    assert mathml(expr, printer='presentation') == '<mrow><mfenced close="&#8969;" open="&#8968;"><mi>x</mi></mfenced></mrow>'
AssertionError
________________________________________________________________________________
__________ sympy/printing/tests/test_mathml.py:test_print_IndexedBase __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1146, in test_print_IndexedBase
    assert mathml(IndexedBase(a)[b],printer='presentation') == '<msub><mi>a</mi><mi>b</mi></msub>'
AssertionError
________________________________________________________________________________
____________ sympy/printing/tests/test_mathml.py:test_print_Indexed ____________
Traceback (most recent call last):
  File "/testbed/sympy/printing/tests/test_mathml.py", line 1153, in test_print_Indexed
    assert mathml(IndexedBase(a),printer = 'presentation') == '<mi>a</mi>'
AssertionError

============ tests finished: 55 passed, 11 failed, in 0.27 seconds =============
DO *NOT* COMMIT!
+ git checkout 0e987498b00167fdd4a08a41c852a97cb70ce8f2 sympy/printing/tests/test_mathml.py
Updated 1 path from b0d5932494

