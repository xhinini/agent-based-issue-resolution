# Instance ID: sphinx-doc__sphinx-10451
# Model: AppMap Navie GPT-4o

### Original Case Description and Gold Patch
# INSTANCE_ID: sphinx-doc__sphinx-10451

### ISSUE TYPE
bug fix

### DESCRIPTION
Fix duplicated *args and **kwargs with autodoc_typehints
Fix duplicated *args and **kwargs with autodoc_typehints

### Bugfix
- Bugfix

### Detail
Consider this
```python
class _ClassWithDocumentedInitAndStarArgs:
    """Class docstring."""

    def __init__(self, x: int, *args: int, **kwargs: int) -> None:
        """Init docstring.

        :param x: Some integer
        :param *args: Some integer
        :param **kwargs: Some integer
        """
```
when using the autodoc extension and the setting `autodoc_typehints = "description"`.

WIth sphinx 4.2.0, the current output is
```
Class docstring.

   Parameters:
      * **x** (*int*) --

      * **args** (*int*) --

      * **kwargs** (*int*) --

   Return type:
      None

   __init__(x, *args, **kwargs)

      Init docstring.

      Parameters:
         * **x** (*int*) -- Some integer

         * ***args** --

           Some integer

         * ****kwargs** --

           Some integer

         * **args** (*int*) --

         * **kwargs** (*int*) --

      Return type:
         None
```
where the *args and **kwargs are duplicated and incomplete.

The expected output is
```
  Class docstring.

   Parameters:
      * **x** (*int*) --

      * ***args** (*int*) --

      * ****kwargs** (*int*) --

   Return type:
      None

   __init__(x, *args, **kwargs)

      Init docstring.

      Parameters:
         * **x** (*int*) -- Some integer

         * ***args** (*int*) --

           Some integer

         * ****kwargs** (*int*) --

           Some integer

      Return type:
         None

```


### GOLD_PATCH
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -115,7 +115,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
         if name == 'return':
             continue
 
-        arg = arguments.get(name, {})
+        if '*' + name in arguments:
+            name = '*' + name
+            arguments.get(name)
+        elif '**' + name in arguments:
+            name = '**' + name
+            arguments.get(name)
+        else:
+            arg = arguments.get(name, {})
+
         if not arg.get('type'):
             field = nodes.field()
             field += nodes.field_name('', 'type ' + name)
@@ -167,13 +175,19 @@ def augment_descriptions_with_types(
             has_type.add('return')
 
     # Add 'type' for parameters with a description but no declared type.
-    for name in annotations:
+    for name, annotation in annotations.items():
         if name in ('return', 'returns'):
             continue
+
+        if '*' + name in has_description:
+            name = '*' + name
+        elif '**' + name in has_description:
+            name = '**' + name
+
         if name in has_description and name not in has_type:
             field = nodes.field()
             field += nodes.field_name('', 'type ' + name)
-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))
+            field += nodes.field_body('', nodes.paragraph('', annotation))
             node += field
 
     # Add 'rtype' if 'return' is present and 'rtype' isn't.


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index d912cd7d5..9ecc65289 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -20,14 +20,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
     else:
         mode = 'fully-qualified'
 
+    processed_params = set()
+
     try:
         if callable(obj):
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)
             for param in sig.parameters.values():
-                if param.annotation is not param.empty:
+                if param.annotation is not param.empty and param.name not in processed_params:
                     annotation[param.name] = typing.stringify(param.annotation, mode)
+                    processed_params.add(param.name)
             if sig.return_annotation is not sig.empty:
                 annotation['return'] = typing.stringify(sig.return_annotation, mode)
     except (TypeError, ValueError):
@@ -40,6 +43,8 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
     if app.config.autodoc_typehints not in ('both', 'description'):
         return
 
+    processed_params = set()
+
     try:
         signature = cast(addnodes.desc_signature, contentnode.parent[0])
         if signature['module']:
@@ -60,16 +65,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
         for field_list in field_lists:
             if app.config.autodoc_typehints_description_target == "all":
                 if objtype == 'class':
-                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True)
+                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True, processed_params=processed_params)
                 else:
-                    modify_field_list(field_list, annotations[fullname])
+                    modify_field_list(field_list, annotations[fullname], processed_params=processed_params)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list, annotations[fullname], force_rtype=True, processed_params=processed_params
                 )
             else:
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=False
+                    field_list, annotations[fullname], force_rtype=False, processed_params=processed_params
                 )
 
 


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sphinx/ext/autodoc/typehints.py
	modified:   tox.ini

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 195e911f1dab04b8ddeacbe04b7d214aaf81bb0b
Merge: ac1e5e623 3e20ee684
Author: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date:   Sun May 22 13:33:42 2022 +0900

    Merge pull request #10453 from sphinx-doc/refactor_gha
    
    CI: Separate coverage task from main.yml

+ git diff 195e911f1dab04b8ddeacbe04b7d214aaf81bb0b
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index d912cd7d5..9ecc65289 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -20,14 +20,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
     else:
         mode = 'fully-qualified'
 
+    processed_params = set()
+
     try:
         if callable(obj):
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)
             for param in sig.parameters.values():
-                if param.annotation is not param.empty:
+                if param.annotation is not param.empty and param.name not in processed_params:
                     annotation[param.name] = typing.stringify(param.annotation, mode)
+                    processed_params.add(param.name)
             if sig.return_annotation is not sig.empty:
                 annotation['return'] = typing.stringify(sig.return_annotation, mode)
     except (TypeError, ValueError):
@@ -40,6 +43,8 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
     if app.config.autodoc_typehints not in ('both', 'description'):
         return
 
+    processed_params = set()
+
     try:
         signature = cast(addnodes.desc_signature, contentnode.parent[0])
         if signature['module']:
@@ -60,16 +65,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
         for field_list in field_lists:
             if app.config.autodoc_typehints_description_target == "all":
                 if objtype == 'class':
-                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True)
+                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True, processed_params=processed_params)
                 else:
-                    modify_field_list(field_list, annotations[fullname])
+                    modify_field_list(field_list, annotations[fullname], processed_params=processed_params)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list, annotations[fullname], force_rtype=True, processed_params=processed_params
                 )
             else:
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=False
+                    field_list, annotations[fullname], force_rtype=False, processed_params=processed_params
                 )
 
 
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]'
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: sphinxcontrib-applehelp in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.0.8)
Requirement already satisfied: sphinxcontrib-devhelp in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.0.6)
Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.0.1)
Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (2.0.5)
Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.1.10)
Requirement already satisfied: sphinxcontrib-qthelp in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.0.7)
Requirement already satisfied: Jinja2>=2.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (3.1.4)
Requirement already satisfied: Pygments>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (2.18.0)
Requirement already satisfied: docutils<0.19,>=0.14 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (0.18.1)
Requirement already satisfied: snowballstemmer>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (2.2.0)
Requirement already satisfied: babel>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (2.15.0)
Requirement already satisfied: alabaster<0.8,>=0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (0.7.16)
Requirement already satisfied: imagesize in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.4.1)
Requirement already satisfied: requests>=2.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (2.32.3)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (24.1)
Requirement already satisfied: importlib-metadata>=4.4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (8.0.0)
Requirement already satisfied: pytest>=4.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (8.2.2)
Requirement already satisfied: html5lib in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (1.1)
Requirement already satisfied: cython in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==5.1.0.dev20240716) (3.0.10)
Requirement already satisfied: zipp>=0.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from importlib-metadata>=4.4->Sphinx==5.1.0.dev20240716) (3.19.2)
Requirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Jinja2>=2.3->Sphinx==5.1.0.dev20240716) (2.1.5)
Requirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==5.1.0.dev20240716) (2.0.0)
Requirement already satisfied: pluggy<2.0,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==5.1.0.dev20240716) (1.5.0)
Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==5.1.0.dev20240716) (1.2.2)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==5.1.0.dev20240716) (2.0.1)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==5.1.0.dev20240716) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==5.1.0.dev20240716) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==5.1.0.dev20240716) (2.2.2)
Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==5.1.0.dev20240716) (2024.7.4)
Requirement already satisfied: six>=1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==5.1.0.dev20240716) (1.16.0)
Requirement already satisfied: webencodings in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==5.1.0.dev20240716) (0.5.1)
Installing collected packages: Sphinx
  Attempting uninstall: Sphinx
    Found existing installation: Sphinx 5.1.0.dev20240715
    Uninstalling Sphinx-5.1.0.dev20240715:
      Successfully uninstalled Sphinx-5.1.0.dev20240715
  Running setup.py develop for Sphinx
Successfully installed Sphinx-5.1.0.dev20240716
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 195e911f1dab04b8ddeacbe04b7d214aaf81bb0b tests/roots/test-ext-autodoc/target/typehints.py tests/test_ext_autodoc_configs.py tests/test_ext_napoleon_docstring.py
Updated 0 paths from 1aabd772f
+ git apply -v -
Checking patch tests/roots/test-ext-autodoc/target/typehints.py...
Checking patch tests/roots/test-ext-napoleon/conf.py...
Checking patch tests/roots/test-ext-napoleon/index.rst...
Checking patch tests/roots/test-ext-napoleon/mypackage/__init__.py...
Checking patch tests/roots/test-ext-napoleon/mypackage/typehints.py...
Checking patch tests/roots/test-ext-napoleon/typehints.rst...
Checking patch tests/test_ext_autodoc_configs.py...
Checking patch tests/test_ext_napoleon_docstring.py...
Applied patch tests/roots/test-ext-autodoc/target/typehints.py cleanly.
Applied patch tests/roots/test-ext-napoleon/conf.py cleanly.
Applied patch tests/roots/test-ext-napoleon/index.rst cleanly.
Applied patch tests/roots/test-ext-napoleon/mypackage/__init__.py cleanly.
Applied patch tests/roots/test-ext-napoleon/mypackage/typehints.py cleanly.
Applied patch tests/roots/test-ext-napoleon/typehints.rst cleanly.
Applied patch tests/test_ext_autodoc_configs.py cleanly.
Applied patch tests/test_ext_napoleon_docstring.py cleanly.
+ tox --current-env -epy39 -v -- tests/roots/test-ext-autodoc/target/typehints.py tests/roots/test-ext-napoleon/conf.py tests/roots/test-ext-napoleon/index.rst tests/roots/test-ext-napoleon/mypackage/__init__.py tests/roots/test-ext-napoleon/mypackage/typehints.py tests/roots/test-ext-napoleon/typehints.rst tests/test_ext_autodoc_configs.py tests/test_ext_napoleon_docstring.py
py39: commands[0]> python -X dev -X warn_default_encoding -m pytest -rA --durations 25 tests/roots/test-ext-autodoc/target/typehints.py tests/roots/test-ext-napoleon/conf.py tests/roots/test-ext-napoleon/index.rst tests/roots/test-ext-napoleon/mypackage/__init__.py tests/roots/test-ext-napoleon/mypackage/typehints.py tests/roots/test-ext-napoleon/typehints.rst tests/test_ext_autodoc_configs.py tests/test_ext_napoleon_docstring.py
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.19, pytest-8.2.2, pluggy-1.5.0
cachedir: .tox/py39/.pytest_cache
libraries: Sphinx-5.1.0+/195e911f1, docutils-0.18.1
base tempdir: /tmp/pytest-of-root/pytest-0
rootdir: /testbed
configfile: setup.cfg
collected 82 items

tests/test_ext_autodoc_configs.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[31mF[0m[32m.[0m[31mF[0m[32m.[0m[31mF[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m        [ 37%][0m
tests/test_ext_napoleon_docstring.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31m [ 80%]
[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[31m                                                         [100%][0m

=================================== FAILURES ===================================
[31m[1m______________________ test_autodoc_typehints_description ______________________[0m

self = <sphinx.events.EventManager object at 0x783d98fab320>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
>                       modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
[1m[31mE                       TypeError: modify_field_list() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:70: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description[39;49;00m(app):[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:887: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2354: in explicit_markup
    [0m[96mself[39;49;00m.explicit_list(blank_finish)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2379: in explicit_list
    [0mnewline_offset, blank_finish = [96mself[39;49;00m.nested_list_parse([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:318: in nested_list_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2657: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d98fab320>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: modify_field_list() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m_________________ test_autodoc_typehints_description_no_undoc __________________[0m

self = <sphinx.events.EventManager object at 0x783d9a432050>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
                [94melif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mdocumented_params[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mTrue[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
>                   augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mFalse[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
[1m[31mE                   TypeError: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:76: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_typehints_description_target[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdocumented[39;49;00m[33m'[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description_no_undoc[39;49;00m(app):[90m[39;49;00m
        [90m# No :type: or :rtype: will be injected for `incr`, which does not have[39;49;00m[90m[39;49;00m
        [90m# a description for its parameters or its return. `tuple_args` does[39;49;00m[90m[39;49;00m
        [90m# describe them, so :type: and :rtype: will be added.[39;49;00m[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mindex.rst[39;49;00m[33m'[39;49;00m).write_text([90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.incr[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.decr[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :returns: decremented number[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.tuple_args[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :param x: arg[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :return: another tuple[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d9a432050>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m____________ test_autodoc_typehints_description_no_undoc_doc_rtype _____________[0m

self = <sphinx.events.EventManager object at 0x783d98d4daa0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
                [94melif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mdocumented_params[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
>                   augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mTrue[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
[1m[31mE                   TypeError: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:72: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_typehints_description_target[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdocumented_params[39;49;00m[33m'[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description_no_undoc_doc_rtype[39;49;00m(app):[90m[39;49;00m
        [90m# No :type: will be injected for `incr`, which does not have a description[39;49;00m[90m[39;49;00m
        [90m# for its parameters or its return, just :rtype: will be injected due to[39;49;00m[90m[39;49;00m
        [90m# autodoc_typehints_description_target. `tuple_args` does describe both, so[39;49;00m[90m[39;49;00m
        [90m# :type: and :rtype: will be added. `nothing` has no parameters but a return[39;49;00m[90m[39;49;00m
        [90m# type of None, which will be added.[39;49;00m[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mindex.rst[39;49;00m[33m'[39;49;00m).write_text([90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.incr[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.decr[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :returns: decremented number[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.tuple_args[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :param x: arg[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :return: another tuple[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.Math.nothing[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.Math.horse[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :return: nothing[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:990: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d98d4daa0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m___________ test_autodoc_typehints_description_with_documented_init ____________[0m

self = <sphinx.events.EventManager object at 0x783d98d4dcd0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'method', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'method'
contentnode = <desc_content: <paragraph...><field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
>                       modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
[1m[31mE                       TypeError: modify_field_list() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:70: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description_with_documented_init[39;49;00m(app):[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mindex.rst[39;49;00m[33m'[39;49;00m).write_text([90m[39;49;00m
            [33m'[39;49;00m[33m.. autoclass:: target.typehints._ClassWithDocumentedInit[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :special-members: __init__[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:1035: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:199: in run
    [0m[96mself[39;49;00m.state.nested_parse([96mself[39;49;00m.content, [96mself[39;49;00m.content_offset, contentnode)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d98d4dcd0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'method', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: modify_field_list() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m_______ test_autodoc_typehints_description_with_documented_init_no_undoc _______[0m

self = <sphinx.events.EventManager object at 0x783d98608910>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'method', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'method'
contentnode = <desc_content: <paragraph...><field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
                [94melif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mdocumented_params[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mTrue[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
                [94melse[39;49;00m:[90m[39;49;00m
>                   augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mFalse[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
[1m[31mE                   TypeError: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:76: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_typehints_description_target[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdocumented[39;49;00m[33m'[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description_with_documented_init_no_undoc[39;49;00m(app):[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mindex.rst[39;49;00m[33m'[39;49;00m).write_text([90m[39;49;00m
            [33m'[39;49;00m[33m.. autoclass:: target.typehints._ClassWithDocumentedInit[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :special-members: __init__[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:1072: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:199: in run
    [0m[96mself[39;49;00m.state.nested_parse([96mself[39;49;00m.content, [96mself[39;49;00m.content_offset, contentnode)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d98608910>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'method', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m__ test_autodoc_typehints_description_with_documented_init_no_undoc_doc_rtype __[0m

self = <sphinx.events.EventManager object at 0x783d98fab9b0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'method', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'method'
contentnode = <desc_content: <paragraph...><field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
                [94melif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mdocumented_params[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
>                   augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mTrue[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
[1m[31mE                   TypeError: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:72: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_typehints_description_target[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdocumented_params[39;49;00m[33m'[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description_with_documented_init_no_undoc_doc_rtype[39;49;00m(app):[90m[39;49;00m
        [90m# see test_autodoc_typehints_description_with_documented_init_no_undoc[39;49;00m[90m[39;49;00m
        [90m# returnvalue_and_documented_params should not change class or method[39;49;00m[90m[39;49;00m
        [90m# docstring.[39;49;00m[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mindex.rst[39;49;00m[33m'[39;49;00m).write_text([90m[39;49;00m
            [33m'[39;49;00m[33m.. autoclass:: target.typehints._ClassWithDocumentedInit[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m   :special-members: __init__[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:1102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:199: in run
    [0m[96mself[39;49;00m.state.nested_parse([96mself[39;49;00m.content, [96mself[39;49;00m.content_offset, contentnode)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d98fab9b0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'method', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m_________________________ test_autodoc_typehints_both __________________________[0m

self = <sphinx.events.EventManager object at 0x783d991debe0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
>                       modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
[1m[31mE                       TypeError: modify_field_list() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:70: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mboth[39;49;00m[33m"[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_both[39;49;00m(app):[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mindex.rst[39;49;00m[33m'[39;49;00m).write_text([90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.incr[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.typehints.tuple_args[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
            [33m'[39;49;00m[33m.. autofunction:: target.overload.sum[39;49;00m[33m\n[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
            encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:1138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d991debe0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: modify_field_list() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                
# warning: 

[31m[1m_____________ test_autodoc_typehints_description_and_type_aliases ______________[0m

self = <sphinx.events.EventManager object at 0x783d9a379640>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <paragraph...><field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
>                       modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
[1m[31mE                       TypeError: modify_field_list() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:70: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>

    [0m[37m@pytest[39;49;00m.mark.skipif(sys.version_info < ([94m3[39;49;00m, [94m7[39;49;00m), reason=[33m'[39;49;00m[33mpython 3.7+ is required.[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
    [37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-autodoc[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        srcdir=[33m'[39;49;00m[33mautodoc_typehints_description_and_type_aliases[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m"[39;49;00m[33mdescription[39;49;00m[33m"[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_type_aliases[39;49;00m[33m'[39;49;00m: {[33m'[39;49;00m[33mmyint[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mmyint[39;49;00m[33m'[39;49;00m}})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_autodoc_typehints_description_and_type_aliases[39;49;00m(app):[90m[39;49;00m
        (app.srcdir / [33m'[39;49;00m[33mautodoc_type_aliases.rst[39;49;00m[33m'[39;49;00m).write_text([33m'[39;49;00m[33m.. autofunction:: target.autodoc_type_aliases.sum[39;49;00m[33m'[39;49;00m, encoding=[33m'[39;49;00m[33mutf8[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_autodoc_configs.py[0m:1320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:106: in parse_generated_content
    [0mstate.nested_parse(content, [94m0[39;49;00m, node)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d9a379640>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <paragraph...><field_list...>>)
results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: modify_field_list() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/autodoc_typehints_description_and_type_aliases
# outdir: /tmp/pytest-of-root/pytest-0/autodoc_typehints_description_and_type_aliases/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 2 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[ 50%] [35mautodoc_type_aliases[39;49;00m                                 
# warning: 

[31m[1m_____________ test_napoleon_and_autodoc_typehints_description_all ______________[0m

self = <sphinx.events.EventManager object at 0x783d97f8f0a0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
>                       modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
[1m[31mE                       TypeError: modify_field_list() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:70: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>
status = <_io.StringIO object at 0x783d99036a50>
warning = <_io.StringIO object at 0x783d99036af0>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-napoleon[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_typehints_description_target[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mall[39;49;00m[33m'[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_napoleon_and_autodoc_typehints_description_all[39;49;00m(app, status, warning):[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_napoleon_docstring.py[0m:2602: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2779: in underline
    [0m[96mself[39;49;00m.section(title, source, style, lineno - [94m1[39;49;00m, messages)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:327: in section
    [0m[96mself[39;49;00m.new_subsection(title, lineno, messages)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:393: in new_subsection
    [0mnewabsoffset = [96mself[39;49;00m.nested_parse([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:102: in parse_generated_content
    [0mnested_parse_with_titles(state, content, node)[90m[39;49;00m
[1m[31msphinx/util/nodes.py[0m:340: in nested_parse_with_titles
    [0m[94mreturn[39;49;00m state.nested_parse(content, [94m0[39;49;00m, node, match_titles=[94m1[39;49;00m)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2354: in explicit_markup
    [0m[96mself[39;49;00m.explicit_list(blank_finish)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2379: in explicit_list
    [0mnewline_offset, blank_finish = [96mself[39;49;00m.nested_list_parse([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:318: in nested_list_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2657: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d97f8f0a0>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: modify_field_list() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-napoleon
# outdir: /tmp/pytest-of-root/pytest-0/ext-napoleon/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 2 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 2 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[ 50%] [35mindex[39;49;00m                                                
[01mreading sources... [39;49;00m[100%] [35mtypehints[39;49;00m                                            
# warning: 

[31m[1m______ test_napoleon_and_autodoc_typehints_description_documented_params _______[0m

self = <sphinx.events.EventManager object at 0x783d987d9d70>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
>               results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m

[1m[31msphinx/events.py[0m:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

app = <SphinxTestApp buildername='text'>, domain = 'py', objtype = 'function'
contentnode = <desc_content: <field_list...>>

    [0m[94mdef[39;49;00m [92mmerge_typehints[39;49;00m(app: Sphinx, domain: [96mstr[39;49;00m, objtype: [96mstr[39;49;00m, contentnode: Element) -> [94mNone[39;49;00m:[90m[39;49;00m
        [94mif[39;49;00m domain != [33m'[39;49;00m[33mpy[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
        [94mif[39;49;00m app.config.autodoc_typehints [95mnot[39;49;00m [95min[39;49;00m ([33m'[39;49;00m[33mboth[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m):[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        processed_params = [96mset[39;49;00m()[90m[39;49;00m
    [90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            signature = cast(addnodes.desc_signature, contentnode.parent[[94m0[39;49;00m])[90m[39;49;00m
            [94mif[39;49;00m signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m]:[90m[39;49;00m
                fullname = [33m'[39;49;00m[33m.[39;49;00m[33m'[39;49;00m.join([signature[[33m'[39;49;00m[33mmodule[39;49;00m[33m'[39;49;00m], signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m]])[90m[39;49;00m
            [94melse[39;49;00m:[90m[39;49;00m
                fullname = signature[[33m'[39;49;00m[33mfullname[39;49;00m[33m'[39;49;00m][90m[39;49;00m
        [94mexcept[39;49;00m [96mKeyError[39;49;00m:[90m[39;49;00m
            [90m# signature node does not have valid context info for the target object[39;49;00m[90m[39;49;00m
            [94mreturn[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        annotations = app.env.temp_data.get([33m'[39;49;00m[33mannotations[39;49;00m[33m'[39;49;00m, {})[90m[39;49;00m
        [94mif[39;49;00m annotations.get(fullname, {}):[90m[39;49;00m
            field_lists = [n [94mfor[39;49;00m n [95min[39;49;00m contentnode [94mif[39;49;00m [96misinstance[39;49;00m(n, nodes.field_list)][90m[39;49;00m
            [94mif[39;49;00m field_lists == []:[90m[39;49;00m
                field_list = insert_field_list(contentnode)[90m[39;49;00m
                field_lists.append(field_list)[90m[39;49;00m
    [90m[39;49;00m
            [94mfor[39;49;00m field_list [95min[39;49;00m field_lists:[90m[39;49;00m
                [94mif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mall[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
                    [94mif[39;49;00m objtype == [33m'[39;49;00m[33mclass[39;49;00m[33m'[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], suppress_rtype=[94mTrue[39;49;00m, processed_params=processed_params)[90m[39;49;00m
                    [94melse[39;49;00m:[90m[39;49;00m
                        modify_field_list(field_list, annotations[fullname], processed_params=processed_params)[90m[39;49;00m
                [94melif[39;49;00m app.config.autodoc_typehints_description_target == [33m"[39;49;00m[33mdocumented_params[39;49;00m[33m"[39;49;00m:[90m[39;49;00m
>                   augment_descriptions_with_types([90m[39;49;00m
                        field_list, annotations[fullname], force_rtype=[94mTrue[39;49;00m, processed_params=processed_params[90m[39;49;00m
                    )[90m[39;49;00m
[1m[31mE                   TypeError: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params'[0m

[1m[31msphinx/ext/autodoc/typehints.py[0m:72: TypeError

[33mThe above exception was the direct cause of the following exception:[0m

app = <SphinxTestApp buildername='text'>
status = <_io.StringIO object at 0x783d988720f0>
warning = <_io.StringIO object at 0x783d988724b0>

    [0m[37m@pytest[39;49;00m.mark.sphinx([33m'[39;49;00m[33mtext[39;49;00m[33m'[39;49;00m, testroot=[33m'[39;49;00m[33mext-napoleon[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                        confoverrides={[33m'[39;49;00m[33mautodoc_typehints[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
                                       [33m'[39;49;00m[33mautodoc_typehints_description_target[39;49;00m[33m'[39;49;00m: [33m'[39;49;00m[33mdocumented_params[39;49;00m[33m'[39;49;00m})[90m[39;49;00m
    [94mdef[39;49;00m [92mtest_napoleon_and_autodoc_typehints_description_documented_params[39;49;00m(app, status, warning):[90m[39;49;00m
>       app.build()[90m[39;49;00m

[1m[31mtests/test_ext_napoleon_docstring.py[0m:2626: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31msphinx/application.py[0m:329: in build
    [0m[96mself[39;49;00m.builder.build_update()[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:287: in build_update
    [0m[96mself[39;49;00m.build(to_build,[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:301: in build
    [0mupdated_docnames = [96mset[39;49;00m([96mself[39;49;00m.read())[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:408: in read
    [0m[96mself[39;49;00m._read_serial(docnames)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:429: in _read_serial
    [0m[96mself[39;49;00m.read_doc(docname)[90m[39;49;00m
[1m[31msphinx/builders/__init__.py[0m:476: in read_doc
    [0mpublisher.publish()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/core.py[0m:217: in publish
    [0m[96mself[39;49;00m.document = [96mself[39;49;00m.reader.read([96mself[39;49;00m.source, [96mself[39;49;00m.parser,[90m[39;49;00m
[1m[31msphinx/io.py[0m:103: in read
    [0m[96mself[39;49;00m.parse()[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/readers/__init__.py[0m:78: in parse
    [0m[96mself[39;49;00m.parser.parse([96mself[39;49;00m.input, document)[90m[39;49;00m
[1m[31msphinx/parsers.py[0m:78: in parse
    [0m[96mself[39;49;00m.statemachine.run(inputlines, document, inliner=[96mself[39;49;00m.inliner)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:170: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2779: in underline
    [0m[96mself[39;49;00m.section(title, source, style, lineno - [94m1[39;49;00m, messages)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:327: in section
    [0m[96mself[39;49;00m.new_subsection(title, lineno, messages)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:393: in new_subsection
    [0mnewabsoffset = [96mself[39;49;00m.nested_parse([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2352: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:159: in run
    [0mresult = parse_generated_content([96mself[39;49;00m.state, params.result, documenter)[90m[39;49;00m
[1m[31msphinx/ext/autodoc/directive.py[0m:102: in parse_generated_content
    [0mnested_parse_with_titles(state, content, node)[90m[39;49;00m
[1m[31msphinx/util/nodes.py[0m:340: in nested_parse_with_titles
    [0m[94mreturn[39;49;00m state.nested_parse(content, [94m0[39;49;00m, node, match_titles=[94m1[39;49;00m)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:281: in nested_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2354: in explicit_markup
    [0m[96mself[39;49;00m.explicit_list(blank_finish)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2379: in explicit_list
    [0mnewline_offset, blank_finish = [96mself[39;49;00m.nested_list_parse([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:318: in nested_list_parse
    [0mstate_machine.run(block, input_offset, memo=[96mself[39;49;00m.memo,[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:196: in run
    [0mresults = StateMachineWS.run([96mself[39;49;00m, input_lines, input_offset)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:240: in run
    [0mcontext, next_state, result = [96mself[39;49;00m.check_line([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/statemachine.py[0m:452: in check_line
    [0m[94mreturn[39;49;00m method(match, context, next_state)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2657: in explicit_markup
    [0mnodelist, blank_finish = [96mself[39;49;00m.explicit_construct(match)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2364: in explicit_construct
    [0m[94mreturn[39;49;00m method([96mself[39;49;00m, expmatch)[90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2101: in directive
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.run_directive([90m[39;49;00m
[1m[31m/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/docutils/parsers/rst/states.py[0m:2151: in run_directive
    [0mresult = directive_instance.run()[90m[39;49;00m
[1m[31msphinx/domains/__init__.py[0m:281: in run
    [0m[94mreturn[39;49;00m [96msuper[39;49;00m().run()[90m[39;49;00m
[1m[31msphinx/directives/__init__.py[0m:201: in run
    [0m[96mself[39;49;00m.env.app.emit([33m'[39;49;00m[33mobject-description-transform[39;49;00m[33m'[39;49;00m,[90m[39;49;00m
[1m[31msphinx/application.py[0m:439: in emit
    [0m[94mreturn[39;49;00m [96mself[39;49;00m.events.emit(event, *args, allowed_exceptions=allowed_exceptions)[90m[39;49;00m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sphinx.events.EventManager object at 0x783d987d9d70>
name = 'object-description-transform', allowed_exceptions = ()
args = ('py', 'function', <desc_content: <field_list...>>), results = [None]
listeners = [EventListener(id=26, handler=<function filter_meta_fields at 0x783d99d74550>, priority=500), EventListener(id=66, handler=<function merge_typehints at 0x783d98d30cd0>, priority=500)]

    [0m[94mdef[39;49;00m [92memit[39;49;00m([96mself[39;49;00m, name: [96mstr[39;49;00m, *args: Any,[90m[39;49;00m
             allowed_exceptions: Tuple[Type[[96mException[39;49;00m], ...] = ()) -> List:[90m[39;49;00m
    [90m    [39;49;00m[33m"""Emit a Sphinx event."""[39;49;00m[90m[39;49;00m
        [94mtry[39;49;00m:[90m[39;49;00m
            logger.debug([33m'[39;49;00m[33m[app] emitting event: [39;49;00m[33m%r[39;49;00m[33m%s[39;49;00m[33m'[39;49;00m, name, [96mrepr[39;49;00m(args)[:[94m100[39;49;00m])[90m[39;49;00m
        [94mexcept[39;49;00m [96mException[39;49;00m:[90m[39;49;00m
            [90m# not every object likes to be repr()'d (think[39;49;00m[90m[39;49;00m
            [90m# random stuff coming via autodoc)[39;49;00m[90m[39;49;00m
            [94mpass[39;49;00m[90m[39;49;00m
    [90m[39;49;00m
        results = [][90m[39;49;00m
        listeners = [96msorted[39;49;00m([96mself[39;49;00m.listeners[name], key=attrgetter([33m"[39;49;00m[33mpriority[39;49;00m[33m"[39;49;00m))[90m[39;49;00m
        [94mfor[39;49;00m listener [95min[39;49;00m listeners:[90m[39;49;00m
            [94mtry[39;49;00m:[90m[39;49;00m
                results.append(listener.handler([96mself[39;49;00m.app, *args))[90m[39;49;00m
            [94mexcept[39;49;00m allowed_exceptions:[90m[39;49;00m
                [90m# pass through the errors specified as *allowed_exceptions*[39;49;00m[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m SphinxError:[90m[39;49;00m
                [94mraise[39;49;00m[90m[39;49;00m
            [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m exc:[90m[39;49;00m
                modname = safe_getattr(listener.handler, [33m'[39;49;00m[33m__module__[39;49;00m[33m'[39;49;00m, [94mNone[39;49;00m)[90m[39;49;00m
>               [94mraise[39;49;00m ExtensionError(__([33m"[39;49;00m[33mHandler [39;49;00m[33m%r[39;49;00m[33m for event [39;49;00m[33m%r[39;49;00m[33m threw an exception[39;49;00m[33m"[39;49;00m) %[90m[39;49;00m
                                     (listener.handler, name), exc, modname=modname) [94mfrom[39;49;00m [04m[96mexc[39;49;00m[90m[39;49;00m
[1m[31mE               sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98d30cd0> for event 'object-description-transform' threw an exception (exception: augment_descriptions_with_types() got an unexpected keyword argument 'processed_params')[0m

[1m[31msphinx/events.py[0m:102: ExtensionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-napoleon
# outdir: /tmp/pytest-of-root/pytest-0/ext-napoleon/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [text]: [39;49;00mtargets for 2 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 2 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[ 50%] [35mindex[39;49;00m                                                
[01mreading sources... [39;49;00m[100%] [35mtypehints[39;49;00m                                            
# warning: 

==================================== PASSES ====================================
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: text
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/text
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/ext-autodoc
# outdir: /tmp/pytest-of-root/pytest-0/ext-autodoc/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v5.1.0+/195e911f1[39;49;00m

# warning: 

[32m[1m__________________ TestNumpyDocstring.test_pep526_annotations __________________[0m
----------------------------- Captured stdout call -----------------------------
Sample class with PEP 526 annotations and numpy docstring

.. attribute:: attr1

   Attr1 description

   :type: int

.. attribute:: attr2

   Attr2 description

   :type: str

============================= slowest 25 durations =============================
0.52s setup    tests/test_ext_autodoc_configs.py::test_autoclass_content_class
0.17s call     tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified
0.17s call     tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature
0.16s call     tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none
0.13s call     tests/test_ext_autodoc_configs.py::test_autodoc_default_options
0.11s call     tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values
0.05s call     tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description
0.04s setup    tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_token_type_invalid
0.03s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_class_alias
0.03s setup    tests/test_ext_autodoc_configs.py::test_autodoc_default_options
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_generic_alias
0.02s call     tests/test_ext_autodoc_configs.py::test_autoclass_content_class
0.02s call     tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_format_fully_qualified_for_newtype_alias
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init
0.02s setup    tests/test_ext_napoleon_docstring.py::test_napoleon_and_autodoc_typehints_description_all
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new
0.02s setup    tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init
0.02s setup    tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload
0.02s setup    tests/test_ext_autodoc_configs.py::test_autoclass_content_init
0.02s setup    tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature
0.02s call     tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature
[36m[1m=========================== short test summary info ============================[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autoclass_content_class[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autoclass_content_init[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_class_signature_mixed[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_class_signature_separated_init[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_class_signature_separated_new[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autoclass_content_both[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_inherit_docstrings[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_docstring_signature[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autoclass_content_and_docstring_signature_class[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autoclass_content_and_docstring_signature_init[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autoclass_content_and_docstring_signature_both[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_mocked_module_imports[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_signature[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_none[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_none_for_overload[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_for_invalid_node[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_type_aliases[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_format_fully_qualified[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_format_fully_qualified_for_class_alias[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_format_fully_qualified_for_generic_alias[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_format_fully_qualified_for_newtype_alias[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_default_options[0m
[32mPASSED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_default_options_with_values[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNamedtupleSubclassTest::test_attributes_docstring[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mInlineAttributeTest::test_class_data_member[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mInlineAttributeTest::test_class_data_member_inline[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mInlineAttributeTest::test_class_data_member_inline_no_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mInlineAttributeTest::test_class_data_member_inline_ref_in_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_attributes_with_class_reference[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_attributes_with_use_ivar[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_code_block_in_returns_section[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_colon_in_return_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_custom_generic_sections[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_docstrings[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_keywords_with_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_kwargs_in_arguments[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_list_in_parameter_description[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_noindex[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_parameters_with_class_reference[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_pep526_annotations[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_preprocess_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_raises_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_section_header_formatting[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_sphinx_admonitions[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mGoogleDocstringTest::test_xrefs_in_return_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_colon_in_return_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_convert_numpy_type_spec[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_docstrings[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_list_in_parameter_description[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_multiple_parameters[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_parameter_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_parameters_with_class_reference[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_parameters_without_class_reference[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_raises_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_recombine_set_tokens[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_recombine_set_tokens_invalid[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_return_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_section_header_underline_length[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_see_also_refs[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_sphinx_admonitions[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_token_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_tokenize_type_spec[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_type_preprocessor[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_underscore_in_attribute[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_xrefs_in_return_type[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mNumpyDocstringTest::test_yield_types[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mTestNumpyDocstring::test_token_type_invalid[0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mTestNumpyDocstring::test_escape_args_and_kwargs[x, y, z-x, y, z][0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mTestNumpyDocstring::test_escape_args_and_kwargs[*args, **kwargs-\\*args, \\*\\*kwargs][0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mTestNumpyDocstring::test_escape_args_and_kwargs[*x, **y-\\*x, \\*\\*y][0m
[32mPASSED[0m tests/test_ext_napoleon_docstring.py::[1mTestNumpyDocstring::test_pep526_annotations[0m
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_no_undoc[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_no_undoc_doc_rtype[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_with_documented_init[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_with_documented_init_no_undoc[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_with_documented_init_no_undoc_doc_rtype[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_both[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_autodoc_configs.py::[1mtest_autodoc_typehints_description_and_type_aliases[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_napoleon_docstring.py::[1mtest_napoleon_and_autodoc_typehints_description_all[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31mFAILED[0m tests/test_ext_napoleon_docstring.py::[1mtest_napoleon_and_autodoc_typehints_description_documented_params[0m - sphinx.errors.ExtensionError: Handler <function merge_typehints at 0x783d98...
[31m======================== [31m[1m10 failed[0m, [32m72 passed[0m[31m in 8.94s[0m[31m =========================[0m
py39: exit 1 (9.77 seconds) /testbed> python -X dev -X warn_default_encoding -m pytest -rA --durations 25 tests/roots/test-ext-autodoc/target/typehints.py tests/roots/test-ext-napoleon/conf.py tests/roots/test-ext-napoleon/index.rst tests/roots/test-ext-napoleon/mypackage/__init__.py tests/roots/test-ext-napoleon/mypackage/typehints.py tests/roots/test-ext-napoleon/typehints.rst tests/test_ext_autodoc_configs.py tests/test_ext_napoleon_docstring.py pid=119
  py39: FAIL code 1 (9.78=setup[0.02]+cmd[9.77] seconds)
  evaluation failed :( (9.91 seconds)
+ git checkout 195e911f1dab04b8ddeacbe04b7d214aaf81bb0b tests/roots/test-ext-autodoc/target/typehints.py tests/test_ext_autodoc_configs.py tests/test_ext_napoleon_docstring.py
Updated 3 paths from 1aabd772f

