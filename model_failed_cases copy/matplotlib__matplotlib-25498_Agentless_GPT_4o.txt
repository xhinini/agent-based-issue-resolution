# Instance ID: matplotlib__matplotlib-25498
# Model: Agentless GPT-4o

### Original Case Description and Gold Patch
# INSTANCE_ID: matplotlib__matplotlib-25498

### ISSUE TYPE
bug fix

### DESCRIPTION
Update colorbar after changing mappable.norm
How can I update a colorbar, after I changed the norm instance of the colorbar?

`colorbar.update_normal(mappable)` has now effect and `colorbar.update_bruteforce(mappable)` throws a `ZeroDivsionError`-Exception.

Consider this example:

``` python
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
import numpy as np

img = 10**np.random.normal(1, 1, size=(50, 50))

fig, ax = plt.subplots(1, 1)
plot = ax.imshow(img, cmap='gray')
cb = fig.colorbar(plot, ax=ax)
plot.norm = LogNorm()
cb.update_normal(plot)  # no effect
cb.update_bruteforce(plot)  # throws ZeroDivisionError
plt.show()
```

Output for `cb.update_bruteforce(plot)`:

```
Traceback (most recent call last):
  File "test_norm.py", line 12, in <module>
    cb.update_bruteforce(plot)
  File "/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colorbar.py", line 967, in update_bruteforce
    self.draw_all()
  File "/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colorbar.py", line 342, in draw_all
    self._process_values()
  File "/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colorbar.py", line 664, in _process_values
    b = self.norm.inverse(self._uniform_y(self.cmap.N + 1))
  File "/home/maxnoe/.local/anaconda3/lib/python3.4/site-packages/matplotlib/colors.py", line 1011, in inverse
    return vmin * ma.power((vmax / vmin), val)
ZeroDivisionError: division by zero
```



### GOLD_PATCH
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -301,11 +301,6 @@ def __init__(self, ax, mappable=None, *, cmap=None,
         if mappable is None:
             mappable = cm.ScalarMappable(norm=norm, cmap=cmap)
 
-        # Ensure the given mappable's norm has appropriate vmin and vmax
-        # set even if mappable.draw has not yet been called.
-        if mappable.get_array() is not None:
-            mappable.autoscale_None()
-
         self.mappable = mappable
         cmap = mappable.cmap
         norm = mappable.norm
@@ -1101,7 +1096,10 @@ def _process_values(self):
             b = np.hstack((b, b[-1] + 1))
 
         # transform from 0-1 to vmin-vmax:
+        if self.mappable.get_array() is not None:
+            self.mappable.autoscale_None()
         if not self.norm.scaled():
+            # If we still aren't scaled after autoscaling, use 0, 1 as default
             self.norm.vmin = 0
             self.norm.vmax = 1
         self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index 6151185..92a8e14 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -1102,10 +1102,10 @@ class Colorbar:
 
         # transform from 0-1 to vmin-vmax:
         if not self.norm.scaled():
-            self.norm.vmin = 0
-            self.norm.vmax = 1
-        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
-            self.norm.vmin, self.norm.vmax, expander=0.1)
+            self.norm.vmin, self.norm.vmax = self.mappable.get_array().min(), self.mappable.get_array().max()
+        else:
+            self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
+                self.norm.vmin, self.norm.vmax, expander=0.1)
         if (not isinstance(self.norm, colors.BoundaryNorm) and
                 (self.boundaries is None)):
             b = self.norm.inverse(b)


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/colorbar.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b
Merge: 3074d30a7b 1d0fc0c0ae
Author: Kyle Sunden <git@ksunden.space>
Date:   Fri Mar 17 13:01:27 2023 -0500

    Merge pull request #25475 from QuLogic/no-wheel32
    
    Stop building 32-bit Linux wheels

+ git diff 78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index d3d53e3d98..43a1d603c3 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -1102,10 +1102,10 @@ class Colorbar:
 
         # transform from 0-1 to vmin-vmax:
         if not self.norm.scaled():
-            self.norm.vmin = 0
-            self.norm.vmax = 1
-        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
-            self.norm.vmin, self.norm.vmax, expander=0.1)
+            self.norm.vmin, self.norm.vmax = self.mappable.get_array().min(), self.mappable.get_array().max()
+        else:
+            self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
+                self.norm.vmin, self.norm.vmax, expander=0.1)
         if (not isinstance(self.norm, colors.BoundaryNorm) and
                 (self.boundaries is None)):
             b = self.norm.inverse(b)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (1.4.5)
Requirement already satisfied: numpy>=1.21 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (10.0.0)
Requirement already satisfied: pyparsing>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (2.8.2)
Requirement already satisfied: setuptools-scm>=7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools-scm>=7->matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools-scm>=7->matplotlib==3.8.0.dev635+g78bf53caac.d20240716) (4.7.1)
Building wheels for collected packages: matplotlib
  Building editable for matplotlib (pyproject.toml): started
  Building editable for matplotlib (pyproject.toml): finished with status 'done'
  Created wheel for matplotlib: filename=matplotlib-3.8.0.dev635+g78bf53caac.d20240716-0.editable-cp311-cp311-linux_x86_64.whl size=23292 sha256=37f849dc846ff192b6803e79566e1d5f7d4de634997db17bd55d3d2ac9932b28
  Stored in directory: /tmp/pip-ephem-wheel-cache-3izk6sd2/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built matplotlib
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.8.0.dev635+g78bf53caac
    Uninstalling matplotlib-3.8.0.dev635+g78bf53caac:
      Successfully uninstalled matplotlib-3.8.0.dev635+g78bf53caac
Successfully installed matplotlib-3.8.0.dev635+g78bf53caac.d20240716
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b lib/matplotlib/tests/test_colorbar.py
Updated 0 paths from a40bb1c673
+ git apply -v -
Checking patch lib/matplotlib/tests/test_colorbar.py...
Applied patch lib/matplotlib/tests/test_colorbar.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_colorbar.py
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: rerunfailures-14.0, cov-5.0.0, timeout-2.3.1, xdist-3.6.1
collected 71 items

lib/matplotlib/tests/test_colorbar.py ...................FF............. [ 47%]
......F..........F......s............                                    [100%]

=================================== FAILURES ===================================
______________________________ test_colorbarbase _______________________________

    def test_colorbarbase():
        # smoke test from #3805
        ax = plt.gca()
>       Colorbar(ax, cmap=plt.cm.bone)

lib/matplotlib/tests/test_colorbar.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:402: in __init__
    self._reset_locator_formatter_scale()
lib/matplotlib/colorbar.py:1173: in _reset_locator_formatter_scale
    self._process_values()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.colorbar.Colorbar object at 0x739793f8cd10>

    def _process_values(self):
        """
        Set `_boundaries` and `_values` based on the self.boundaries and
        self.values if not None, or based on the size of the colormap and
        the vmin/vmax of the norm.
        """
        if self.values is not None:
            # set self._boundaries from the values...
            self._values = np.array(self.values)
            if self.boundaries is None:
                # bracket values by 1/2 dv:
                b = np.zeros(len(self.values) + 1)
                b[1:-1] = 0.5 * (self._values[:-1] + self._values[1:])
                b[0] = 2.0 * b[1] - b[2]
                b[-1] = 2.0 * b[-2] - b[-3]
                self._boundaries = b
                return
            self._boundaries = np.array(self.boundaries)
            return
    
        # otherwise values are set from the boundaries
        if isinstance(self.norm, colors.BoundaryNorm):
            b = self.norm.boundaries
        elif isinstance(self.norm, colors.NoNorm):
            # NoNorm has N blocks, so N+1 boundaries, centered on integers:
            b = np.arange(self.cmap.N + 1) - .5
        elif self.boundaries is not None:
            b = self.boundaries
        else:
            # otherwise make the boundaries from the size of the cmap:
            N = self.cmap.N + 1
            b, _ = self._uniform_y(N)
        # add extra boundaries if needed:
        if self._extend_lower():
            b = np.hstack((b[0] - 1, b))
        if self._extend_upper():
            b = np.hstack((b, b[-1] + 1))
    
        # transform from 0-1 to vmin-vmax:
        if not self.norm.scaled():
>           self.norm.vmin, self.norm.vmax = self.mappable.get_array().min(), self.mappable.get_array().max()
E           AttributeError: 'NoneType' object has no attribute 'min'

lib/matplotlib/colorbar.py:1105: AttributeError
___________________________ test_parentless_mappable ___________________________

    def test_parentless_mappable():
        pc = mpl.collections.PatchCollection([], cmap=plt.get_cmap('viridis'))
        pc.set_array([])
    
        with pytest.warns(_api.MatplotlibDeprecationWarning,
                          match='Unable to determine Axes to steal'):
>           plt.colorbar(pc)

lib/matplotlib/tests/test_colorbar.py:330: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2136: in colorbar
    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)
lib/matplotlib/figure.py:1286: in colorbar
    cb = cbar.Colorbar(cax, mappable, **{
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:402: in __init__
    self._reset_locator_formatter_scale()
lib/matplotlib/colorbar.py:1173: in _reset_locator_formatter_scale
    self._process_values()
lib/matplotlib/colorbar.py:1105: in _process_values
    self.norm.vmin, self.norm.vmax = self.mappable.get_array().min(), self.mappable.get_array().max()
/opt/miniconda3/envs/testbed/lib/python3.11/site-packages/numpy/ma/core.py:5828: in min
    result = self.filled(fill_value).min(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = array([], dtype=float64), axis = None, out = None, keepdims = False
initial = <no value>, where = True

    def _amin(a, axis=None, out=None, keepdims=False,
              initial=_NoValue, where=True):
>       return umr_minimum(a, axis, None, out, keepdims, initial, where)
E       ValueError: zero-size array to reduction operation minimum which has no identity

/opt/miniconda3/envs/testbed/lib/python3.11/site-packages/numpy/core/_methods.py:45: ValueError
____________________________ test_mappable_no_alpha ____________________________

    def test_mappable_no_alpha():
        fig, ax = plt.subplots()
        sm = cm.ScalarMappable(norm=mcolors.Normalize(), cmap='viridis')
>       fig.colorbar(sm, ax=ax)

lib/matplotlib/tests/test_colorbar.py:699: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:1286: in colorbar
    cb = cbar.Colorbar(cax, mappable, **{
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:402: in __init__
    self._reset_locator_formatter_scale()
lib/matplotlib/colorbar.py:1173: in _reset_locator_formatter_scale
    self._process_values()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.colorbar.Colorbar object at 0x7397985beb90>

    def _process_values(self):
        """
        Set `_boundaries` and `_values` based on the self.boundaries and
        self.values if not None, or based on the size of the colormap and
        the vmin/vmax of the norm.
        """
        if self.values is not None:
            # set self._boundaries from the values...
            self._values = np.array(self.values)
            if self.boundaries is None:
                # bracket values by 1/2 dv:
                b = np.zeros(len(self.values) + 1)
                b[1:-1] = 0.5 * (self._values[:-1] + self._values[1:])
                b[0] = 2.0 * b[1] - b[2]
                b[-1] = 2.0 * b[-2] - b[-3]
                self._boundaries = b
                return
            self._boundaries = np.array(self.boundaries)
            return
    
        # otherwise values are set from the boundaries
        if isinstance(self.norm, colors.BoundaryNorm):
            b = self.norm.boundaries
        elif isinstance(self.norm, colors.NoNorm):
            # NoNorm has N blocks, so N+1 boundaries, centered on integers:
            b = np.arange(self.cmap.N + 1) - .5
        elif self.boundaries is not None:
            b = self.boundaries
        else:
            # otherwise make the boundaries from the size of the cmap:
            N = self.cmap.N + 1
            b, _ = self._uniform_y(N)
        # add extra boundaries if needed:
        if self._extend_lower():
            b = np.hstack((b[0] - 1, b))
        if self._extend_upper():
            b = np.hstack((b, b[-1] + 1))
    
        # transform from 0-1 to vmin-vmax:
        if not self.norm.scaled():
>           self.norm.vmin, self.norm.vmax = self.mappable.get_array().min(), self.mappable.get_array().max()
E           AttributeError: 'NoneType' object has no attribute 'min'

lib/matplotlib/colorbar.py:1105: AttributeError
_______________ test_remove_cb_whose_mappable_has_no_figure[png] _______________

ext = 'png'
request = <FixtureRequest for <Function test_remove_cb_whose_mappable_has_no_figure[png]>>
args = (), kwargs = {}
file_name = 'test_remove_cb_whose_mappable_has_no_figure[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:408: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_colorbar.py:903: in test_remove_cb_whose_mappable_has_no_figure
    cb = fig_test.colorbar(cm.ScalarMappable(), cax=ax)
lib/matplotlib/figure.py:1286: in colorbar
    cb = cbar.Colorbar(cax, mappable, **{
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:402: in __init__
    self._reset_locator_formatter_scale()
lib/matplotlib/colorbar.py:1173: in _reset_locator_formatter_scale
    self._process_values()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.colorbar.Colorbar object at 0x739798732950>

    def _process_values(self):
        """
        Set `_boundaries` and `_values` based on the self.boundaries and
        self.values if not None, or based on the size of the colormap and
        the vmin/vmax of the norm.
        """
        if self.values is not None:
            # set self._boundaries from the values...
            self._values = np.array(self.values)
            if self.boundaries is None:
                # bracket values by 1/2 dv:
                b = np.zeros(len(self.values) + 1)
                b[1:-1] = 0.5 * (self._values[:-1] + self._values[1:])
                b[0] = 2.0 * b[1] - b[2]
                b[-1] = 2.0 * b[-2] - b[-3]
                self._boundaries = b
                return
            self._boundaries = np.array(self.boundaries)
            return
    
        # otherwise values are set from the boundaries
        if isinstance(self.norm, colors.BoundaryNorm):
            b = self.norm.boundaries
        elif isinstance(self.norm, colors.NoNorm):
            # NoNorm has N blocks, so N+1 boundaries, centered on integers:
            b = np.arange(self.cmap.N + 1) - .5
        elif self.boundaries is not None:
            b = self.boundaries
        else:
            # otherwise make the boundaries from the size of the cmap:
            N = self.cmap.N + 1
            b, _ = self._uniform_y(N)
        # add extra boundaries if needed:
        if self._extend_lower():
            b = np.hstack((b[0] - 1, b))
        if self._extend_upper():
            b = np.hstack((b, b[-1] + 1))
    
        # transform from 0-1 to vmin-vmax:
        if not self.norm.scaled():
>           self.norm.vmin, self.norm.vmax = self.mappable.get_array().min(), self.mappable.get_array().max()
E           AttributeError: 'NoneType' object has no attribute 'min'

lib/matplotlib/colorbar.py:1105: AttributeError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_shape[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_length[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-horizontal]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[min-expected0-vertical]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-horizontal]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[max-expected1-vertical]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-horizontal]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extension_inverted_axis[both-expected2-vertical]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-True]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_positioning[png-False]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_false
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[standard]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_ax_panchor_east[constrained]
PASSED lib/matplotlib/tests/test_colorbar.py::test_contour_colorbar[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_gridspec_make_colorbar[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_single_scatter[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[no gridspec]
PASSED lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure[with gridspec]
PASSED lib/matplotlib/tests/test_colorbar.py::test_remove_from_figure_cl
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_closed_patch[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_ticks
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_minorticks_on_off
PASSED lib/matplotlib/tests/test_colorbar.py::test_cbar_minorticks_for_rc_xyminortickvisible
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_autoticks
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_autotickslog
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[both]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[min]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_lognorm_extension[max]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_powernorm_extension
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_kw
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_log_minortick_labels
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_renorm
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[%4.2e]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_format[{x:.2e}]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_scale_reset
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_get_ticks_2
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_inverted_ticks
PASSED lib/matplotlib/tests/test_colorbar.py::test_mappable_2d_alpha
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_label
PASSED lib/matplotlib/tests/test_colorbar.py::test_keeping_xlabel[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1]
PASSED lib/matplotlib/tests/test_colorbar.py::test_anchored_cbar_position_using_specgrid
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_change_lim_scale[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_axes_handles_same_functions[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_inset_colorbar_layout
PASSED lib/matplotlib/tests/test_colorbar.py::test_twoslope_colorbar[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_aspects
PASSED lib/matplotlib/tests/test_colorbar.py::test_proportional_colorbars[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_drawedges[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_contourf_extend_patches[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_negative_boundarynorm
PASSED lib/matplotlib/tests/test_colorbar.py::test_centerednorm
PASSED lib/matplotlib/tests/test_colorbar.py::test_boundaries[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_no_warning_rcparams_grid_true
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_set_formatter_locator
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_extend_alpha[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_offset_text_loc
PASSED lib/matplotlib/tests/test_colorbar.py::test_title_text_loc
PASSED lib/matplotlib/tests/test_colorbar.py::test_passing_location[png]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs0-TypeError-location and orientation are mutually exclusive]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs1-TypeError-location and orientation are mutually exclusive]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs2-ValueError-'top' is not a valid value for position]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_errors[kwargs3-ValueError-invalid value for extendfrac]
PASSED lib/matplotlib/tests/test_colorbar.py::test_colorbar_axes_parmeters
SKIPPED [1] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed
FAILED lib/matplotlib/tests/test_colorbar.py::test_colorbarbase - AttributeEr...
FAILED lib/matplotlib/tests/test_colorbar.py::test_parentless_mappable - Valu...
FAILED lib/matplotlib/tests/test_colorbar.py::test_mappable_no_alpha - Attrib...
FAILED lib/matplotlib/tests/test_colorbar.py::test_remove_cb_whose_mappable_has_no_figure[png]
=================== 4 failed, 66 passed, 1 skipped in 13.23s ===================
+ git checkout 78bf53caacbb5ce0dc7aa73f07a74c99f1ed919b lib/matplotlib/tests/test_colorbar.py
Updated 1 path from a40bb1c673

