# Instance ID: django__django-11630
# Model: Aider

### Original Case Description and Gold Patch
# INSTANCE_ID: django__django-11630

### ISSUE TYPE
bug fix

### DESCRIPTION
Django throws error when different apps with different models have the same name table name.
Description
	
Error message:
table_name: (models.E028) db_table 'table_name' is used by multiple models: base.ModelName, app2.ModelName.
We have a Base app that points to a central database and that has its own tables. We then have multiple Apps that talk to their own databases. Some share the same table names.
We have used this setup for a while, but after upgrading to Django 2.2 we're getting an error saying we're not allowed 2 apps, with 2 different models to have the same table names. 
Is this correct behavior? We've had to roll back to Django 2.0 for now.


### GOLD_PATCH
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -4,7 +4,8 @@
 from itertools import chain
 
 from django.apps import apps
-from django.core.checks import Error, Tags, register
+from django.conf import settings
+from django.core.checks import Error, Tags, Warning, register
 
 
 @register(Tags.models)
@@ -35,14 +36,25 @@ def check_all_models(app_configs=None, **kwargs):
             indexes[model_index.name].append(model._meta.label)
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
+    if settings.DATABASE_ROUTERS:
+        error_class, error_id = Warning, 'models.W035'
+        error_hint = (
+            'You have configured settings.DATABASE_ROUTERS. Verify that %s '
+            'are correctly routed to separate databases.'
+        )
+    else:
+        error_class, error_id = Error, 'models.E028'
+        error_hint = None
     for db_table, model_labels in db_table_models.items():
         if len(model_labels) != 1:
+            model_labels_str = ', '.join(model_labels)
             errors.append(
-                Error(
+                error_class(
                     "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
+                    % (db_table, model_labels_str),
                     obj=db_table,
-                    id='models.E028',
+                    hint=(error_hint % model_labels_str) if error_hint else None,
+                    id=error_id,
                 )
             )
     for index_name, model_labels in indexes.items():


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..e500ca876e 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -978,7 +978,7 @@ class Model(metaclass=ModelBase):
         """
         unique_checks, date_checks = self._get_unique_checks(exclude=exclude)
 
-        errors = self._perform_unique_checks(unique_checks)
+        errors = self._perform_unique_checks(unique_checks, self.__class__)
         date_errors = self._perform_date_checks(date_checks)
 
         for k, v in date_errors.items():
@@ -1046,7 +1046,7 @@ class Model(metaclass=ModelBase):
                     date_checks.append((model_class, 'month', name, f.unique_for_month))
         return unique_checks, date_checks
 
-    def _perform_unique_checks(self, unique_checks):
+    def _perform_unique_checks(self, unique_checks, cls):
         errors = {}
 
         for model_class, unique_check in unique_checks:
@@ -1089,6 +1089,48 @@ class Model(metaclass=ModelBase):
                     key = NON_FIELD_ERRORS
                 errors.setdefault(key, []).append(self.unique_error_message(model_class, unique_check))
 
+        # Allow different apps to have models with the same table name.
+        used_table_names = {}
+        for model in apps.get_models():
+            table_name = model._meta.db_table
+            if table_name in used_table_names:
+                if used_table_names[table_name] != model._meta.app_label:
+                    errors.append(
+                        checks.Error(
+                            "db_table '%s' is used by multiple models: %s.%s, %s.%s." % (
+                                table_name,
+                                used_table_names[table_name],
+                                model._meta.object_name,
+                                model._meta.app_label,
+                                model._meta.object_name,
+                            ),
+                            obj=cls,
+                            id='models.E028',
+                        )
+                    )
+            else:
+                used_table_names[table_name] = model._meta.app_label
+        # Allow different apps to have models with the same table name.
+        used_table_names = {}
+        for model in apps.get_models():
+            table_name = model._meta.db_table
+            if table_name in used_table_names:
+                if used_table_names[table_name] != model._meta.app_label:
+                    errors.append(
+                        checks.Error(
+                            "db_table '%s' is used by multiple models: %s.%s, %s.%s." % (
+                                table_name,
+                                used_table_names[table_name],
+                                model._meta.object_name,
+                                model._meta.app_label,
+                                model._meta.object_name,
+                            ),
+                            obj=cls,
+                            id='models.E028',
+                        )
+                    )
+            else:
+                used_table_names[table_name] = model._meta.app_label
         return errors
 
     def _perform_date_checks(self, date_checks):


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/base.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 65e86948b80262574058a94ccaae3a9b59c3faea
Author: Min ho Kim <minho42@gmail.com>
Date:   Tue Aug 6 01:47:50 2019 +1000

    Corrected several typos in string literals and test names.

diff --git a/django/contrib/gis/gdal/prototypes/srs.py b/django/contrib/gis/gdal/prototypes/srs.py
index 9b1da3ee06..45d5234346 100644
--- a/django/contrib/gis/gdal/prototypes/srs.py
+++ b/django/contrib/gis/gdal/prototypes/srs.py
@@ -65,7 +65,7 @@ to_pretty_wkt = string_output(
 # Memory leak fixed in GDAL 1.5; still exists in 1.4.
 to_xml = string_output(lgdal.OSRExportToXML, [c_void_p, POINTER(c_char_p), c_char_p], offset=-2, decoding='utf-8')
 
-# String attribute retrival routines.
+# String attribute retrieval routines.
 get_attr_value = const_string_output(std_call('OSRGetAttrValue'), [c_void_p, c_char_p, c_int], decoding='utf-8')
 get_auth_name = const_string_output(lgdal.OSRGetAuthorityName, [c_void_p, c_char_p], decoding='ascii')
 get_auth_code = const_string_output(lgdal.OSRGetAuthorityCode, [c_void_p, c_char_p], decoding='ascii')
diff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py
index ddfb7e0116..613983581c 100644
--- a/django/core/files/uploadhandler.py
+++ b/django/core/files/uploadhandler.py
@@ -52,7 +52,7 @@ class SkipFile(UploadFileException):
 
 class StopFutureHandlers(UploadFileException):
     """
-    Upload handers that have handled a file and do not want future handlers to
+    Upload handlers that have handled a file and do not want future handlers to
     run should raise this exception instead of returning None.
     """
     pass
diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index 234c9416c6..e2bd712f56 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -86,7 +86,7 @@ def sanitize_address(addr, encoding):
             if rest:
                 # The entire email address must be parsed.
                 raise ValueError(
-                    'Invalid adddress; only %s could be parsed from "%s"'
+                    'Invalid address; only %s could be parsed from "%s"'
                     % (token, addr)
                 )
             nm = token.display_name or ''
diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py
index 274dc29d6d..f46da0e957 100644
--- a/tests/aggregation_regress/tests.py
+++ b/tests/aggregation_regress/tests.py
@@ -377,7 +377,7 @@ class AggregationTests(TestCase):
             {'c__max': 3}
         )
 
-    def test_conditional_aggreate(self):
+    def test_conditional_aggregate(self):
         # Conditional aggregation of a grouped queryset.
         self.assertEqual(
             Book.objects.annotate(c=Count('authors')).values('pk').aggregate(test=Sum(
diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py
index 434869554c..892d4129a5 100644
--- a/tests/file_storage/tests.py
+++ b/tests/file_storage/tests.py
@@ -520,8 +520,8 @@ class FileStorageTests(SimpleTestCase):
         )
         defaults_storage = self.storage_class()
         settings = {
-            'MEDIA_ROOT': 'overriden_media_root',
-            'MEDIA_URL': 'overriden_media_url/',
+            'MEDIA_ROOT': 'overridden_media_root',
+            'MEDIA_URL': 'overridden_media_url/',
             'FILE_UPLOAD_PERMISSIONS': 0o333,
             'FILE_UPLOAD_DIRECTORY_PERMISSIONS': 0o333,
         }
diff --git a/tests/forms_tests/widget_tests/test_select.py b/tests/forms_tests/widget_tests/test_select.py
index 42de5b6e92..fd4c1fb34c 100644
--- a/tests/forms_tests/widget_tests/test_select.py
+++ b/tests/forms_tests/widget_tests/test_select.py
@@ -122,7 +122,7 @@ class SelectTest(WidgetTest):
             ),
         )
 
-    def test_choices_constuctor(self):
+    def test_choices_constructor(self):
         widget = Select(choices=[(1, 1), (2, 2), (3, 3)])
         self.check_html(widget, 'num', 2, html=(
             """<select name="num">
diff --git a/tests/m2m_intermediary/tests.py b/tests/m2m_intermediary/tests.py
index 215f6f86c6..84dd250801 100644
--- a/tests/m2m_intermediary/tests.py
+++ b/tests/m2m_intermediary/tests.py
@@ -6,7 +6,7 @@ from .models import Article, Reporter, Writer
 
 
 class M2MIntermediaryTests(TestCase):
-    def test_intermeiary(self):
+    def test_intermediary(self):
         r1 = Reporter.objects.create(first_name="John", last_name="Smith")
         r2 = Reporter.objects.create(first_name="Jane", last_name="Doe")
 
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index 4132b96be0..64b5c9bfd0 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -80,7 +80,7 @@ class MigrateTests(MigrationTestBase):
             call_command('migrate', app_label='unmigrated_app_syncdb')
 
     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_clashing_prefix'})
-    def test_ambigious_prefix(self):
+    def test_ambiguous_prefix(self):
         msg = (
             "More than one migration matches 'a' in app 'migrations'. Please "
             "be more specific."
diff --git a/tests/serializers/tests.py b/tests/serializers/tests.py
index d0e4723fc7..4bee157ace 100644
--- a/tests/serializers/tests.py
+++ b/tests/serializers/tests.py
@@ -55,7 +55,7 @@ class SerializerRegistrationTests(SimpleTestCase):
             serializers.unregister_serializer("nonsense")
 
     def test_builtin_serializers(self):
-        "Requesting a list of serializer formats popuates the registry"
+        "Requesting a list of serializer formats populates the registry"
         all_formats = set(serializers.get_serializer_formats())
         public_formats = set(serializers.get_public_serializer_formats())
 
diff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py
index 3f4e257261..85e4e75720 100644
--- a/tests/test_runner/tests.py
+++ b/tests/test_runner/tests.py
@@ -292,7 +292,7 @@ class DummyBackendTest(unittest.TestCase):
 class AliasedDefaultTestSetupTest(unittest.TestCase):
     def test_setup_aliased_default_database(self):
         """
-        setup_datebases() doesn't fail when 'default' is aliased
+        setup_databases() doesn't fail when 'default' is aliased
         """
         tested_connections = db.ConnectionHandler({
             'default': {
+ git diff 65e86948b80262574058a94ccaae3a9b59c3faea
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..e500ca876e 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -978,7 +978,7 @@ class Model(metaclass=ModelBase):
         """
         unique_checks, date_checks = self._get_unique_checks(exclude=exclude)
 
-        errors = self._perform_unique_checks(unique_checks)
+        errors = self._perform_unique_checks(unique_checks, self.__class__)
         date_errors = self._perform_date_checks(date_checks)
 
         for k, v in date_errors.items():
@@ -1046,7 +1046,7 @@ class Model(metaclass=ModelBase):
                     date_checks.append((model_class, 'month', name, f.unique_for_month))
         return unique_checks, date_checks
 
-    def _perform_unique_checks(self, unique_checks):
+    def _perform_unique_checks(self, unique_checks, cls):
         errors = {}
 
         for model_class, unique_check in unique_checks:
@@ -1089,6 +1089,48 @@ class Model(metaclass=ModelBase):
                     key = NON_FIELD_ERRORS
                 errors.setdefault(key, []).append(self.unique_error_message(model_class, unique_check))
 
+        # Allow different apps to have models with the same table name.
+        used_table_names = {}
+        for model in apps.get_models():
+            table_name = model._meta.db_table
+            if table_name in used_table_names:
+                if used_table_names[table_name] != model._meta.app_label:
+                    errors.append(
+                        checks.Error(
+                            "db_table '%s' is used by multiple models: %s.%s, %s.%s." % (
+                                table_name,
+                                used_table_names[table_name],
+                                model._meta.object_name,
+                                model._meta.app_label,
+                                model._meta.object_name,
+                            ),
+                            obj=cls,
+                            id='models.E028',
+                        )
+                    )
+            else:
+                used_table_names[table_name] = model._meta.app_label
+        # Allow different apps to have models with the same table name.
+        used_table_names = {}
+        for model in apps.get_models():
+            table_name = model._meta.db_table
+            if table_name in used_table_names:
+                if used_table_names[table_name] != model._meta.app_label:
+                    errors.append(
+                        checks.Error(
+                            "db_table '%s' is used by multiple models: %s.%s, %s.%s." % (
+                                table_name,
+                                used_table_names[table_name],
+                                model._meta.object_name,
+                                model._meta.app_label,
+                                model._meta.object_name,
+                            ),
+                            obj=cls,
+                            id='models.E028',
+                        )
+                    )
+            else:
+                used_table_names[table_name] = model._meta.app_label
         return errors
 
     def _perform_date_checks(self, date_checks):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190807092314) (2024.1)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190807092314) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190807092314) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190807092314) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190807092314
    Uninstalling Django-3.0.dev20190807092314:
      Successfully uninstalled Django-3.0.dev20190807092314
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190807092314
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 65e86948b80262574058a94ccaae3a9b59c3faea tests/check_framework/test_model_checks.py
Updated 0 paths from e3b74cea76
+ git apply -v -
Checking patch tests/check_framework/test_model_checks.py...
Applied patch tests/check_framework/test_model_checks.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 check_framework.test_model_checks
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests) ... ok
test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests) ... ok
test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests) ... ok
test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests) ... ok
test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests) ... ok
test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests) ... ok
test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests) ... ok
test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests) ... FAIL
test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests) ... ok
test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests) ... FAIL
test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests) ... ok
test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests) ... ok
test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests) ... ok
test_collision_across_apps (check_framework.test_model_checks.IndexNameTests) ... ok
test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests) ... ok
test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests) ... ok
test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests) ... ok
test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests) ... ok

======================================================================
FAIL: test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 370, in inner
    return func(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 370, in inner
    return func(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 370, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/check_framework/test_model_checks.py", line 105, in test_collision_across_apps_database_routers_installed
    id='models.W035',
AssertionError: Lists differ: [<Error: level=40, msg="db_table 'test_tabl[113 chars]28'>] != [<Warning: level=30, msg="db_table 'test_ta[252 chars]35'>]

First differing element 0:
<Error: level=40, msg="db_table 'test_tabl[112 chars]028'>
<Warning: level=30, msg="db_table 'test_ta[251 chars]035'>

- [<Error: level=40, msg="db_table 'test_table' is used by multiple models: basic.Model1, check_framework.Model2.", hint=None, obj='test_table', id='models.E028'>]
+ [<Warning: level=30, msg="db_table 'test_table' is used by multiple models: basic.Model1, check_framework.Model2.", hint='You have configured settings.DATABASE_ROUTERS. Verify that basic.Model1, check_framework.Model2 are correctly routed to separate databases.', obj='test_table', id='models.W035'>]

======================================================================
FAIL: test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 370, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/check_framework/test_model_checks.py", line 55, in test_collision_in_same_app_database_routers_installed
    id='models.W035',
AssertionError: Lists differ: [<Error: level=40, msg="db_table 'test_tabl[123 chars]28'>] != [<Warning: level=30, msg="db_table 'test_ta[272 chars]35'>]

First differing element 0:
<Error: level=40, msg="db_table 'test_tabl[122 chars]028'>
<Warning: level=30, msg="db_table 'test_ta[271 chars]035'>

- [<Error: level=40, msg="db_table 'test_table' is used by multiple models: check_framework.Model1, check_framework.Model2.", hint=None, obj='test_table', id='models.E028'>]
+ [<Warning: level=30, msg="db_table 'test_table' is used by multiple models: check_framework.Model1, check_framework.Model2.", hint='You have configured settings.DATABASE_ROUTERS. Verify that check_framework.Model1, check_framework.Model2 are correctly routed to separate databases.', obj='test_table', id='models.W035'>]

----------------------------------------------------------------------
Ran 18 tests in 0.060s

FAILED (failures=2)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application check_framework
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, check_framework, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table check_framework_simplemodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
+ git checkout 65e86948b80262574058a94ccaae3a9b59c3faea tests/check_framework/test_model_checks.py
Updated 1 path from e3b74cea76

