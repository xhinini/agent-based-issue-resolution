# Instance ID: sympy__sympy-19007
# Model: MoatlessTools+GPT4o

### Original Case Description and Gold Patch
# INSTANCE_ID: sympy__sympy-19007

### ISSUE TYPE
bug fix

### DESCRIPTION
Wrong matrix element fetched from BlockMatrix
Given this code:
```
from sympy import *
n, i = symbols('n, i', integer=True)
A = MatrixSymbol('A', 1, 1)
B = MatrixSymbol('B', n, 1)
C = BlockMatrix([[A], [B]])
print('C is')
pprint(C)
print('C[i, 0] is')
pprint(C[i, 0])
```
I get this output:
```
C is
⎡A⎤
⎢ ⎥
⎣B⎦
C[i, 0] is
(A)[i, 0]
```
`(A)[i, 0]` is the wrong here. `C[i, 0]` should not be simplified as that element may come from either `A` or `B`.


### GOLD_PATCH
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -7,7 +7,7 @@
 from sympy.utilities import sift
 from sympy.utilities.misc import filldedent
 
-from sympy.matrices.expressions.matexpr import MatrixExpr, ZeroMatrix, Identity
+from sympy.matrices.expressions.matexpr import MatrixExpr, ZeroMatrix, Identity, MatrixElement
 from sympy.matrices.expressions.matmul import MatMul
 from sympy.matrices.expressions.matadd import MatAdd
 from sympy.matrices.expressions.matpow import MatPow
@@ -234,16 +234,24 @@ def transpose(self):
 
     def _entry(self, i, j, **kwargs):
         # Find row entry
+        orig_i, orig_j = i, j
         for row_block, numrows in enumerate(self.rowblocksizes):
-            if (i < numrows) != False:
+            cmp = i < numrows
+            if cmp == True:
                 break
-            else:
+            elif cmp == False:
                 i -= numrows
+            elif row_block < self.blockshape[0] - 1:
+                # Can't tell which block and it's not the last one, return unevaluated
+                return MatrixElement(self, orig_i, orig_j)
         for col_block, numcols in enumerate(self.colblocksizes):
-            if (j < numcols) != False:
+            cmp = j < numcols
+            if cmp == True:
                 break
-            else:
+            elif cmp == False:
                 j -= numcols
+            elif col_block < self.blockshape[1] - 1:
+                return MatrixElement(self, orig_i, orig_j)
         return self.blocks[row_block, col_block][i, j]
 
     @property


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index b821c42845..53a84927df 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -233,18 +233,8 @@ def transpose(self):
         return self._eval_transpose()
 
     def _entry(self, i, j, **kwargs):
-        # Find row entry
-        for row_block, numrows in enumerate(self.rowblocksizes):
-            if (i < numrows) != False:
-                break
-            else:
-                i -= numrows
-        for col_block, numcols in enumerate(self.colblocksizes):
-            if (j < numcols) != False:
-                break
-            else:
-                j -= numcols
-        return self.blocks[row_block, col_block][i, j]
+        from sympy.matrices.expressions.matexpr import MatrixElement
+        return MatrixElement(self, i, j)
 
     @property
     def is_Identity(self):