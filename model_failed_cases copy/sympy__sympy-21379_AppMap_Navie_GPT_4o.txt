# Instance ID: sympy__sympy-21379
# Model: AppMap Navie GPT-4o

### Original Case Description and Gold Patch
# INSTANCE_ID: sympy__sympy-21379

### ISSUE TYPE
bug fix

### DESCRIPTION
Unexpected `PolynomialError` when using simple `subs()` for particular expressions
I am seeing weird behavior with `subs` for particular expressions with hyperbolic sinusoids with piecewise arguments. When applying `subs`, I obtain an unexpected `PolynomialError`. For context, I was umbrella-applying a casting from int to float of all int atoms for a bunch of random expressions before using a tensorflow lambdify to avoid potential tensorflow type errors. You can pretend the expression below has a `+ 1` at the end, but below is the MWE that I could produce.

See the expression below, and the conditions in which the exception arises.

Sympy version: 1.8.dev

```python
from sympy import *
from sympy.core.cache import clear_cache

x, y, z = symbols('x y z')

clear_cache()
expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))
# This works fine
expr.subs({1: 1.0})

clear_cache()
x, y, z = symbols('x y z', real=True)
expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))
# This fails with "PolynomialError: Piecewise generators do not make sense"
expr.subs({1: 1.0})  # error
# Now run it again (isympy...) w/o clearing cache and everything works as expected without error
expr.subs({1: 1.0})
```

I am not really sure where the issue is, but I think it has something to do with the order of assumptions in this specific type of expression. Here is what I found-

- The error only (AFAIK) happens with `cosh` or `tanh` in place of `sinh`, otherwise it succeeds
- The error goes away if removing the division by `z`
- The error goes away if removing `exp` (but stays for most unary functions, `sin`, `log`, etc.)
- The error only happens with real symbols for `x` and `y` (`z` does not have to be real)

Not too sure how to debug this one.


### GOLD_PATCH
diff --git a/sympy/core/mod.py b/sympy/core/mod.py
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -40,6 +40,7 @@ def eval(cls, p, q):
         from sympy.core.mul import Mul
         from sympy.core.singleton import S
         from sympy.core.exprtools import gcd_terms
+        from sympy.polys.polyerrors import PolynomialError
         from sympy.polys.polytools import gcd
 
         def doit(p, q):
@@ -166,10 +167,13 @@ def doit(p, q):
         # XXX other possibilities?
 
         # extract gcd; any further simplification should be done by the user
-        G = gcd(p, q)
-        if G != 1:
-            p, q = [
-                gcd_terms(i/G, clear=False, fraction=False) for i in (p, q)]
+        try:
+            G = gcd(p, q)
+            if G != 1:
+                p, q = [gcd_terms(i/G, clear=False, fraction=False)
+                        for i in (p, q)]
+        except PolynomialError:  # issue 21373
+            G = S.One
         pwas, qwas = p, q
 
         # simplify terms


### MODEL_OUTPUTS




### Model Generated Patch
diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 860989f7c1..101fb902ab 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -218,6 +218,10 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (exp(arg) - exp(-arg)) / 2
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        from sympy.functions.elementary.piecewise import Piecewise
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         return (exp(arg) - exp(-arg)) / 2
 
     def _eval_rewrite_as_cosh(self, arg, **kwargs):
@@ -404,6 +408,10 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (exp(arg) + exp(-arg)) / 2
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        from sympy.functions.elementary.piecewise import Piecewise
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         return (exp(arg) + exp(-arg)) / 2
 
     def _eval_rewrite_as_sinh(self, arg, **kwargs):
@@ -629,6 +637,10 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (pos_exp - neg_exp)/(pos_exp + neg_exp)
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        from sympy.functions.elementary.piecewise import Piecewise
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         neg_exp, pos_exp = exp(-arg), exp(arg)
         return (pos_exp - neg_exp)/(pos_exp + neg_exp)
 
diff --git a/sympy/printing/tensorflow.py b/sympy/printing/tensorflow.py
index b044357db3..9d1a3f619f 100644
--- a/sympy/printing/tensorflow.py
+++ b/sympy/printing/tensorflow.py
@@ -142,7 +142,6 @@ def _print_Piecewise(self, expr):
             tensorflow_piecewise = "tensorflow.select"
         else:
             tensorflow_piecewise = "tensorflow.where"
-
         from sympy import Piecewise
         e, cond = expr.args[0].args
         if len(expr.args) == 1:


### Test Output
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/functions/elementary/hyperbolic.py
	modified:   sympy/printing/tensorflow.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 624217179aaf8d094e6ff75b7493ad1ee47599b0
Merge: 624549a1b0 ee14ba22d5
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Sat Apr 24 14:58:57 2021 +0100

    Merge pull request #21106 from ks147/DomainMatrix_ones
    
    Added function ones to DomainMatrix,DDM and SDM class

+ git diff 624217179aaf8d094e6ff75b7493ad1ee47599b0
diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 860989f7c1..101fb902ab 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -218,6 +218,10 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (exp(arg) - exp(-arg)) / 2
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        from sympy.functions.elementary.piecewise import Piecewise
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         return (exp(arg) - exp(-arg)) / 2
 
     def _eval_rewrite_as_cosh(self, arg, **kwargs):
@@ -404,6 +408,10 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (exp(arg) + exp(-arg)) / 2
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        from sympy.functions.elementary.piecewise import Piecewise
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         return (exp(arg) + exp(-arg)) / 2
 
     def _eval_rewrite_as_sinh(self, arg, **kwargs):
@@ -629,6 +637,10 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (pos_exp - neg_exp)/(pos_exp + neg_exp)
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        from sympy.functions.elementary.piecewise import Piecewise
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         neg_exp, pos_exp = exp(-arg), exp(arg)
         return (pos_exp - neg_exp)/(pos_exp + neg_exp)
 
diff --git a/sympy/printing/tensorflow.py b/sympy/printing/tensorflow.py
index b044357db3..9d1a3f619f 100644
--- a/sympy/printing/tensorflow.py
+++ b/sympy/printing/tensorflow.py
@@ -142,7 +142,6 @@ def _print_Piecewise(self, expr):
             tensorflow_piecewise = "tensorflow.select"
         else:
             tensorflow_piecewise = "tensorflow.where"
-
         from sympy import Piecewise
         e, cond = expr.args[0].args
         if len(expr.args) == 1:
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.9.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.9.dev0
    Uninstalling sympy-1.9.dev0:
      Successfully uninstalled sympy-1.9.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.9.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 624217179aaf8d094e6ff75b7493ad1ee47599b0 sympy/core/tests/test_arit.py
Updated 0 paths from 4914f038f6
+ git apply -v -
Checking patch sympy/core/tests/test_arit.py...
Applied patch sympy/core/tests/test_arit.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/core/tests/test_arit.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        57392572
hash randomization: on (PYTHONHASHSEED=4188697840)

sympy/core/tests/test_arit.py[95] 
test_bug1 ok
test_Symbol ok
test_arit0 ok
test_div ok
test_pow ok
test_pow2 ok
test_pow3 ok
test_mod_pow ok
test_pow_E ok
test_pow_issue_3516 ok
test_pow_im ok
test_real_mul ok
test_ncmul ok
test_mul_add_identity ok
test_ncpow ok
test_powerbug ok
test_Mul_doesnt_expand_exp ok
test_Mul_is_integer ok
test_Add_Mul_is_integer ok
test_Add_Mul_is_finite ok
test_Mul_is_even_odd ok
test_evenness_in_ternary_integer_product_with_odd f
test_evenness_in_ternary_integer_product_with_even ok
test_oddness_in_ternary_integer_product_with_odd f
test_oddness_in_ternary_integer_product_with_even ok
test_Mul_is_rational ok
test_Add_is_rational ok
test_Add_is_even_odd ok
test_Mul_is_negative_positive ok
test_Mul_is_negative_positive_2 ok
test_Mul_is_nonpositive_nonnegative ok
test_Add_is_negative_positive ok
test_Add_is_nonpositive_nonnegative ok
test_Pow_is_integer ok
test_Pow_is_real ok
test_real_Pow ok
test_Pow_is_finite ok
test_Pow_is_even_odd ok
test_Pow_is_negative_positive ok
test_Pow_is_zero ok
test_Pow_is_nonpositive_nonnegative ok
test_Mul_is_imaginary_real ok
test_Mul_hermitian_antihermitian ok
test_Add_is_comparable ok
test_Mul_is_comparable ok
test_Pow_is_comparable ok
test_Add_is_positive_2 ok
test_Add_is_irrational ok
test_Mul_is_irrational ok
test_issue_3531 ok
test_issue_3531b ok
test_bug3 ok
test_suppressed_evaluation ok
test_AssocOp_doit ok
test_Add_Mul_Expr_args ok
test_Add_as_coeff_mul ok
test_Pow_as_coeff_mul_doesnt_expand ok
test_issue_3514_18626 ok
test_make_args ok
test_issue_5126 ok
test_Rational_as_content_primitive ok
test_Add_as_content_primitive ok
test_Mul_as_content_primitive ok
test_Pow_as_content_primitive ok
test_issue_5460 ok
test_product_irrational ok
test_issue_5919 ok
test_Mod E
test_Mod_Pow ok
test_Mod_is_integer ok
test_Mod_is_nonposneg ok
test_issue_6001 ok
test_polar ok
test_issue_6040 ok
test_issue_6082 ok
test_issue_6077 ok
test_mul_flatten_oo ok
test_add_flatten ok
test_issue_5160_6087_6089_6090 ok
test_float_int_round ok
test_issue_6611a ok
test_denest_add_mul ok
test_mul_coeff ok
test_mul_zero_detection ok
test_Mul_with_zero_infinite ok
test_Mul_does_not_cancel_infinities ok
test_Mul_does_not_distribute_infinity ok
test_issue_8247_8354 ok
test_Add_is_zero ok
test_issue_14392 ok
test_divmod ok
test__neg__ ok
test_issue_18507 ok
test_issue_17130 ok
test_issue_21034 ok                                                       [FAIL]


________________________________ slowest tests _________________________________
sympy/core/tests/test_arit.py::test_issue_21034 - Took 10.464 seconds
________________________________________________________________________________
____________________ sympy/core/tests/test_arit.py:test_Mod ____________________
Traceback (most recent call last):
  File "/testbed/sympy/core/tests/test_arit.py", line 1921, in test_Mod
    (Piecewise((x_r, y_r > x_r), (y_r, True)) / z) % 1
  File "/testbed/sympy/core/decorators.py", line 266, in _func
    return func(self, other)
  File "/testbed/sympy/core/decorators.py", line 136, in binary_op_wrapper
    return func(self, other)
  File "/testbed/sympy/core/expr.py", line 280, in __mod__
    return Mod(self, other)
  File "/testbed/sympy/core/function.py", line 473, in __new__
    result = super().__new__(cls, *args, **options)
  File "/testbed/sympy/core/function.py", line 285, in __new__
    evaluated = cls.eval(*args)
  File "/testbed/sympy/core/mod.py", line 169, in eval
    G = gcd(p, q)
  File "/testbed/sympy/polys/polytools.py", line 5306, in gcd
    (F, G), opt = parallel_poly_from_expr((f, g), *gens, **args)
  File "/testbed/sympy/polys/polytools.py", line 4340, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/testbed/sympy/polys/polytools.py", line 4399, in _parallel_poly_from_expr
    raise PolynomialError("Piecewise generators do not make sense")
sympy.polys.polyerrors.PolynomialError: Piecewise generators do not make sense

 tests finished: 92 passed, 2 expected to fail, 1 exceptions, in 24.50 seconds =
DO *NOT* COMMIT!
+ git checkout 624217179aaf8d094e6ff75b7493ad1ee47599b0 sympy/core/tests/test_arit.py
Updated 1 path from 4914f038f6

